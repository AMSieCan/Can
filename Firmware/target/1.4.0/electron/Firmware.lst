
c:/CodeDevelopmentFolder/Can/Firmware/target/1.4.0/electron/Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000034b0  08080020  08080020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  080834d0  080834d0  000134d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  40024000  080834d8  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  20000000  080834dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000005c8  2000006c  2000006c  0003006c  2**2
                  ALLOC
  7 .module_info_suffix 00000028  08083548  08083548  00023548  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  08083570  08083570  00023570  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0009a7b7  00000000  00000000  00023574  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000e919  00000000  00000000  000bdd2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00012fee  00000000  00000000  000cc644  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001de0  00000000  00000000  000df632  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00002fb0  00000000  00000000  000e1412  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00023a1a  00000000  00000000  000e43c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00021ec4  00000000  00000000  00107ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000a444c  00000000  00000000  00129ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000b648  00000000  00000000  001ce0ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080020:	4809      	ldr	r0, [pc, #36]	; (8080048 <module_user_pre_init+0x28>)
 8080022:	490a      	ldr	r1, [pc, #40]	; (808004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 8080024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080026:	4288      	cmp	r0, r1
 8080028:	d005      	beq.n	8080036 <module_user_pre_init+0x16>
 808002a:	4a09      	ldr	r2, [pc, #36]	; (8080050 <module_user_pre_init+0x30>)
 808002c:	4282      	cmp	r2, r0
 808002e:	d002      	beq.n	8080036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 8080030:	1a12      	subs	r2, r2, r0
 8080032:	f002 fff7 	bl	8083024 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080036:	4807      	ldr	r0, [pc, #28]	; (8080054 <module_user_pre_init+0x34>)
 8080038:	4a07      	ldr	r2, [pc, #28]	; (8080058 <module_user_pre_init+0x38>)
 808003a:	2100      	movs	r1, #0
 808003c:	1a12      	subs	r2, r2, r0
 808003e:	f002 fffc 	bl	808303a <memset>
    return &link_heap_start;
}
 8080042:	4806      	ldr	r0, [pc, #24]	; (808005c <module_user_pre_init+0x3c>)
 8080044:	bd08      	pop	{r3, pc}
 8080046:	bf00      	nop
 8080048:	20000000 	.word	0x20000000
 808004c:	080834dc 	.word	0x080834dc
 8080050:	2000006c 	.word	0x2000006c
 8080054:	2000006c 	.word	0x2000006c
 8080058:	20000634 	.word	0x20000634
 808005c:	20000634 	.word	0x20000634

08080060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 8080060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 8080062:	f000 ffff 	bl	8081064 <module_user_init_hook>
 8080066:	4b07      	ldr	r3, [pc, #28]	; (8080084 <module_user_init+0x24>)
 8080068:	4c07      	ldr	r4, [pc, #28]	; (8080088 <module_user_init+0x28>)
 808006a:	461e      	mov	r6, r3
 808006c:	1ae4      	subs	r4, r4, r3
 808006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080070:	2500      	movs	r5, #0
 8080072:	42a5      	cmp	r5, r4
 8080074:	d004      	beq.n	8080080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 8080076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 808007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808007c:	3501      	adds	r5, #1
 808007e:	e7f8      	b.n	8080072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 8080080:	bd70      	pop	{r4, r5, r6, pc}
 8080082:	bf00      	nop
 8080084:	08083490 	.word	0x08083490
 8080088:	080834c4 	.word	0x080834c4

0808008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 808008c:	f000 b814 	b.w	80800b8 <setup>

08080090 <module_user_loop>:
}

void module_user_loop() {
 8080090:	b508      	push	{r3, lr}
    loop();
 8080092:	f000 f903 	bl	808029c <loop>
    _post_loop();
}
 8080096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 808009a:	f000 bfa5 	b.w	8080fe8 <_post_loop>

0808009e <_Znwj>:
 808009e:	f000 bbd3 	b.w	8080848 <malloc>

080800a2 <_ZdlPv>:
 80800a2:	f000 bbd9 	b.w	8080858 <free>

080800a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800a6:	7800      	ldrb	r0, [r0, #0]
 80800a8:	fab0 f080 	clz	r0, r0
 80800ac:	0940      	lsrs	r0, r0, #5
 80800ae:	4770      	bx	lr

080800b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800b0:	2301      	movs	r3, #1
 80800b2:	7003      	strb	r3, [r0, #0]
 80800b4:	4770      	bx	lr
	...

080800b8 <setup>:
int readCounter(int p_counterInt);
void enable5VPower(int p_powerPin, int p_mSexcitationTime);
void disable5VPower(int p_powerPin);

void setup()
{ 
 80800b8:	b508      	push	{r3, lr}
  //    all inputs and outputs should be configured and initialized to properly states here.
  // Input: None
  // Output: None

  //Setup the voltage regulator and enable
  pinMode(V5_EXT, OUTPUT);
 80800ba:	2101      	movs	r1, #1
 80800bc:	2004      	movs	r0, #4
 80800be:	f001 fdad 	bl	8081c1c <pinMode>

  // Setup the HC SR-04
  // Make the pins accept input, or send an output (hz)
  pinMode(ECHO_PIN, INPUT);
 80800c2:	2100      	movs	r1, #0
 80800c4:	2006      	movs	r0, #6
 80800c6:	f001 fda9 	bl	8081c1c <pinMode>
  pinMode(TRIGGER_PIN, OUTPUT);
 80800ca:	2101      	movs	r1, #1
 80800cc:	2002      	movs	r0, #2
 80800ce:	f001 fda5 	bl	8081c1c <pinMode>

  //  Setup for tipping mechanism
  pinMode(COUNTER_INT, INPUT);      //Set the pin as an input
 80800d2:	2100      	movs	r1, #0
 80800d4:	4608      	mov	r0, r1
 80800d6:	f001 fda1 	bl	8081c1c <pinMode>
  digitalWrite(COUNTER_INT, HIGH);  //Set the input high (normally closed switch), expect voltage through circuit e.g. 3.3vdc
 80800da:	2101      	movs	r1, #1
 80800dc:	2000      	movs	r0, #0
 80800de:	f001 fdae 	bl	8081c3e <digitalWrite>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80800e2:	f000 fa55 	bl	8080590 <HAL_Timer_Get_Milli_Seconds>
  
  // Initialize sampling time to now!
  nextLog = millis();
 80800e6:	4b01      	ldr	r3, [pc, #4]	; (80800ec <setup+0x34>)
 80800e8:	6018      	str	r0, [r3, #0]
 80800ea:	bd08      	pop	{r3, pc}
 80800ec:	20000078 	.word	0x20000078

080800f0 <_Z6hcDistv>:
  delay(1000); // Wait for next time around
}

// Function implementations
double hcDist()
{ 
 80800f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Description: Function samples the ultrasonic HC SR-04 sensor (https://www.makerguides.com/hc-sr04-arduino-tutorial/)
  // Input: Nothing
  // Returns:  Negative value if no valid distance is found, or a positive value indicating the distance in inches

  // Prepare Sensor to get distance
  digitalWrite(TRIGGER_PIN, LOW);
 80800f2:	2100      	movs	r1, #0
 80800f4:	2002      	movs	r0, #2
 80800f6:	f001 fda2 	bl	8081c3e <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80800fa:	2002      	movs	r0, #2
 80800fc:	f000 fa40 	bl	8080580 <HAL_Delay_Microseconds>
  delayMicroseconds(2);
  //-- Send ultrasonic pulse trigger
  digitalWrite(TRIGGER_PIN,HIGH);
 8080100:	2101      	movs	r1, #1
 8080102:	2002      	movs	r0, #2
 8080104:	f001 fd9b 	bl	8081c3e <digitalWrite>
 8080108:	200a      	movs	r0, #10
 808010a:	f000 fa39 	bl	8080580 <HAL_Delay_Microseconds>
  delayMicroseconds(10);
  digitalWrite(TRIGGER_PIN, LOW);
 808010e:	2100      	movs	r1, #0
 8080110:	2002      	movs	r0, #2
 8080112:	f001 fd94 	bl	8081c3e <digitalWrite>
  //-- Stop

  // Read distance
  double distance = pulseIn(ECHO_PIN, HIGH) * 0.0133 / 2; //TODO : add temperature compensation!
 8080116:	2101      	movs	r1, #1
 8080118:	2006      	movs	r0, #6
 808011a:	f001 fdd3 	bl	8081cc4 <pulseIn>
 808011e:	f002 f8cd 	bl	80822bc <__aeabi_ui2d>
 8080122:	a313      	add	r3, pc, #76	; (adr r3, 8080170 <_Z6hcDistv+0x80>)
 8080124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080128:	f002 f93e 	bl	80823a8 <__aeabi_dmul>
 808012c:	2200      	movs	r2, #0
 808012e:	4b12      	ldr	r3, [pc, #72]	; (8080178 <_Z6hcDistv+0x88>)
 8080130:	f002 f93a 	bl	80823a8 <__aeabi_dmul>
 8080134:	460d      	mov	r5, r1
 8080136:	4604      	mov	r4, r0
  Serial.print("Distance Measured: ");
 8080138:	f001 fb40 	bl	80817bc <_Z16_fetch_usbserialv>
 808013c:	490f      	ldr	r1, [pc, #60]	; (808017c <_Z6hcDistv+0x8c>)
 808013e:	f000 fda3 	bl	8080c88 <_ZN5Print5printEPKc>
  Serial.println(distance);
 8080142:	f001 fb3b 	bl	80817bc <_Z16_fetch_usbserialv>
 8080146:	2302      	movs	r3, #2
 8080148:	9300      	str	r3, [sp, #0]
 808014a:	4622      	mov	r2, r4
 808014c:	462b      	mov	r3, r5
 808014e:	f000 feb5 	bl	8080ebc <_ZN5Print7printlnEdi>
  if ( distance <= 0 ) { return -1.0; } // Failed reading
 8080152:	2200      	movs	r2, #0
 8080154:	2300      	movs	r3, #0
 8080156:	4620      	mov	r0, r4
 8080158:	4629      	mov	r1, r5
 808015a:	f002 fba1 	bl	80828a0 <__aeabi_dcmple>
 808015e:	b910      	cbnz	r0, 8080166 <_Z6hcDistv+0x76>
  else { return distance; } // Good reading
 8080160:	4620      	mov	r0, r4
 8080162:	4629      	mov	r1, r5
 8080164:	e001      	b.n	808016a <_Z6hcDistv+0x7a>

  // Read distance
  double distance = pulseIn(ECHO_PIN, HIGH) * 0.0133 / 2; //TODO : add temperature compensation!
  Serial.print("Distance Measured: ");
  Serial.println(distance);
  if ( distance <= 0 ) { return -1.0; } // Failed reading
 8080166:	4906      	ldr	r1, [pc, #24]	; (8080180 <_Z6hcDistv+0x90>)
 8080168:	2000      	movs	r0, #0
  else { return distance; } // Good reading
}
 808016a:	b003      	add	sp, #12
 808016c:	bd30      	pop	{r4, r5, pc}
 808016e:	bf00      	nop
 8080170:	c84b5dcc 	.word	0xc84b5dcc
 8080174:	3f8b3d07 	.word	0x3f8b3d07
 8080178:	3fe00000 	.word	0x3fe00000
 808017c:	08083108 	.word	0x08083108
 8080180:	bff00000 	.word	0xbff00000

08080184 <_Z11readCounteri>:
  Particle.publish("tilt", String(p_tilt), PRIVATE);
  return;
}

int readCounter(int p_counterInt)
{ 
 8080184:	b508      	push	{r3, lr}
  //  It is important to note that the reed switch used in this implementation is a normally closed
  //  until magnet moves away from apparatus..
  // Input: p_counterInt is the pin used for checking state change in the hardware
  // Output: returns int value of 1 if an event is detected, otherwise returns nothing

  if ( !digitalRead(p_counterInt) )
 8080186:	b280      	uxth	r0, r0
 8080188:	f001 fd72 	bl	8081c70 <digitalRead>
  {
    // Serial.println("Flipper has been moved...");
    return 1;   //  Return the value
  }
  return 0;
}
 808018c:	fab0 f080 	clz	r0, r0
 8080190:	0940      	lsrs	r0, r0, #5
 8080192:	bd08      	pop	{r3, pc}

08080194 <_Z13enable5VPowerii>:

void enable5VPower(int p_powerPin, int p_mSexcitationTime)
{
 8080194:	b510      	push	{r4, lr}
 8080196:	460c      	mov	r4, r1
  digitalWrite(p_powerPin, HIGH);
 8080198:	b280      	uxth	r0, r0
 808019a:	2101      	movs	r1, #1
 808019c:	f001 fd4f 	bl	8081c3e <digitalWrite>
  delay(p_mSexcitationTime); //Time in mS.  Wait at least 500mS for sensor to turn on and begin recording valid data, otherwise it might be garbage.
 80801a0:	4620      	mov	r0, r4
 80801a2:	f000 feb3 	bl	8080f0c <delay>
  Serial.println("5V Power On");
 80801a6:	f001 fb09 	bl	80817bc <_Z16_fetch_usbserialv>
  return;
}
 80801aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void enable5VPower(int p_powerPin, int p_mSexcitationTime)
{
  digitalWrite(p_powerPin, HIGH);
  delay(p_mSexcitationTime); //Time in mS.  Wait at least 500mS for sensor to turn on and begin recording valid data, otherwise it might be garbage.
  Serial.println("5V Power On");
 80801ae:	4901      	ldr	r1, [pc, #4]	; (80801b4 <_Z13enable5VPowerii+0x20>)
 80801b0:	f000 bd7d 	b.w	8080cae <_ZN5Print7printlnEPKc>
 80801b4:	0808311c 	.word	0x0808311c

080801b8 <_Z14disable5VPoweri>:
  return;
}

void disable5VPower(int p_powerPin)
{
 80801b8:	b508      	push	{r3, lr}
  digitalWrite(p_powerPin, LOW);
 80801ba:	2100      	movs	r1, #0
 80801bc:	b280      	uxth	r0, r0
 80801be:	f001 fd3e 	bl	8081c3e <digitalWrite>
  Serial.println("5V Power Off");
 80801c2:	f001 fafb 	bl	80817bc <_Z16_fetch_usbserialv>
  return;
 80801c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

void disable5VPower(int p_powerPin)
{
  digitalWrite(p_powerPin, LOW);
  Serial.println("5V Power Off");
 80801ca:	4901      	ldr	r1, [pc, #4]	; (80801d0 <_Z14disable5VPoweri+0x18>)
 80801cc:	f000 bd6f 	b.w	8080cae <_ZN5Print7printlnEPKc>
 80801d0:	08083128 	.word	0x08083128

080801d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80801d4:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80801d6:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80801d8:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80801da:	b17c      	cbz	r4, 80801fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80801dc:	6863      	ldr	r3, [r4, #4]
 80801de:	3b01      	subs	r3, #1
 80801e0:	6063      	str	r3, [r4, #4]
 80801e2:	b95b      	cbnz	r3, 80801fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80801e4:	6823      	ldr	r3, [r4, #0]
 80801e6:	4620      	mov	r0, r4
 80801e8:	689b      	ldr	r3, [r3, #8]
 80801ea:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80801ec:	68a3      	ldr	r3, [r4, #8]
 80801ee:	3b01      	subs	r3, #1
 80801f0:	60a3      	str	r3, [r4, #8]
 80801f2:	b91b      	cbnz	r3, 80801fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80801f4:	6823      	ldr	r3, [r4, #0]
 80801f6:	4620      	mov	r0, r4
 80801f8:	68db      	ldr	r3, [r3, #12]
 80801fa:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80801fc:	4628      	mov	r0, r5
 80801fe:	bd38      	pop	{r3, r4, r5, pc}

08080200 <_Z7logDatadii>:
  if ( distance <= 0 ) { return -1.0; } // Failed reading
  else { return distance; } // Good reading
}

void logData(double p_distanceInches, int p_count, int p_tilt)
{
 8080200:	b570      	push	{r4, r5, r6, lr}
 8080202:	4616      	mov	r6, r2
 8080204:	461d      	mov	r5, r3
 8080206:	b088      	sub	sp, #32
 8080208:	4c20      	ldr	r4, [pc, #128]	; (808028c <_Z7logDatadii+0x8c>)
  // Description: Function for logging data specifically the distance and counting
  // Input: Accepts the parameters as values for the p_distanceInches and p_count
  // Output: Nothing

  Particle.publish("distance", String(p_distanceInches), PRIVATE);
 808020a:	2306      	movs	r3, #6
 808020c:	9300      	str	r3, [sp, #0]
 808020e:	4602      	mov	r2, r0
 8080210:	460b      	mov	r3, r1
 8080212:	a804      	add	r0, sp, #16
 8080214:	f000 fcc7 	bl	8080ba6 <_ZN6StringC1Edi>
 8080218:	7823      	ldrb	r3, [r4, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 808021a:	9a04      	ldr	r2, [sp, #16]
 808021c:	491c      	ldr	r1, [pc, #112]	; (8080290 <_Z7logDatadii+0x90>)
 808021e:	f88d 3000 	strb.w	r3, [sp]
 8080222:	a802      	add	r0, sp, #8
 8080224:	233c      	movs	r3, #60	; 0x3c
 8080226:	f001 f88b 	bl	8081340 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 808022a:	a803      	add	r0, sp, #12
 808022c:	f7ff ffd2 	bl	80801d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080230:	a804      	add	r0, sp, #16
 8080232:	f000 fc0f 	bl	8080a54 <_ZN6StringD1Ev>
  Particle.publish("count", String(p_count), PRIVATE);
 8080236:	4631      	mov	r1, r6
 8080238:	220a      	movs	r2, #10
 808023a:	a804      	add	r0, sp, #16
 808023c:	f000 fc75 	bl	8080b2a <_ZN6StringC1Eih>
 8080240:	7823      	ldrb	r3, [r4, #0]
 8080242:	9a04      	ldr	r2, [sp, #16]
 8080244:	4913      	ldr	r1, [pc, #76]	; (8080294 <_Z7logDatadii+0x94>)
 8080246:	f88d 3000 	strb.w	r3, [sp]
 808024a:	a802      	add	r0, sp, #8
 808024c:	233c      	movs	r3, #60	; 0x3c
 808024e:	f001 f877 	bl	8081340 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8080252:	a803      	add	r0, sp, #12
 8080254:	f7ff ffbe 	bl	80801d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080258:	a804      	add	r0, sp, #16
 808025a:	f000 fbfb 	bl	8080a54 <_ZN6StringD1Ev>
  Particle.publish("tilt", String(p_tilt), PRIVATE);
 808025e:	4629      	mov	r1, r5
 8080260:	220a      	movs	r2, #10
 8080262:	a804      	add	r0, sp, #16
 8080264:	f000 fc61 	bl	8080b2a <_ZN6StringC1Eih>
 8080268:	7823      	ldrb	r3, [r4, #0]
 808026a:	9a04      	ldr	r2, [sp, #16]
 808026c:	490a      	ldr	r1, [pc, #40]	; (8080298 <_Z7logDatadii+0x98>)
 808026e:	f88d 3000 	strb.w	r3, [sp]
 8080272:	a802      	add	r0, sp, #8
 8080274:	233c      	movs	r3, #60	; 0x3c
 8080276:	f001 f863 	bl	8081340 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 808027a:	a803      	add	r0, sp, #12
 808027c:	f7ff ffaa 	bl	80801d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080280:	a804      	add	r0, sp, #16
 8080282:	f000 fbe7 	bl	8080a54 <_ZN6StringD1Ev>
  return;
}
 8080286:	b008      	add	sp, #32
 8080288:	bd70      	pop	{r4, r5, r6, pc}
 808028a:	bf00      	nop
 808028c:	20000074 	.word	0x20000074
 8080290:	08083135 	.word	0x08083135
 8080294:	0808313e 	.word	0x0808313e
 8080298:	08083144 	.word	0x08083144

0808029c <loop>:
  // Initialize sampling time to now!
  nextLog = millis();
}

void loop()
{ 
 808029c:	b5f0      	push	{r4, r5, r6, r7, lr}
 808029e:	b08d      	sub	sp, #52	; 0x34
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80802a0:	f000 f976 	bl	8080590 <HAL_Timer_Get_Milli_Seconds>
  // Description: Main loop and logic for the program
  // Input: None
  // Output: None
  
  if ( nextLog < millis() ) // Check to see if the data needs to be logged according to the current time and nextLog value
 80802a4:	4d73      	ldr	r5, [pc, #460]	; (8080474 <loop+0x1d8>)
 80802a6:	682c      	ldr	r4, [r5, #0]
 80802a8:	4284      	cmp	r4, r0
 80802aa:	d227      	bcs.n	80802fc <loop+0x60>
  {
    Serial.println("Logging and posting data..");
 80802ac:	f001 fa86 	bl	80817bc <_Z16_fetch_usbserialv>
 80802b0:	4971      	ldr	r1, [pc, #452]	; (8080478 <loop+0x1dc>)
 80802b2:	f000 fcfc 	bl	8080cae <_ZN5Print7printlnEPKc>
 80802b6:	f000 f96b 	bl	8080590 <HAL_Timer_Get_Milli_Seconds>
    // Setting the next time, right away
    nextLog = millis() + (SAMPLE_RATE_MINUTES * 60 * 1000);
 80802ba:	f500 406a 	add.w	r0, r0, #59904	; 0xea00
 80802be:	3060      	adds	r0, #96	; 0x60
 80802c0:	6028      	str	r0, [r5, #0]

    //Turn on 5V power for 3S
    enable5VPower(V5_EXT, 30000);
 80802c2:	f247 5130 	movw	r1, #30000	; 0x7530
 80802c6:	2004      	movs	r0, #4
 80802c8:	f7ff ff64 	bl	8080194 <_Z13enable5VPowerii>
    
    // Sampling the distance sensor
    double distanceInches = hcDist();
 80802cc:	f7ff ff10 	bl	80800f0 <_Z6hcDistv>
 80802d0:	4606      	mov	r6, r0
 80802d2:	460f      	mov	r7, r1

    //Turn off 5V power
    disable5VPower(V5_EXT);

    // Store Data
    logData(distanceInches, counter, tilt);
 80802d4:	4c69      	ldr	r4, [pc, #420]	; (808047c <loop+0x1e0>)
 80802d6:	4d6a      	ldr	r5, [pc, #424]	; (8080480 <loop+0x1e4>)
    
    // Sampling the distance sensor
    double distanceInches = hcDist();

    //Turn off 5V power
    disable5VPower(V5_EXT);
 80802d8:	2004      	movs	r0, #4
 80802da:	f7ff ff6d 	bl	80801b8 <_Z14disable5VPoweri>

    // Store Data
    logData(distanceInches, counter, tilt);
 80802de:	4639      	mov	r1, r7
 80802e0:	6823      	ldr	r3, [r4, #0]
 80802e2:	682a      	ldr	r2, [r5, #0]
 80802e4:	4630      	mov	r0, r6
 80802e6:	f7ff ff8b 	bl	8080200 <_Z7logDatadii>
    counter = 0;
 80802ea:	2300      	movs	r3, #0
 80802ec:	602b      	str	r3, [r5, #0]
    tilt = 0;
 80802ee:	6023      	str	r3, [r4, #0]
    Serial.println("Reset values to zero..");
 80802f0:	f001 fa64 	bl	80817bc <_Z16_fetch_usbserialv>
 80802f4:	4963      	ldr	r1, [pc, #396]	; (8080484 <loop+0x1e8>)
 80802f6:	f000 fcda 	bl	8080cae <_ZN5Print7printlnEPKc>
 80802fa:	e03a      	b.n	8080372 <loop+0xd6>
 80802fc:	f000 f948 	bl	8080590 <HAL_Timer_Get_Milli_Seconds>
  }
  else
  {
    unsigned long actualTime = nextLog - millis();
 8080300:	1a24      	subs	r4, r4, r0
    unsigned long actualTimeSeconds = (actualTime / 1000); // Seconds
    Serial.println("Logging data in\t" + String(actualTimeSeconds / 60) +" Minutes:\t"+ String(actualTimeSeconds % 60) +" Seconds");
 8080302:	f001 fa5b 	bl	80817bc <_Z16_fetch_usbserialv>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 8080306:	4960      	ldr	r1, [pc, #384]	; (8080488 <loop+0x1ec>)
 8080308:	4605      	mov	r5, r0
 808030a:	a804      	add	r0, sp, #16
 808030c:	f000 fbe9 	bl	8080ae2 <_ZN6StringC1EPK19__FlashStringHelper>
 8080310:	f64e 2160 	movw	r1, #60000	; 0xea60
 8080314:	220a      	movs	r2, #10
 8080316:	fbb4 f1f1 	udiv	r1, r4, r1
 808031a:	4668      	mov	r0, sp
 808031c:	f000 fc18 	bl	8080b50 <_ZN6StringC1Emh>
 8080320:	4669      	mov	r1, sp
 8080322:	a804      	add	r0, sp, #16
 8080324:	f000 fc6c 	bl	8080c00 <_ZplRK15StringSumHelperRK6String>
 8080328:	4958      	ldr	r1, [pc, #352]	; (808048c <loop+0x1f0>)
 808032a:	f000 fc75 	bl	8080c18 <_ZplRK15StringSumHelperPKc>
 808032e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8080332:	fbb4 f4f1 	udiv	r4, r4, r1
 8080336:	233c      	movs	r3, #60	; 0x3c
 8080338:	fbb4 f1f3 	udiv	r1, r4, r3
 808033c:	4606      	mov	r6, r0
 808033e:	fb03 4111 	mls	r1, r3, r1, r4
 8080342:	220a      	movs	r2, #10
 8080344:	a808      	add	r0, sp, #32
 8080346:	f000 fc03 	bl	8080b50 <_ZN6StringC1Emh>
 808034a:	a908      	add	r1, sp, #32
 808034c:	4630      	mov	r0, r6
 808034e:	f000 fc57 	bl	8080c00 <_ZplRK15StringSumHelperRK6String>
 8080352:	494f      	ldr	r1, [pc, #316]	; (8080490 <loop+0x1f4>)
 8080354:	f000 fc60 	bl	8080c18 <_ZplRK15StringSumHelperPKc>
 8080358:	6801      	ldr	r1, [r0, #0]
 808035a:	4628      	mov	r0, r5
 808035c:	f000 fca7 	bl	8080cae <_ZN5Print7printlnEPKc>
 8080360:	a808      	add	r0, sp, #32
 8080362:	f000 fb77 	bl	8080a54 <_ZN6StringD1Ev>
 8080366:	4668      	mov	r0, sp
 8080368:	f000 fb74 	bl	8080a54 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 808036c:	a804      	add	r0, sp, #16
 808036e:	f000 fb71 	bl	8080a54 <_ZN6StringD1Ev>
  }

  // Check the interupt state for an open condition of the circuit and that enough time has passed to begin counting or incrementing again
  //  Debounce is implemented here
  if( readCounter(COUNTER_INT) && ( millis() - lastCounterTime >= debounceCount ))
 8080372:	2000      	movs	r0, #0
 8080374:	f7ff ff06 	bl	8080184 <_Z11readCounteri>
 8080378:	2800      	cmp	r0, #0
 808037a:	d069      	beq.n	8080450 <loop+0x1b4>
 808037c:	f000 f908 	bl	8080590 <HAL_Timer_Get_Milli_Seconds>
 8080380:	4d44      	ldr	r5, [pc, #272]	; (8080494 <loop+0x1f8>)
 8080382:	682b      	ldr	r3, [r5, #0]
 8080384:	1ac0      	subs	r0, r0, r3
 8080386:	4b44      	ldr	r3, [pc, #272]	; (8080498 <loop+0x1fc>)
 8080388:	681b      	ldr	r3, [r3, #0]
 808038a:	4298      	cmp	r0, r3
 808038c:	d360      	bcc.n	8080450 <loop+0x1b4>
  {
    counter++; // Increment the stored value
 808038e:	4c3c      	ldr	r4, [pc, #240]	; (8080480 <loop+0x1e4>)
 8080390:	6823      	ldr	r3, [r4, #0]
 8080392:	3301      	adds	r3, #1
 8080394:	6023      	str	r3, [r4, #0]
    Serial.println("Trash inserted!");
 8080396:	f001 fa11 	bl	80817bc <_Z16_fetch_usbserialv>
 808039a:	4940      	ldr	r1, [pc, #256]	; (808049c <loop+0x200>)
 808039c:	f000 fc87 	bl	8080cae <_ZN5Print7printlnEPKc>
    Serial.println("Count increased now: " + String(counter) );
 80803a0:	f001 fa0c 	bl	80817bc <_Z16_fetch_usbserialv>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80803a4:	493e      	ldr	r1, [pc, #248]	; (80804a0 <loop+0x204>)
 80803a6:	4606      	mov	r6, r0
 80803a8:	a808      	add	r0, sp, #32
 80803aa:	f000 fb9a 	bl	8080ae2 <_ZN6StringC1EPK19__FlashStringHelper>
 80803ae:	220a      	movs	r2, #10
 80803b0:	6821      	ldr	r1, [r4, #0]
 80803b2:	a804      	add	r0, sp, #16
 80803b4:	f000 fbb9 	bl	8080b2a <_ZN6StringC1Eih>
 80803b8:	a904      	add	r1, sp, #16
 80803ba:	a808      	add	r0, sp, #32
 80803bc:	f000 fc20 	bl	8080c00 <_ZplRK15StringSumHelperRK6String>
 80803c0:	6801      	ldr	r1, [r0, #0]
 80803c2:	4630      	mov	r0, r6
 80803c4:	f000 fc73 	bl	8080cae <_ZN5Print7printlnEPKc>
 80803c8:	a804      	add	r0, sp, #16
 80803ca:	f000 fb43 	bl	8080a54 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80803ce:	a808      	add	r0, sp, #32
 80803d0:	f000 fb40 	bl	8080a54 <_ZN6StringD1Ev>
 80803d4:	f000 f8dc 	bl	8080590 <HAL_Timer_Get_Milli_Seconds>
    lastCounterTime = millis(); // We need to set the time to now for measuring the time to wait before incrementing again (debounce)
 80803d8:	6028      	str	r0, [r5, #0]
  else if ( readCounter(COUNTER_INT) )
  {
    Serial.println("...zzz...");
  }

  if( !readCounter(COUNTER_INT) && ( millis() - lastCounterTime < debounceCount))
 80803da:	2000      	movs	r0, #0
 80803dc:	f7ff fed2 	bl	8080184 <_Z11readCounteri>
 80803e0:	b940      	cbnz	r0, 80803f4 <loop+0x158>
 80803e2:	f000 f8d5 	bl	8080590 <HAL_Timer_Get_Milli_Seconds>
 80803e6:	4c2b      	ldr	r4, [pc, #172]	; (8080494 <loop+0x1f8>)
 80803e8:	4d2b      	ldr	r5, [pc, #172]	; (8080498 <loop+0x1fc>)
 80803ea:	6823      	ldr	r3, [r4, #0]
 80803ec:	1ac0      	subs	r0, r0, r3
 80803ee:	682b      	ldr	r3, [r5, #0]
 80803f0:	4298      	cmp	r0, r3
 80803f2:	d338      	bcc.n	8080466 <loop+0x1ca>
  { 
    // If the flipper returned to rest or a closed circuit again, we reset the time.  Not like a typical debounce...
    // To reset, we just set the value to the best acceptable using the variable below
    lastCounterTime = millis() - debounceCount;
  }
  float tamperDetection = analogRead(TAMPER_PIN);
 80803f4:	200b      	movs	r0, #11
 80803f6:	f001 fc4e 	bl	8081c96 <analogRead>
 80803fa:	f002 fb87 	bl	8082b0c <__aeabi_i2f>
  if (tamperDetection >=1900 )
 80803fe:	4929      	ldr	r1, [pc, #164]	; (80804a4 <loop+0x208>)
  { 
    // If the flipper returned to rest or a closed circuit again, we reset the time.  Not like a typical debounce...
    // To reset, we just set the value to the best acceptable using the variable below
    lastCounterTime = millis() - debounceCount;
  }
  float tamperDetection = analogRead(TAMPER_PIN);
 8080400:	4605      	mov	r5, r0
  if (tamperDetection >=1900 )
 8080402:	f002 fc39 	bl	8082c78 <__aeabi_fcmpge>
 8080406:	b1e8      	cbz	r0, 8080444 <loop+0x1a8>
  {
    Serial.println("TAMPER Detected: " + String(tamperDetection));
 8080408:	f001 f9d8 	bl	80817bc <_Z16_fetch_usbserialv>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 808040c:	4926      	ldr	r1, [pc, #152]	; (80804a8 <loop+0x20c>)
 808040e:	4604      	mov	r4, r0
 8080410:	a808      	add	r0, sp, #32
 8080412:	f000 fb66 	bl	8080ae2 <_ZN6StringC1EPK19__FlashStringHelper>
 8080416:	2206      	movs	r2, #6
 8080418:	4629      	mov	r1, r5
 808041a:	a804      	add	r0, sp, #16
 808041c:	f000 fbac 	bl	8080b78 <_ZN6StringC1Efi>
 8080420:	a904      	add	r1, sp, #16
 8080422:	a808      	add	r0, sp, #32
 8080424:	f000 fbec 	bl	8080c00 <_ZplRK15StringSumHelperRK6String>
 8080428:	6801      	ldr	r1, [r0, #0]
 808042a:	4620      	mov	r0, r4
 808042c:	f000 fc3f 	bl	8080cae <_ZN5Print7printlnEPKc>
 8080430:	a804      	add	r0, sp, #16
 8080432:	f000 fb0f 	bl	8080a54 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8080436:	a808      	add	r0, sp, #32
 8080438:	f000 fb0c 	bl	8080a54 <_ZN6StringD1Ev>
    tilt++;
 808043c:	4a0f      	ldr	r2, [pc, #60]	; (808047c <loop+0x1e0>)
 808043e:	6813      	ldr	r3, [r2, #0]
 8080440:	3301      	adds	r3, #1
 8080442:	6013      	str	r3, [r2, #0]
  {
    // Serial.println("Current tilt reading : " + String(tamperDetection));
  }
  
  // End of the tunnel, its time to go again
  delay(1000); // Wait for next time around
 8080444:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8080448:	f000 fd60 	bl	8080f0c <delay>
}
 808044c:	b00d      	add	sp, #52	; 0x34
 808044e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    counter++; // Increment the stored value
    Serial.println("Trash inserted!");
    Serial.println("Count increased now: " + String(counter) );
    lastCounterTime = millis(); // We need to set the time to now for measuring the time to wait before incrementing again (debounce)
  }
  else if ( readCounter(COUNTER_INT) )
 8080450:	2000      	movs	r0, #0
 8080452:	f7ff fe97 	bl	8080184 <_Z11readCounteri>
 8080456:	2800      	cmp	r0, #0
 8080458:	d0bf      	beq.n	80803da <loop+0x13e>
  {
    Serial.println("...zzz...");
 808045a:	f001 f9af 	bl	80817bc <_Z16_fetch_usbserialv>
 808045e:	4913      	ldr	r1, [pc, #76]	; (80804ac <loop+0x210>)
 8080460:	f000 fc25 	bl	8080cae <_ZN5Print7printlnEPKc>
 8080464:	e7b9      	b.n	80803da <loop+0x13e>
 8080466:	f000 f893 	bl	8080590 <HAL_Timer_Get_Milli_Seconds>

  if( !readCounter(COUNTER_INT) && ( millis() - lastCounterTime < debounceCount))
  { 
    // If the flipper returned to rest or a closed circuit again, we reset the time.  Not like a typical debounce...
    // To reset, we just set the value to the best acceptable using the variable below
    lastCounterTime = millis() - debounceCount;
 808046a:	682b      	ldr	r3, [r5, #0]
 808046c:	1ac0      	subs	r0, r0, r3
 808046e:	6020      	str	r0, [r4, #0]
 8080470:	e7c0      	b.n	80803f4 <loop+0x158>
 8080472:	bf00      	nop
 8080474:	20000078 	.word	0x20000078
 8080478:	08083149 	.word	0x08083149
 808047c:	2000007c 	.word	0x2000007c
 8080480:	20000080 	.word	0x20000080
 8080484:	08083164 	.word	0x08083164
 8080488:	0808317b 	.word	0x0808317b
 808048c:	0808318c 	.word	0x0808318c
 8080490:	08083197 	.word	0x08083197
 8080494:	20000070 	.word	0x20000070
 8080498:	20000000 	.word	0x20000000
 808049c:	080831bc 	.word	0x080831bc
 80804a0:	080831cc 	.word	0x080831cc
 80804a4:	44ed8000 	.word	0x44ed8000
 80804a8:	080831aa 	.word	0x080831aa
 80804ac:	080831a0 	.word	0x080831a0

080804b0 <_GLOBAL__sub_I_nextLog>:
void disable5VPower(int p_powerPin)
{
  digitalWrite(p_powerPin, LOW);
  Serial.println("5V Power Off");
  return;
 80804b0:	b508      	push	{r3, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80804b2:	4b05      	ldr	r3, [pc, #20]	; (80804c8 <_GLOBAL__sub_I_nextLog+0x18>)
 80804b4:	2201      	movs	r2, #1
 80804b6:	701a      	strb	r2, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80804b8:	f000 f80a 	bl	80804d0 <HAL_Pin_Map>
 80804bc:	f000 f868 	bl	8080590 <HAL_Timer_Get_Milli_Seconds>
const int TRIGGER_PIN = D2;

// Pin assignments and configurations for the tipping sensor
const int COUNTER_INT = D0;
int counter = 0; // initialize the start value
long lastCounterTime = millis(); // initialize the counter position to register state changes
 80804c0:	4b02      	ldr	r3, [pc, #8]	; (80804cc <_GLOBAL__sub_I_nextLog+0x1c>)
 80804c2:	6018      	str	r0, [r3, #0]
 80804c4:	bd08      	pop	{r3, pc}
 80804c6:	bf00      	nop
 80804c8:	20000074 	.word	0x20000074
 80804cc:	20000070 	.word	0x20000070

080804d0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80804d0:	b508      	push	{r3, lr}
 80804d2:	4b02      	ldr	r3, [pc, #8]	; (80804dc <HAL_Pin_Map+0xc>)
 80804d4:	681b      	ldr	r3, [r3, #0]
 80804d6:	681b      	ldr	r3, [r3, #0]
 80804d8:	9301      	str	r3, [sp, #4]
 80804da:	bd08      	pop	{r3, pc}
 80804dc:	080401b0 	.word	0x080401b0

080804e0 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80804e0:	b508      	push	{r3, lr}
 80804e2:	4b02      	ldr	r3, [pc, #8]	; (80804ec <HAL_Validate_Pin_Function+0xc>)
 80804e4:	681b      	ldr	r3, [r3, #0]
 80804e6:	685b      	ldr	r3, [r3, #4]
 80804e8:	9301      	str	r3, [sp, #4]
 80804ea:	bd08      	pop	{r3, pc}
 80804ec:	080401b0 	.word	0x080401b0

080804f0 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80804f0:	b508      	push	{r3, lr}
 80804f2:	4b02      	ldr	r3, [pc, #8]	; (80804fc <HAL_Pin_Mode+0xc>)
 80804f4:	681b      	ldr	r3, [r3, #0]
 80804f6:	689b      	ldr	r3, [r3, #8]
 80804f8:	9301      	str	r3, [sp, #4]
 80804fa:	bd08      	pop	{r3, pc}
 80804fc:	080401b0 	.word	0x080401b0

08080500 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 8080500:	b508      	push	{r3, lr}
 8080502:	4b02      	ldr	r3, [pc, #8]	; (808050c <HAL_Get_Pin_Mode+0xc>)
 8080504:	681b      	ldr	r3, [r3, #0]
 8080506:	68db      	ldr	r3, [r3, #12]
 8080508:	9301      	str	r3, [sp, #4]
 808050a:	bd08      	pop	{r3, pc}
 808050c:	080401b0 	.word	0x080401b0

08080510 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 8080510:	b508      	push	{r3, lr}
 8080512:	4b02      	ldr	r3, [pc, #8]	; (808051c <HAL_GPIO_Write+0xc>)
 8080514:	681b      	ldr	r3, [r3, #0]
 8080516:	691b      	ldr	r3, [r3, #16]
 8080518:	9301      	str	r3, [sp, #4]
 808051a:	bd08      	pop	{r3, pc}
 808051c:	080401b0 	.word	0x080401b0

08080520 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 8080520:	b508      	push	{r3, lr}
 8080522:	4b02      	ldr	r3, [pc, #8]	; (808052c <HAL_GPIO_Read+0xc>)
 8080524:	681b      	ldr	r3, [r3, #0]
 8080526:	695b      	ldr	r3, [r3, #20]
 8080528:	9301      	str	r3, [sp, #4]
 808052a:	bd08      	pop	{r3, pc}
 808052c:	080401b0 	.word	0x080401b0

08080530 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
 8080530:	b508      	push	{r3, lr}
 8080532:	4b02      	ldr	r3, [pc, #8]	; (808053c <HAL_ADC_Read+0xc>)
 8080534:	681b      	ldr	r3, [r3, #0]
 8080536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080538:	9301      	str	r3, [sp, #4]
 808053a:	bd08      	pop	{r3, pc}
 808053c:	080401b0 	.word	0x080401b0

08080540 <HAL_Pulse_In>:

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
DYNALIB_FN(17, hal_gpio, HAL_Get_System_Interrupt_Handler, uint8_t(hal_irq_t, HAL_InterruptCallback*, void*))
DYNALIB_FN(18, hal_gpio, HAL_System_Interrupt_Trigger, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, HAL_Pulse_In, uint32_t(pin_t, uint16_t))
 8080540:	b508      	push	{r3, lr}
 8080542:	4b02      	ldr	r3, [pc, #8]	; (808054c <HAL_Pulse_In+0xc>)
 8080544:	681b      	ldr	r3, [r3, #0]
 8080546:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8080548:	9301      	str	r3, [sp, #4]
 808054a:	bd08      	pop	{r3, pc}
 808054c:	080401b0 	.word	0x080401b0

08080550 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 8080550:	b508      	push	{r3, lr}
 8080552:	4b02      	ldr	r3, [pc, #8]	; (808055c <HAL_SPI_Init+0xc>)
 8080554:	681b      	ldr	r3, [r3, #0]
 8080556:	69db      	ldr	r3, [r3, #28]
 8080558:	9301      	str	r3, [sp, #4]
 808055a:	bd08      	pop	{r3, pc}
 808055c:	080401b4 	.word	0x080401b4

08080560 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 8080560:	b508      	push	{r3, lr}
 8080562:	4b02      	ldr	r3, [pc, #8]	; (808056c <HAL_SPI_Is_Enabled+0xc>)
 8080564:	681b      	ldr	r3, [r3, #0]
 8080566:	6a1b      	ldr	r3, [r3, #32]
 8080568:	9301      	str	r3, [sp, #4]
 808056a:	bd08      	pop	{r3, pc}
 808056c:	080401b4 	.word	0x080401b4

08080570 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 8080570:	b508      	push	{r3, lr}
 8080572:	4b02      	ldr	r3, [pc, #8]	; (808057c <HAL_RNG_GetRandomNumber+0xc>)
 8080574:	681b      	ldr	r3, [r3, #0]
 8080576:	685b      	ldr	r3, [r3, #4]
 8080578:	9301      	str	r3, [sp, #4]
 808057a:	bd08      	pop	{r3, pc}
 808057c:	0804019c 	.word	0x0804019c

08080580 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 8080580:	b508      	push	{r3, lr}
 8080582:	4b02      	ldr	r3, [pc, #8]	; (808058c <HAL_Delay_Microseconds+0xc>)
 8080584:	681b      	ldr	r3, [r3, #0]
 8080586:	68db      	ldr	r3, [r3, #12]
 8080588:	9301      	str	r3, [sp, #4]
 808058a:	bd08      	pop	{r3, pc}
 808058c:	0804019c 	.word	0x0804019c

08080590 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 8080590:	b508      	push	{r3, lr}
 8080592:	4b02      	ldr	r3, [pc, #8]	; (808059c <HAL_Timer_Get_Milli_Seconds+0xc>)
 8080594:	681b      	ldr	r3, [r3, #0]
 8080596:	695b      	ldr	r3, [r3, #20]
 8080598:	9301      	str	r3, [sp, #4]
 808059a:	bd08      	pop	{r3, pc}
 808059c:	0804019c 	.word	0x0804019c

080805a0 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80805a0:	b508      	push	{r3, lr}
 80805a2:	4b02      	ldr	r3, [pc, #8]	; (80805ac <os_mutex_create+0xc>)
 80805a4:	681b      	ldr	r3, [r3, #0]
 80805a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80805a8:	9301      	str	r3, [sp, #4]
 80805aa:	bd08      	pop	{r3, pc}
 80805ac:	080401d0 	.word	0x080401d0

080805b0 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80805b0:	b508      	push	{r3, lr}
 80805b2:	4b02      	ldr	r3, [pc, #8]	; (80805bc <HAL_USART_Init+0xc>)
 80805b4:	681b      	ldr	r3, [r3, #0]
 80805b6:	699b      	ldr	r3, [r3, #24]
 80805b8:	9301      	str	r3, [sp, #4]
 80805ba:	bd08      	pop	{r3, pc}
 80805bc:	080401c4 	.word	0x080401c4

080805c0 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80805c0:	b508      	push	{r3, lr}
 80805c2:	4b02      	ldr	r3, [pc, #8]	; (80805cc <HAL_USART_Write_Data+0xc>)
 80805c4:	681b      	ldr	r3, [r3, #0]
 80805c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80805c8:	9301      	str	r3, [sp, #4]
 80805ca:	bd08      	pop	{r3, pc}
 80805cc:	080401c4 	.word	0x080401c4

080805d0 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80805d0:	b508      	push	{r3, lr}
 80805d2:	4b02      	ldr	r3, [pc, #8]	; (80805dc <HAL_USART_Available_Data+0xc>)
 80805d4:	681b      	ldr	r3, [r3, #0]
 80805d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80805d8:	9301      	str	r3, [sp, #4]
 80805da:	bd08      	pop	{r3, pc}
 80805dc:	080401c4 	.word	0x080401c4

080805e0 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80805e0:	b508      	push	{r3, lr}
 80805e2:	4b02      	ldr	r3, [pc, #8]	; (80805ec <HAL_USART_Read_Data+0xc>)
 80805e4:	681b      	ldr	r3, [r3, #0]
 80805e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80805e8:	9301      	str	r3, [sp, #4]
 80805ea:	bd08      	pop	{r3, pc}
 80805ec:	080401c4 	.word	0x080401c4

080805f0 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80805f0:	b508      	push	{r3, lr}
 80805f2:	4b02      	ldr	r3, [pc, #8]	; (80805fc <HAL_USART_Peek_Data+0xc>)
 80805f4:	681b      	ldr	r3, [r3, #0]
 80805f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80805f8:	9301      	str	r3, [sp, #4]
 80805fa:	bd08      	pop	{r3, pc}
 80805fc:	080401c4 	.word	0x080401c4

08080600 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 8080600:	b508      	push	{r3, lr}
 8080602:	4b02      	ldr	r3, [pc, #8]	; (808060c <HAL_USART_Flush_Data+0xc>)
 8080604:	681b      	ldr	r3, [r3, #0]
 8080606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8080608:	9301      	str	r3, [sp, #4]
 808060a:	bd08      	pop	{r3, pc}
 808060c:	080401c4 	.word	0x080401c4

08080610 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 8080610:	b508      	push	{r3, lr}
 8080612:	4b02      	ldr	r3, [pc, #8]	; (808061c <HAL_USART_Is_Enabled+0xc>)
 8080614:	681b      	ldr	r3, [r3, #0]
 8080616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8080618:	9301      	str	r3, [sp, #4]
 808061a:	bd08      	pop	{r3, pc}
 808061c:	080401c4 	.word	0x080401c4

08080620 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 8080620:	b508      	push	{r3, lr}
 8080622:	4b02      	ldr	r3, [pc, #8]	; (808062c <HAL_USART_Available_Data_For_Write+0xc>)
 8080624:	681b      	ldr	r3, [r3, #0]
 8080626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8080628:	9301      	str	r3, [sp, #4]
 808062a:	bd08      	pop	{r3, pc}
 808062c:	080401c4 	.word	0x080401c4

08080630 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 8080630:	b508      	push	{r3, lr}
 8080632:	4b02      	ldr	r3, [pc, #8]	; (808063c <HAL_I2C_Write_Data+0xc>)
 8080634:	681b      	ldr	r3, [r3, #0]
 8080636:	6a1b      	ldr	r3, [r3, #32]
 8080638:	9301      	str	r3, [sp, #4]
 808063a:	bd08      	pop	{r3, pc}
 808063c:	080401ac 	.word	0x080401ac

08080640 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 8080640:	b508      	push	{r3, lr}
 8080642:	4b02      	ldr	r3, [pc, #8]	; (808064c <HAL_I2C_Available_Data+0xc>)
 8080644:	681b      	ldr	r3, [r3, #0]
 8080646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8080648:	9301      	str	r3, [sp, #4]
 808064a:	bd08      	pop	{r3, pc}
 808064c:	080401ac 	.word	0x080401ac

08080650 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 8080650:	b508      	push	{r3, lr}
 8080652:	4b02      	ldr	r3, [pc, #8]	; (808065c <HAL_I2C_Read_Data+0xc>)
 8080654:	681b      	ldr	r3, [r3, #0]
 8080656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8080658:	9301      	str	r3, [sp, #4]
 808065a:	bd08      	pop	{r3, pc}
 808065c:	080401ac 	.word	0x080401ac

08080660 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 8080660:	b508      	push	{r3, lr}
 8080662:	4b02      	ldr	r3, [pc, #8]	; (808066c <HAL_I2C_Peek_Data+0xc>)
 8080664:	681b      	ldr	r3, [r3, #0]
 8080666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8080668:	9301      	str	r3, [sp, #4]
 808066a:	bd08      	pop	{r3, pc}
 808066c:	080401ac 	.word	0x080401ac

08080670 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 8080670:	b508      	push	{r3, lr}
 8080672:	4b02      	ldr	r3, [pc, #8]	; (808067c <HAL_I2C_Flush_Data+0xc>)
 8080674:	681b      	ldr	r3, [r3, #0]
 8080676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080678:	9301      	str	r3, [sp, #4]
 808067a:	bd08      	pop	{r3, pc}
 808067c:	080401ac 	.word	0x080401ac

08080680 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 8080680:	b508      	push	{r3, lr}
 8080682:	4b02      	ldr	r3, [pc, #8]	; (808068c <HAL_I2C_Is_Enabled+0xc>)
 8080684:	681b      	ldr	r3, [r3, #0]
 8080686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8080688:	9301      	str	r3, [sp, #4]
 808068a:	bd08      	pop	{r3, pc}
 808068c:	080401ac 	.word	0x080401ac

08080690 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 8080690:	b508      	push	{r3, lr}
 8080692:	4b02      	ldr	r3, [pc, #8]	; (808069c <HAL_I2C_Init+0xc>)
 8080694:	681b      	ldr	r3, [r3, #0]
 8080696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8080698:	9301      	str	r3, [sp, #4]
 808069a:	bd08      	pop	{r3, pc}
 808069c:	080401ac 	.word	0x080401ac

080806a0 <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80806a0:	b508      	push	{r3, lr}
 80806a2:	4b02      	ldr	r3, [pc, #8]	; (80806ac <inet_gethostbyname+0xc>)
 80806a4:	681b      	ldr	r3, [r3, #0]
 80806a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80806a8:	9301      	str	r3, [sp, #4]
 80806aa:	bd08      	pop	{r3, pc}
 80806ac:	08060020 	.word	0x08060020

080806b0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80806b0:	b508      	push	{r3, lr}
 80806b2:	4b02      	ldr	r3, [pc, #8]	; (80806bc <HAL_USB_USART_Init+0xc>)
 80806b4:	681b      	ldr	r3, [r3, #0]
 80806b6:	681b      	ldr	r3, [r3, #0]
 80806b8:	9301      	str	r3, [sp, #4]
 80806ba:	bd08      	pop	{r3, pc}
 80806bc:	0806001c 	.word	0x0806001c

080806c0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80806c0:	b508      	push	{r3, lr}
 80806c2:	4b02      	ldr	r3, [pc, #8]	; (80806cc <HAL_USB_USART_Available_Data+0xc>)
 80806c4:	681b      	ldr	r3, [r3, #0]
 80806c6:	691b      	ldr	r3, [r3, #16]
 80806c8:	9301      	str	r3, [sp, #4]
 80806ca:	bd08      	pop	{r3, pc}
 80806cc:	0806001c 	.word	0x0806001c

080806d0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80806d0:	b508      	push	{r3, lr}
 80806d2:	4b02      	ldr	r3, [pc, #8]	; (80806dc <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80806d4:	681b      	ldr	r3, [r3, #0]
 80806d6:	695b      	ldr	r3, [r3, #20]
 80806d8:	9301      	str	r3, [sp, #4]
 80806da:	bd08      	pop	{r3, pc}
 80806dc:	0806001c 	.word	0x0806001c

080806e0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80806e0:	b508      	push	{r3, lr}
 80806e2:	4b02      	ldr	r3, [pc, #8]	; (80806ec <HAL_USB_USART_Receive_Data+0xc>)
 80806e4:	681b      	ldr	r3, [r3, #0]
 80806e6:	699b      	ldr	r3, [r3, #24]
 80806e8:	9301      	str	r3, [sp, #4]
 80806ea:	bd08      	pop	{r3, pc}
 80806ec:	0806001c 	.word	0x0806001c

080806f0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80806f0:	b508      	push	{r3, lr}
 80806f2:	4b02      	ldr	r3, [pc, #8]	; (80806fc <HAL_USB_USART_Send_Data+0xc>)
 80806f4:	681b      	ldr	r3, [r3, #0]
 80806f6:	69db      	ldr	r3, [r3, #28]
 80806f8:	9301      	str	r3, [sp, #4]
 80806fa:	bd08      	pop	{r3, pc}
 80806fc:	0806001c 	.word	0x0806001c

08080700 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 8080700:	b508      	push	{r3, lr}
 8080702:	4b02      	ldr	r3, [pc, #8]	; (808070c <HAL_USB_USART_Flush_Data+0xc>)
 8080704:	681b      	ldr	r3, [r3, #0]
 8080706:	6a1b      	ldr	r3, [r3, #32]
 8080708:	9301      	str	r3, [sp, #4]
 808070a:	bd08      	pop	{r3, pc}
 808070c:	0806001c 	.word	0x0806001c

08080710 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 8080710:	b508      	push	{r3, lr}
 8080712:	4b02      	ldr	r3, [pc, #8]	; (808071c <set_system_mode+0xc>)
 8080714:	681b      	ldr	r3, [r3, #0]
 8080716:	685b      	ldr	r3, [r3, #4]
 8080718:	9301      	str	r3, [sp, #4]
 808071a:	bd08      	pop	{r3, pc}
 808071c:	080401a4 	.word	0x080401a4

08080720 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 8080720:	b508      	push	{r3, lr}
 8080722:	4b02      	ldr	r3, [pc, #8]	; (808072c <system_delay_ms+0xc>)
 8080724:	681b      	ldr	r3, [r3, #0]
 8080726:	695b      	ldr	r3, [r3, #20]
 8080728:	9301      	str	r3, [sp, #4]
 808072a:	bd08      	pop	{r3, pc}
 808072c:	080401a4 	.word	0x080401a4

08080730 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 8080730:	b508      	push	{r3, lr}
 8080732:	4b02      	ldr	r3, [pc, #8]	; (808073c <application_thread_current+0xc>)
 8080734:	681b      	ldr	r3, [r3, #0]
 8080736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8080738:	9301      	str	r3, [sp, #4]
 808073a:	bd08      	pop	{r3, pc}
 808073c:	080401a4 	.word	0x080401a4

08080740 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 8080740:	b508      	push	{r3, lr}
 8080742:	4b02      	ldr	r3, [pc, #8]	; (808074c <application_thread_invoke+0xc>)
 8080744:	681b      	ldr	r3, [r3, #0]
 8080746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8080748:	9301      	str	r3, [sp, #4]
 808074a:	bd08      	pop	{r3, pc}
 808074c:	080401a4 	.word	0x080401a4

08080750 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 8080750:	b508      	push	{r3, lr}
 8080752:	4b03      	ldr	r3, [pc, #12]	; (8080760 <system_ctrl_set_app_request_handler+0x10>)
 8080754:	681b      	ldr	r3, [r3, #0]
 8080756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 808075a:	9301      	str	r3, [sp, #4]
 808075c:	bd08      	pop	{r3, pc}
 808075e:	0000      	.short	0x0000
 8080760:	080401a4 	.word	0x080401a4

08080764 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 8080764:	b508      	push	{r3, lr}
 8080766:	4b03      	ldr	r3, [pc, #12]	; (8080774 <system_ctrl_set_result+0x10>)
 8080768:	681b      	ldr	r3, [r3, #0]
 808076a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 808076e:	9301      	str	r3, [sp, #4]
 8080770:	bd08      	pop	{r3, pc}
 8080772:	0000      	.short	0x0000
 8080774:	080401a4 	.word	0x080401a4

08080778 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 8080778:	b508      	push	{r3, lr}
 808077a:	4b02      	ldr	r3, [pc, #8]	; (8080784 <network_connect+0xc>)
 808077c:	681b      	ldr	r3, [r3, #0]
 808077e:	685b      	ldr	r3, [r3, #4]
 8080780:	9301      	str	r3, [sp, #4]
 8080782:	bd08      	pop	{r3, pc}
 8080784:	080401c8 	.word	0x080401c8

08080788 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 8080788:	b508      	push	{r3, lr}
 808078a:	4b02      	ldr	r3, [pc, #8]	; (8080794 <network_connecting+0xc>)
 808078c:	681b      	ldr	r3, [r3, #0]
 808078e:	689b      	ldr	r3, [r3, #8]
 8080790:	9301      	str	r3, [sp, #4]
 8080792:	bd08      	pop	{r3, pc}
 8080794:	080401c8 	.word	0x080401c8

08080798 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 8080798:	b508      	push	{r3, lr}
 808079a:	4b02      	ldr	r3, [pc, #8]	; (80807a4 <network_disconnect+0xc>)
 808079c:	681b      	ldr	r3, [r3, #0]
 808079e:	68db      	ldr	r3, [r3, #12]
 80807a0:	9301      	str	r3, [sp, #4]
 80807a2:	bd08      	pop	{r3, pc}
 80807a4:	080401c8 	.word	0x080401c8

080807a8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80807a8:	b508      	push	{r3, lr}
 80807aa:	4b02      	ldr	r3, [pc, #8]	; (80807b4 <network_ready+0xc>)
 80807ac:	681b      	ldr	r3, [r3, #0]
 80807ae:	691b      	ldr	r3, [r3, #16]
 80807b0:	9301      	str	r3, [sp, #4]
 80807b2:	bd08      	pop	{r3, pc}
 80807b4:	080401c8 	.word	0x080401c8

080807b8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80807b8:	b508      	push	{r3, lr}
 80807ba:	4b02      	ldr	r3, [pc, #8]	; (80807c4 <network_on+0xc>)
 80807bc:	681b      	ldr	r3, [r3, #0]
 80807be:	695b      	ldr	r3, [r3, #20]
 80807c0:	9301      	str	r3, [sp, #4]
 80807c2:	bd08      	pop	{r3, pc}
 80807c4:	080401c8 	.word	0x080401c8

080807c8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80807c8:	b508      	push	{r3, lr}
 80807ca:	4b02      	ldr	r3, [pc, #8]	; (80807d4 <network_off+0xc>)
 80807cc:	681b      	ldr	r3, [r3, #0]
 80807ce:	699b      	ldr	r3, [r3, #24]
 80807d0:	9301      	str	r3, [sp, #4]
 80807d2:	bd08      	pop	{r3, pc}
 80807d4:	080401c8 	.word	0x080401c8

080807d8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80807d8:	b508      	push	{r3, lr}
 80807da:	4b02      	ldr	r3, [pc, #8]	; (80807e4 <network_listen+0xc>)
 80807dc:	681b      	ldr	r3, [r3, #0]
 80807de:	69db      	ldr	r3, [r3, #28]
 80807e0:	9301      	str	r3, [sp, #4]
 80807e2:	bd08      	pop	{r3, pc}
 80807e4:	080401c8 	.word	0x080401c8

080807e8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80807e8:	b508      	push	{r3, lr}
 80807ea:	4b02      	ldr	r3, [pc, #8]	; (80807f4 <network_listening+0xc>)
 80807ec:	681b      	ldr	r3, [r3, #0]
 80807ee:	6a1b      	ldr	r3, [r3, #32]
 80807f0:	9301      	str	r3, [sp, #4]
 80807f2:	bd08      	pop	{r3, pc}
 80807f4:	080401c8 	.word	0x080401c8

080807f8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80807f8:	b508      	push	{r3, lr}
 80807fa:	4b02      	ldr	r3, [pc, #8]	; (8080804 <network_set_listen_timeout+0xc>)
 80807fc:	681b      	ldr	r3, [r3, #0]
 80807fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080800:	9301      	str	r3, [sp, #4]
 8080802:	bd08      	pop	{r3, pc}
 8080804:	080401c8 	.word	0x080401c8

08080808 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 8080808:	b508      	push	{r3, lr}
 808080a:	4b02      	ldr	r3, [pc, #8]	; (8080814 <network_get_listen_timeout+0xc>)
 808080c:	681b      	ldr	r3, [r3, #0]
 808080e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8080810:	9301      	str	r3, [sp, #4]
 8080812:	bd08      	pop	{r3, pc}
 8080814:	080401c8 	.word	0x080401c8

08080818 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 8080818:	b508      	push	{r3, lr}
 808081a:	4b02      	ldr	r3, [pc, #8]	; (8080824 <spark_cloud_flag_connected+0xc>)
 808081c:	681b      	ldr	r3, [r3, #0]
 808081e:	695b      	ldr	r3, [r3, #20]
 8080820:	9301      	str	r3, [sp, #4]
 8080822:	bd08      	pop	{r3, pc}
 8080824:	080401cc 	.word	0x080401cc

08080828 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 8080828:	b508      	push	{r3, lr}
 808082a:	4b02      	ldr	r3, [pc, #8]	; (8080834 <spark_send_event+0xc>)
 808082c:	681b      	ldr	r3, [r3, #0]
 808082e:	6a1b      	ldr	r3, [r3, #32]
 8080830:	9301      	str	r3, [sp, #4]
 8080832:	bd08      	pop	{r3, pc}
 8080834:	080401cc 	.word	0x080401cc

08080838 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 8080838:	b508      	push	{r3, lr}
 808083a:	4b02      	ldr	r3, [pc, #8]	; (8080844 <spark_set_random_seed_from_cloud_handler+0xc>)
 808083c:	681b      	ldr	r3, [r3, #0]
 808083e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8080840:	9301      	str	r3, [sp, #4]
 8080842:	bd08      	pop	{r3, pc}
 8080844:	080401cc 	.word	0x080401cc

08080848 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 8080848:	b508      	push	{r3, lr}
 808084a:	4b02      	ldr	r3, [pc, #8]	; (8080854 <malloc+0xc>)
 808084c:	681b      	ldr	r3, [r3, #0]
 808084e:	681b      	ldr	r3, [r3, #0]
 8080850:	9301      	str	r3, [sp, #4]
 8080852:	bd08      	pop	{r3, pc}
 8080854:	080401a0 	.word	0x080401a0

08080858 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 8080858:	b508      	push	{r3, lr}
 808085a:	4b02      	ldr	r3, [pc, #8]	; (8080864 <free+0xc>)
 808085c:	681b      	ldr	r3, [r3, #0]
 808085e:	685b      	ldr	r3, [r3, #4]
 8080860:	9301      	str	r3, [sp, #4]
 8080862:	bd08      	pop	{r3, pc}
 8080864:	080401a0 	.word	0x080401a0

08080868 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 8080868:	b508      	push	{r3, lr}
 808086a:	4b02      	ldr	r3, [pc, #8]	; (8080874 <realloc+0xc>)
 808086c:	681b      	ldr	r3, [r3, #0]
 808086e:	689b      	ldr	r3, [r3, #8]
 8080870:	9301      	str	r3, [sp, #4]
 8080872:	bd08      	pop	{r3, pc}
 8080874:	080401a0 	.word	0x080401a0

08080878 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 8080878:	b508      	push	{r3, lr}
 808087a:	4b02      	ldr	r3, [pc, #8]	; (8080884 <abort+0xc>)
 808087c:	681b      	ldr	r3, [r3, #0]
 808087e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8080880:	9301      	str	r3, [sp, #4]
 8080882:	bd08      	pop	{r3, pc}
 8080884:	080401a0 	.word	0x080401a0

08080888 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 8080888:	b508      	push	{r3, lr}
 808088a:	4b02      	ldr	r3, [pc, #8]	; (8080894 <_malloc_r+0xc>)
 808088c:	681b      	ldr	r3, [r3, #0]
 808088e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8080890:	9301      	str	r3, [sp, #4]
 8080892:	bd08      	pop	{r3, pc}
 8080894:	080401a0 	.word	0x080401a0

08080898 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 8080898:	4770      	bx	lr

0808089a <_ZN8SPIClassD0Ev>:
 808089a:	b510      	push	{r4, lr}
 808089c:	4604      	mov	r4, r0
 808089e:	2110      	movs	r1, #16
 80808a0:	f001 fa7d 	bl	8081d9e <_ZdlPvj>
 80808a4:	4620      	mov	r0, r4
 80808a6:	bd10      	pop	{r4, pc}

080808a8 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80808a8:	b570      	push	{r4, r5, r6, lr}
 80808aa:	4604      	mov	r4, r0
 80808ac:	460e      	mov	r6, r1
 80808ae:	4b07      	ldr	r3, [pc, #28]	; (80808cc <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80808b0:	2500      	movs	r5, #0
 80808b2:	6003      	str	r3, [r0, #0]
 80808b4:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80808b8:	f7ff fe72 	bl	80805a0 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80808bc:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80808be:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80808c0:	f7ff fe46 	bl	8080550 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80808c4:	60a5      	str	r5, [r4, #8]
}
 80808c6:	4620      	mov	r0, r4
 80808c8:	bd70      	pop	{r4, r5, r6, pc}
 80808ca:	bf00      	nop
 80808cc:	080831ec 	.word	0x080831ec

080808d0 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80808d0:	7900      	ldrb	r0, [r0, #4]
 80808d2:	f7ff be45 	b.w	8080560 <HAL_SPI_Is_Enabled>
	...

080808d8 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80808d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80808dc:	4b03      	ldr	r3, [pc, #12]	; (80808ec <_GLOBAL__sub_I_System+0x14>)
 80808de:	2000      	movs	r0, #0
 80808e0:	7018      	strb	r0, [r3, #0]
 80808e2:	8058      	strh	r0, [r3, #2]
 80808e4:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80808e6:	f7ff bf13 	b.w	8080710 <set_system_mode>
 80808ea:	bf00      	nop
 80808ec:	20000084 	.word	0x20000084

080808f0 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 80808f0:	b510      	push	{r4, lr}
 80808f2:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 80808f4:	f002 fbf5 	bl	80830e2 <strlen>
 80808f8:	3801      	subs	r0, #1
 80808fa:	1823      	adds	r3, r4, r0
 80808fc:	4620      	mov	r0, r4
	while(i<j){
 80808fe:	4298      	cmp	r0, r3
 8080900:	d206      	bcs.n	8080910 <_Z11str_reversePc+0x20>
		c = *i;
 8080902:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 8080904:	7819      	ldrb	r1, [r3, #0]
 8080906:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 808090a:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
 808090e:	e7f6      	b.n	80808fe <_Z11str_reversePc+0xe>
 8080910:	bd10      	pop	{r4, pc}

08080912 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 8080912:	b570      	push	{r4, r5, r6, lr}
 8080914:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 8080916:	1e91      	subs	r1, r2, #2
 8080918:	2922      	cmp	r1, #34	; 0x22
 808091a:	d820      	bhi.n	808095e <ultoa+0x4c>
 808091c:	4625      	mov	r5, r4
 808091e:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 8080920:	b910      	cbnz	r0, 8080928 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 8080922:	4423      	add	r3, r4
            *ptr++ = '0';
 8080924:	2230      	movs	r2, #48	; 0x30
 8080926:	e00e      	b.n	8080946 <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 8080928:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 808092c:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 8080930:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 8080932:	2809      	cmp	r0, #9
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
            result.rem = a%radix;
            *ptr = result.rem;
 8080934:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
                *ptr += '0';
 8080938:	bf94      	ite	ls
 808093a:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 808093c:	3157      	addhi	r1, #87	; 0x57
 808093e:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
 8080942:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 8080944:	e7eb      	b.n	808091e <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 8080946:	4299      	cmp	r1, r3
 8080948:	d202      	bcs.n	8080950 <ultoa+0x3e>
            *ptr++ = '0';
 808094a:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 808094e:	e7fa      	b.n	8080946 <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
 8080950:	2300      	movs	r3, #0
	str_reverse(buffer);
 8080952:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
 8080954:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
 8080956:	f7ff ffcb 	bl	80808f0 <_Z11str_reversePc>
	return buffer;
 808095a:	4620      	mov	r0, r4
 808095c:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
 808095e:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
 8080960:	bd70      	pop	{r4, r5, r6, pc}

08080962 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 8080962:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 8080964:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 8080966:	460c      	mov	r4, r1
 8080968:	4615      	mov	r5, r2
	if(a<0){
 808096a:	da0b      	bge.n	8080984 <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 808096c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 8080970:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 8080974:	bf14      	ite	ne
 8080976:	4258      	negne	r0, r3
 8080978:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 808097a:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 808097c:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
 808097e:	462a      	mov	r2, r5
 8080980:	4419      	add	r1, r3
 8080982:	e000      	b.n	8080986 <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
 8080984:	2301      	movs	r3, #1
 8080986:	f7ff ffc4 	bl	8080912 <ultoa>
	}
	return buffer;
}
 808098a:	4620      	mov	r0, r4
 808098c:	bd38      	pop	{r3, r4, r5, pc}
	...

08080990 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
 8080990:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8080994:	4680      	mov	r8, r0
 8080996:	460d      	mov	r5, r1
 8080998:	4617      	mov	r7, r2
 808099a:	461e      	mov	r6, r3
    bool negative = val<0;
    if (negative) {
 808099c:	2200      	movs	r2, #0
 808099e:	2300      	movs	r3, #0
 80809a0:	4640      	mov	r0, r8
 80809a2:	4629      	mov	r1, r5
 80809a4:	f001 ff72 	bl	808288c <__aeabi_dcmplt>
 80809a8:	b120      	cbz	r0, 80809b4 <_Z4dtoadhPc+0x24>
        val = -val;
        *sout++ = '-';
 80809aa:	232d      	movs	r3, #45	; 0x2d
 80809ac:	7033      	strb	r3, [r6, #0]
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
    bool negative = val<0;
    if (negative) {
        val = -val;
 80809ae:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
        *sout++ = '-';
 80809b2:	3601      	adds	r6, #1
 80809b4:	2300      	movs	r3, #0
    }
    long scale = 1;
 80809b6:	2401      	movs	r4, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
 80809b8:	220a      	movs	r2, #10
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
 80809ba:	b2d9      	uxtb	r1, r3
 80809bc:	428f      	cmp	r7, r1
 80809be:	d902      	bls.n	80809c6 <_Z4dtoadhPc+0x36>
        scale *= 10;
 80809c0:	4354      	muls	r4, r2
 80809c2:	3301      	adds	r3, #1
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
 80809c4:	e7f9      	b.n	80809ba <_Z4dtoadhPc+0x2a>
        scale *= 10;
    val *= scale;   // capture all the significant digits
 80809c6:	4620      	mov	r0, r4
 80809c8:	f001 fc88 	bl	80822dc <__aeabi_i2d>
 80809cc:	4642      	mov	r2, r8
 80809ce:	462b      	mov	r3, r5
 80809d0:	f001 fcea 	bl	80823a8 <__aeabi_dmul>
 80809d4:	4682      	mov	sl, r0
 80809d6:	468b      	mov	fp, r1
    uint64_t fixed = uint64_t(val);
 80809d8:	f002 f97a 	bl	8082cd0 <__aeabi_d2ulz>
 80809dc:	4680      	mov	r8, r0
 80809de:	4689      	mov	r9, r1
    if ((val-fixed)>=0.5)    // round last digit
 80809e0:	f001 fcac 	bl	808233c <__aeabi_ul2d>
 80809e4:	4602      	mov	r2, r0
 80809e6:	460b      	mov	r3, r1
 80809e8:	4650      	mov	r0, sl
 80809ea:	4659      	mov	r1, fp
 80809ec:	f001 fb28 	bl	8082040 <__aeabi_dsub>
 80809f0:	2200      	movs	r2, #0
 80809f2:	4b17      	ldr	r3, [pc, #92]	; (8080a50 <_Z4dtoadhPc+0xc0>)
 80809f4:	f001 ff5e 	bl	80828b4 <__aeabi_dcmpge>
 80809f8:	b118      	cbz	r0, 8080a02 <_Z4dtoadhPc+0x72>
        fixed++;
 80809fa:	f118 0801 	adds.w	r8, r8, #1
 80809fe:	f149 0900 	adc.w	r9, r9, #0

    unsigned long first = (unsigned long)(fixed / scale);
 8080a02:	17e5      	asrs	r5, r4, #31
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
 8080a04:	4622      	mov	r2, r4
 8080a06:	462b      	mov	r3, r5
 8080a08:	4640      	mov	r0, r8
 8080a0a:	4649      	mov	r1, r9
 8080a0c:	f002 f948 	bl	8082ca0 <__aeabi_uldivmod>
 8080a10:	2301      	movs	r3, #1
 8080a12:	220a      	movs	r2, #10
 8080a14:	4631      	mov	r1, r6
 8080a16:	f7ff ff7c 	bl	8080912 <ultoa>
    if (prec) {
 8080a1a:	b1af      	cbz	r7, 8080a48 <_Z4dtoadhPc+0xb8>
        sout += strlen(sout);
 8080a1c:	4630      	mov	r0, r6
 8080a1e:	f002 fb60 	bl	80830e2 <strlen>
        *sout++ = '.';
 8080a22:	232e      	movs	r3, #46	; 0x2e
 8080a24:	5433      	strb	r3, [r6, r0]
        ultoa(second, sout, 10, prec);
 8080a26:	3001      	adds	r0, #1
 8080a28:	4406      	add	r6, r0
 8080a2a:	4622      	mov	r2, r4
 8080a2c:	462b      	mov	r3, r5
 8080a2e:	4640      	mov	r0, r8
 8080a30:	4649      	mov	r1, r9
 8080a32:	f002 f935 	bl	8082ca0 <__aeabi_uldivmod>
 8080a36:	463b      	mov	r3, r7
 8080a38:	4610      	mov	r0, r2
 8080a3a:	4631      	mov	r1, r6
 8080a3c:	220a      	movs	r2, #10
    }
}
 8080a3e:	b001      	add	sp, #4
 8080a40:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ultoa(first, sout, 10, 1);
    if (prec) {
        sout += strlen(sout);
        *sout++ = '.';
        ultoa(second, sout, 10, prec);
 8080a44:	f7ff bf65 	b.w	8080912 <ultoa>
    }
}
 8080a48:	b001      	add	sp, #4
 8080a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8080a4e:	bf00      	nop
 8080a50:	3fe00000 	.word	0x3fe00000

08080a54 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 8080a54:	b510      	push	{r4, lr}
 8080a56:	4604      	mov	r4, r0
{
	free(buffer);
 8080a58:	6800      	ldr	r0, [r0, #0]
 8080a5a:	f7ff fefd 	bl	8080858 <free>
}
 8080a5e:	4620      	mov	r0, r4
 8080a60:	bd10      	pop	{r4, pc}

08080a62 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 8080a62:	b510      	push	{r4, lr}
 8080a64:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 8080a66:	6800      	ldr	r0, [r0, #0]
 8080a68:	b108      	cbz	r0, 8080a6e <_ZN6String10invalidateEv+0xc>
 8080a6a:	f7ff fef5 	bl	8080858 <free>
	buffer = NULL;
 8080a6e:	2300      	movs	r3, #0
 8080a70:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 8080a72:	60a3      	str	r3, [r4, #8]
 8080a74:	6063      	str	r3, [r4, #4]
 8080a76:	bd10      	pop	{r4, pc}

08080a78 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 8080a78:	b538      	push	{r3, r4, r5, lr}
 8080a7a:	4604      	mov	r4, r0
 8080a7c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 8080a7e:	6800      	ldr	r0, [r0, #0]
 8080a80:	3101      	adds	r1, #1
 8080a82:	f7ff fef1 	bl	8080868 <realloc>
	if (newbuffer) {
 8080a86:	b110      	cbz	r0, 8080a8e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 8080a88:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 8080a8c:	2001      	movs	r0, #1
	}
	return 0;
}
 8080a8e:	bd38      	pop	{r3, r4, r5, pc}

08080a90 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8080a90:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 8080a92:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8080a94:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 8080a96:	b113      	cbz	r3, 8080a9e <_ZN6String7reserveEj+0xe>
 8080a98:	6843      	ldr	r3, [r0, #4]
 8080a9a:	428b      	cmp	r3, r1
 8080a9c:	d207      	bcs.n	8080aae <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 8080a9e:	4620      	mov	r0, r4
 8080aa0:	f7ff ffea 	bl	8080a78 <_ZN6String12changeBufferEj>
 8080aa4:	b120      	cbz	r0, 8080ab0 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 8080aa6:	68a3      	ldr	r3, [r4, #8]
 8080aa8:	b90b      	cbnz	r3, 8080aae <_ZN6String7reserveEj+0x1e>
 8080aaa:	6822      	ldr	r2, [r4, #0]
 8080aac:	7013      	strb	r3, [r2, #0]
 8080aae:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 8080ab0:	bd10      	pop	{r4, pc}

08080ab2 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8080ab2:	b570      	push	{r4, r5, r6, lr}
 8080ab4:	460e      	mov	r6, r1
	if (!reserve(length)) {
 8080ab6:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8080ab8:	4604      	mov	r4, r0
 8080aba:	4615      	mov	r5, r2
	if (!reserve(length)) {
 8080abc:	f7ff ffe8 	bl	8080a90 <_ZN6String7reserveEj>
 8080ac0:	b918      	cbnz	r0, 8080aca <_ZN6String4copyEPKcj+0x18>
		invalidate();
 8080ac2:	4620      	mov	r0, r4
 8080ac4:	f7ff ffcd 	bl	8080a62 <_ZN6String10invalidateEv>
		return *this;
 8080ac8:	e009      	b.n	8080ade <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 8080aca:	462a      	mov	r2, r5
 8080acc:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 8080ace:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 8080ad0:	6820      	ldr	r0, [r4, #0]
 8080ad2:	f002 faa7 	bl	8083024 <memcpy>
	buffer[len] = 0;
 8080ad6:	6822      	ldr	r2, [r4, #0]
 8080ad8:	68a3      	ldr	r3, [r4, #8]
 8080ada:	2100      	movs	r1, #0
 8080adc:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 8080ade:	4620      	mov	r0, r4
 8080ae0:	bd70      	pop	{r4, r5, r6, pc}

08080ae2 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8080ae2:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8080ae4:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8080ae6:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8080ae8:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8080aea:	6043      	str	r3, [r0, #4]
	len = 0;
 8080aec:	6083      	str	r3, [r0, #8]
	flags = 0;
 8080aee:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 8080af0:	460d      	mov	r5, r1
 8080af2:	b139      	cbz	r1, 8080b04 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 8080af4:	4608      	mov	r0, r1
 8080af6:	f002 faf4 	bl	80830e2 <strlen>
 8080afa:	4629      	mov	r1, r5
 8080afc:	4602      	mov	r2, r0
 8080afe:	4620      	mov	r0, r4
 8080b00:	f7ff ffd7 	bl	8080ab2 <_ZN6String4copyEPKcj>
}
 8080b04:	4620      	mov	r0, r4
 8080b06:	bd38      	pop	{r3, r4, r5, pc}

08080b08 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 8080b08:	b538      	push	{r3, r4, r5, lr}
 8080b0a:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 8080b0c:	460c      	mov	r4, r1
 8080b0e:	b141      	cbz	r1, 8080b22 <_ZN6StringaSEPKc+0x1a>
 8080b10:	4608      	mov	r0, r1
 8080b12:	f002 fae6 	bl	80830e2 <strlen>
 8080b16:	4621      	mov	r1, r4
 8080b18:	4602      	mov	r2, r0
 8080b1a:	4628      	mov	r0, r5
 8080b1c:	f7ff ffc9 	bl	8080ab2 <_ZN6String4copyEPKcj>
 8080b20:	e001      	b.n	8080b26 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 8080b22:	f7ff ff9e 	bl	8080a62 <_ZN6String10invalidateEv>

	return *this;
}
 8080b26:	4628      	mov	r0, r5
 8080b28:	bd38      	pop	{r3, r4, r5, pc}

08080b2a <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 8080b2a:	b510      	push	{r4, lr}
 8080b2c:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8080b2e:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 8080b30:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8080b32:	6023      	str	r3, [r4, #0]
	capacity = 0;
 8080b34:	6063      	str	r3, [r4, #4]
	len = 0;
 8080b36:	60a3      	str	r3, [r4, #8]
	flags = 0;
 8080b38:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 8080b3a:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
 8080b3c:	a901      	add	r1, sp, #4
 8080b3e:	f7ff ff10 	bl	8080962 <itoa>
	*this = buf;
 8080b42:	a901      	add	r1, sp, #4
 8080b44:	4620      	mov	r0, r4
 8080b46:	f7ff ffdf 	bl	8080b08 <_ZN6StringaSEPKc>
}
 8080b4a:	4620      	mov	r0, r4
 8080b4c:	b00a      	add	sp, #40	; 0x28
 8080b4e:	bd10      	pop	{r4, pc}

08080b50 <_ZN6StringC1Emh>:
	char buf[34];
	ltoa(value, buf, base);
	*this = buf;
}

String::String(unsigned long value, unsigned char base)
 8080b50:	b510      	push	{r4, lr}
 8080b52:	4604      	mov	r4, r0
 8080b54:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8080b56:	2300      	movs	r3, #0
 8080b58:	6023      	str	r3, [r4, #0]
	capacity = 0;
 8080b5a:	6063      	str	r3, [r4, #4]
	len = 0;
 8080b5c:	60a3      	str	r3, [r4, #8]
	flags = 0;
 8080b5e:	7323      	strb	r3, [r4, #12]
	char buf[34];
	ltoa(value, buf, base);
	*this = buf;
}

String::String(unsigned long value, unsigned char base)
 8080b60:	4608      	mov	r0, r1
{
	init();
	char buf[33];
	ultoa(value, buf, base);
 8080b62:	2301      	movs	r3, #1
 8080b64:	a901      	add	r1, sp, #4
 8080b66:	f7ff fed4 	bl	8080912 <ultoa>
	*this = buf;
 8080b6a:	a901      	add	r1, sp, #4
 8080b6c:	4620      	mov	r0, r4
 8080b6e:	f7ff ffcb 	bl	8080b08 <_ZN6StringaSEPKc>
}
 8080b72:	4620      	mov	r0, r4
 8080b74:	b00a      	add	sp, #40	; 0x28
 8080b76:	bd10      	pop	{r4, pc}

08080b78 <_ZN6StringC1Efi>:

String::String(float value, int decimalPlaces)
 8080b78:	b530      	push	{r4, r5, lr}
 8080b7a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8080b7c:	2300      	movs	r3, #0
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
 8080b7e:	b08b      	sub	sp, #44	; 0x2c
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8080b80:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8080b82:	6043      	str	r3, [r0, #4]
	len = 0;
 8080b84:	6083      	str	r3, [r0, #8]
	flags = 0;
 8080b86:	7303      	strb	r3, [r0, #12]

String::String(float value, int decimalPlaces)
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
 8080b88:	b2d5      	uxtb	r5, r2
 8080b8a:	4608      	mov	r0, r1
 8080b8c:	f001 fbb8 	bl	8082300 <__aeabi_f2d>
 8080b90:	ab01      	add	r3, sp, #4
 8080b92:	462a      	mov	r2, r5
 8080b94:	f7ff fefc 	bl	8080990 <_Z4dtoadhPc>
        *this = buf;
 8080b98:	a901      	add	r1, sp, #4
 8080b9a:	4620      	mov	r0, r4
 8080b9c:	f7ff ffb4 	bl	8080b08 <_ZN6StringaSEPKc>
}
 8080ba0:	4620      	mov	r0, r4
 8080ba2:	b00b      	add	sp, #44	; 0x2c
 8080ba4:	bd30      	pop	{r4, r5, pc}

08080ba6 <_ZN6StringC1Edi>:

String::String(double value, int decimalPlaces)
 8080ba6:	b510      	push	{r4, lr}
 8080ba8:	4604      	mov	r4, r0
 8080baa:	b08a      	sub	sp, #40	; 0x28
 8080bac:	4619      	mov	r1, r3
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8080bae:	2300      	movs	r3, #0
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}

String::String(double value, int decimalPlaces)
 8080bb0:	4610      	mov	r0, r2
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8080bb2:	6023      	str	r3, [r4, #0]
	capacity = 0;
 8080bb4:	6063      	str	r3, [r4, #4]
	len = 0;
 8080bb6:	60a3      	str	r3, [r4, #8]
	flags = 0;
 8080bb8:	7323      	strb	r3, [r4, #12]

String::String(double value, int decimalPlaces)
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
 8080bba:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8080bbe:	ab01      	add	r3, sp, #4
 8080bc0:	f7ff fee6 	bl	8080990 <_Z4dtoadhPc>
        *this = buf;
 8080bc4:	a901      	add	r1, sp, #4
 8080bc6:	4620      	mov	r0, r4
 8080bc8:	f7ff ff9e 	bl	8080b08 <_ZN6StringaSEPKc>
}
 8080bcc:	4620      	mov	r0, r4
 8080bce:	b00a      	add	sp, #40	; 0x28
 8080bd0:	bd10      	pop	{r4, pc}

08080bd2 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 8080bd2:	b570      	push	{r4, r5, r6, lr}
 8080bd4:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 8080bd6:	460e      	mov	r6, r1
 8080bd8:	b909      	cbnz	r1, 8080bde <_ZN6String6concatEPKcj+0xc>
 8080bda:	2000      	movs	r0, #0
 8080bdc:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 8080bde:	b16a      	cbz	r2, 8080bfc <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
 8080be0:	6883      	ldr	r3, [r0, #8]
 8080be2:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
 8080be4:	4629      	mov	r1, r5
 8080be6:	f7ff ff53 	bl	8080a90 <_ZN6String7reserveEj>
 8080bea:	2800      	cmp	r0, #0
 8080bec:	d0f5      	beq.n	8080bda <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 8080bee:	6820      	ldr	r0, [r4, #0]
 8080bf0:	68a3      	ldr	r3, [r4, #8]
 8080bf2:	4631      	mov	r1, r6
 8080bf4:	4418      	add	r0, r3
 8080bf6:	f002 fa51 	bl	808309c <strcpy>
	len = newlen;
 8080bfa:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
 8080bfc:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 8080bfe:	bd70      	pop	{r4, r5, r6, pc}

08080c00 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 8080c00:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 8080c02:	688a      	ldr	r2, [r1, #8]
 8080c04:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 8080c06:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 8080c08:	f7ff ffe3 	bl	8080bd2 <_ZN6String6concatEPKcj>
 8080c0c:	b910      	cbnz	r0, 8080c14 <_ZplRK15StringSumHelperRK6String+0x14>
 8080c0e:	4620      	mov	r0, r4
 8080c10:	f7ff ff27 	bl	8080a62 <_ZN6String10invalidateEv>
	return a;
}
 8080c14:	4620      	mov	r0, r4
 8080c16:	bd10      	pop	{r4, pc}

08080c18 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 8080c18:	b538      	push	{r3, r4, r5, lr}
 8080c1a:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 8080c1c:	460d      	mov	r5, r1
 8080c1e:	b141      	cbz	r1, 8080c32 <_ZplRK15StringSumHelperPKc+0x1a>
 8080c20:	4608      	mov	r0, r1
 8080c22:	f002 fa5e 	bl	80830e2 <strlen>
 8080c26:	4629      	mov	r1, r5
 8080c28:	4602      	mov	r2, r0
 8080c2a:	4620      	mov	r0, r4
 8080c2c:	f7ff ffd1 	bl	8080bd2 <_ZN6String6concatEPKcj>
 8080c30:	b910      	cbnz	r0, 8080c38 <_ZplRK15StringSumHelperPKc+0x20>
 8080c32:	4620      	mov	r0, r4
 8080c34:	f7ff ff15 	bl	8080a62 <_ZN6String10invalidateEv>
	return a;
}
 8080c38:	4620      	mov	r0, r4
 8080c3a:	bd38      	pop	{r3, r4, r5, pc}

08080c3c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8080c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8080c3e:	4606      	mov	r6, r0
 8080c40:	460d      	mov	r5, r1
 8080c42:	188f      	adds	r7, r1, r2
  size_t n = 0;
 8080c44:	2400      	movs	r4, #0
  while (size--) {
 8080c46:	42bd      	cmp	r5, r7
 8080c48:	d00c      	beq.n	8080c64 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 8080c4a:	6833      	ldr	r3, [r6, #0]
 8080c4c:	f815 1b01 	ldrb.w	r1, [r5], #1
 8080c50:	689b      	ldr	r3, [r3, #8]
 8080c52:	4630      	mov	r0, r6
 8080c54:	4798      	blx	r3
     if (chunk>=0)
 8080c56:	2800      	cmp	r0, #0
 8080c58:	db01      	blt.n	8080c5e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 8080c5a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 8080c5c:	e7f3      	b.n	8080c46 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 8080c5e:	2c00      	cmp	r4, #0
 8080c60:	bf08      	it	eq
 8080c62:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 8080c64:	4620      	mov	r0, r4
 8080c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08080c68 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8080c68:	b570      	push	{r4, r5, r6, lr}
 8080c6a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 8080c6c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 8080c6e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 8080c70:	b149      	cbz	r1, 8080c86 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 8080c72:	f002 fa36 	bl	80830e2 <strlen>
 8080c76:	682b      	ldr	r3, [r5, #0]
 8080c78:	4602      	mov	r2, r0
 8080c7a:	4621      	mov	r1, r4
 8080c7c:	4628      	mov	r0, r5
    }
 8080c7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 8080c82:	68db      	ldr	r3, [r3, #12]
 8080c84:	4718      	bx	r3
    }
 8080c86:	bd70      	pop	{r4, r5, r6, pc}

08080c88 <_ZN5Print5printEPKc>:
 8080c88:	b508      	push	{r3, lr}
 8080c8a:	f7ff ffed 	bl	8080c68 <_ZN5Print5writeEPKc>
 8080c8e:	bd08      	pop	{r3, pc}

08080c90 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 8080c90:	6803      	ldr	r3, [r0, #0]
 8080c92:	689b      	ldr	r3, [r3, #8]
 8080c94:	4718      	bx	r3

08080c96 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 8080c96:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 8080c98:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 8080c9a:	4605      	mov	r5, r0
  size_t n = print('\r');
 8080c9c:	f7ff fff8 	bl	8080c90 <_ZN5Print5printEc>
  n += print('\n');
 8080ca0:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 8080ca2:	4604      	mov	r4, r0
  n += print('\n');
 8080ca4:	4628      	mov	r0, r5
 8080ca6:	f7ff fff3 	bl	8080c90 <_ZN5Print5printEc>
  return n;
}
 8080caa:	4420      	add	r0, r4
 8080cac:	bd38      	pop	{r3, r4, r5, pc}

08080cae <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 8080cae:	b538      	push	{r3, r4, r5, lr}
 8080cb0:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8080cb2:	f7ff ffd9 	bl	8080c68 <_ZN5Print5writeEPKc>
 8080cb6:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 8080cb8:	4628      	mov	r0, r5
 8080cba:	f7ff ffec 	bl	8080c96 <_ZN5Print7printlnEv>
  return n;
}
 8080cbe:	4420      	add	r0, r4
 8080cc0:	bd38      	pop	{r3, r4, r5, pc}

08080cc2 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8080cc2:	2a01      	cmp	r2, #1
 8080cc4:	bf98      	it	ls
 8080cc6:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 8080cc8:	b530      	push	{r4, r5, lr}
 8080cca:	460b      	mov	r3, r1
 8080ccc:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 8080cce:	2100      	movs	r1, #0
 8080cd0:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8080cd4:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 8080cd8:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 8080cdc:	fb05 3312 	mls	r3, r5, r2, r3
 8080ce0:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8080ce2:	2b09      	cmp	r3, #9
 8080ce4:	bf94      	ite	ls
 8080ce6:	3330      	addls	r3, #48	; 0x30
 8080ce8:	3337      	addhi	r3, #55	; 0x37
 8080cea:	b2db      	uxtb	r3, r3
 8080cec:	4621      	mov	r1, r4
 8080cee:	f804 3901 	strb.w	r3, [r4], #-1
 8080cf2:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 8080cf4:	2d00      	cmp	r5, #0
 8080cf6:	d1ef      	bne.n	8080cd8 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 8080cf8:	f7ff ffb6 	bl	8080c68 <_ZN5Print5writeEPKc>
}
 8080cfc:	b00b      	add	sp, #44	; 0x2c
 8080cfe:	bd30      	pop	{r4, r5, pc}

08080d00 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 8080d00:	b410      	push	{r4}
  if (base == 0) return write(n);
 8080d02:	b922      	cbnz	r2, 8080d0e <_ZN5Print5printEmi+0xe>
 8080d04:	6803      	ldr	r3, [r0, #0]
 8080d06:	b2c9      	uxtb	r1, r1
 8080d08:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 8080d0a:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 8080d0c:	4718      	bx	r3
  else return printNumber(n, base);
 8080d0e:	b2d2      	uxtb	r2, r2
}
 8080d10:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 8080d12:	f7ff bfd6 	b.w	8080cc2 <_ZN5Print11printNumberEmh>

08080d16 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 8080d16:	f7ff bff3 	b.w	8080d00 <_ZN5Print5printEmi>

08080d1a <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 8080d1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8080d1e:	4607      	mov	r7, r0
 8080d20:	460e      	mov	r6, r1
  if (base == 0) {
 8080d22:	4615      	mov	r5, r2
 8080d24:	b92a      	cbnz	r2, 8080d32 <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 8080d26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 8080d2a:	6803      	ldr	r3, [r0, #0]
 8080d2c:	b2c9      	uxtb	r1, r1
 8080d2e:	689b      	ldr	r3, [r3, #8]
 8080d30:	4718      	bx	r3
  } else if (base == 10) {
 8080d32:	2a0a      	cmp	r2, #10
 8080d34:	d102      	bne.n	8080d3c <_ZN5Print5printEli+0x22>
    if (n < 0) {
 8080d36:	2900      	cmp	r1, #0
 8080d38:	da01      	bge.n	8080d3e <_ZN5Print5printEli+0x24>
 8080d3a:	e004      	b.n	8080d46 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 8080d3c:	b2d2      	uxtb	r2, r2
  }
}
 8080d3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 8080d42:	f7ff bfbe 	b.w	8080cc2 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 8080d46:	212d      	movs	r1, #45	; 0x2d
 8080d48:	f7ff ffa2 	bl	8080c90 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 8080d4c:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 8080d4e:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 8080d50:	4271      	negs	r1, r6
 8080d52:	4638      	mov	r0, r7
 8080d54:	f7ff ffb5 	bl	8080cc2 <_ZN5Print11printNumberEmh>
 8080d58:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 8080d5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08080d60 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 8080d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  size_t n = 0;

  if (isnan(number)) return print("nan");
 8080d64:	4619      	mov	r1, r3

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 8080d66:	4680      	mov	r8, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 8080d68:	4610      	mov	r0, r2

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 8080d6a:	4617      	mov	r7, r2
 8080d6c:	461e      	mov	r6, r3
 8080d6e:	f89d 5020 	ldrb.w	r5, [sp, #32]
  size_t n = 0;

  if (isnan(number)) return print("nan");
 8080d72:	f001 fdb3 	bl	80828dc <__aeabi_dcmpun>
 8080d76:	b108      	cbz	r0, 8080d7c <_ZN5Print10printFloatEdh+0x1c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8080d78:	4947      	ldr	r1, [pc, #284]	; (8080e98 <_ZN5Print10printFloatEdh+0x138>)
 8080d7a:	e012      	b.n	8080da2 <_ZN5Print10printFloatEdh+0x42>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 8080d7c:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8080d80:	f04f 32ff 	mov.w	r2, #4294967295
 8080d84:	4b45      	ldr	r3, [pc, #276]	; (8080e9c <_ZN5Print10printFloatEdh+0x13c>)
 8080d86:	4638      	mov	r0, r7
 8080d88:	4621      	mov	r1, r4
 8080d8a:	f001 fda7 	bl	80828dc <__aeabi_dcmpun>
 8080d8e:	b968      	cbnz	r0, 8080dac <_ZN5Print10printFloatEdh+0x4c>
 8080d90:	f04f 32ff 	mov.w	r2, #4294967295
 8080d94:	4b41      	ldr	r3, [pc, #260]	; (8080e9c <_ZN5Print10printFloatEdh+0x13c>)
 8080d96:	4638      	mov	r0, r7
 8080d98:	4621      	mov	r1, r4
 8080d9a:	f001 fd81 	bl	80828a0 <__aeabi_dcmple>
 8080d9e:	b928      	cbnz	r0, 8080dac <_ZN5Print10printFloatEdh+0x4c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8080da0:	493f      	ldr	r1, [pc, #252]	; (8080ea0 <_ZN5Print10printFloatEdh+0x140>)
 8080da2:	4640      	mov	r0, r8
 8080da4:	f7ff ff60 	bl	8080c68 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 8080da8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 8080dac:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8080db0:	4b3c      	ldr	r3, [pc, #240]	; (8080ea4 <_ZN5Print10printFloatEdh+0x144>)
 8080db2:	4638      	mov	r0, r7
 8080db4:	4631      	mov	r1, r6
 8080db6:	f001 fd87 	bl	80828c8 <__aeabi_dcmpgt>
 8080dba:	b108      	cbz	r0, 8080dc0 <_ZN5Print10printFloatEdh+0x60>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8080dbc:	493a      	ldr	r1, [pc, #232]	; (8080ea8 <_ZN5Print10printFloatEdh+0x148>)
 8080dbe:	e7f0      	b.n	8080da2 <_ZN5Print10printFloatEdh+0x42>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 8080dc0:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8080dc4:	4b39      	ldr	r3, [pc, #228]	; (8080eac <_ZN5Print10printFloatEdh+0x14c>)
 8080dc6:	4638      	mov	r0, r7
 8080dc8:	4631      	mov	r1, r6
 8080dca:	f001 fd5f 	bl	808288c <__aeabi_dcmplt>
 8080dce:	2800      	cmp	r0, #0
 8080dd0:	d1f4      	bne.n	8080dbc <_ZN5Print10printFloatEdh+0x5c>

  // Handle negative numbers
  if (number < 0.0)
 8080dd2:	2200      	movs	r2, #0
 8080dd4:	2300      	movs	r3, #0
 8080dd6:	4638      	mov	r0, r7
 8080dd8:	4631      	mov	r1, r6
 8080dda:	f001 fd57 	bl	808288c <__aeabi_dcmplt>
 8080dde:	b138      	cbz	r0, 8080df0 <_ZN5Print10printFloatEdh+0x90>
  {
     n += print('-');
 8080de0:	212d      	movs	r1, #45	; 0x2d
 8080de2:	4640      	mov	r0, r8
 8080de4:	f7ff ff54 	bl	8080c90 <_ZN5Print5printEc>
     number = -number;
 8080de8:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
 8080dec:	4604      	mov	r4, r0
 8080dee:	e000      	b.n	8080df2 <_ZN5Print10printFloatEdh+0x92>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 8080df0:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 8080df2:	492f      	ldr	r1, [pc, #188]	; (8080eb0 <_ZN5Print10printFloatEdh+0x150>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 8080df4:	f04f 0900 	mov.w	r9, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 8080df8:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
 8080dfa:	fa5f f389 	uxtb.w	r3, r9
 8080dfe:	429d      	cmp	r5, r3
 8080e00:	d906      	bls.n	8080e10 <_ZN5Print10printFloatEdh+0xb0>
    rounding /= 10.0;
 8080e02:	2200      	movs	r2, #0
 8080e04:	4b2b      	ldr	r3, [pc, #172]	; (8080eb4 <_ZN5Print10printFloatEdh+0x154>)
 8080e06:	f001 fbf9 	bl	80825fc <__aeabi_ddiv>
 8080e0a:	f109 0901 	add.w	r9, r9, #1
 8080e0e:	e7f4      	b.n	8080dfa <_ZN5Print10printFloatEdh+0x9a>

  number += rounding;
 8080e10:	463a      	mov	r2, r7
 8080e12:	4633      	mov	r3, r6
 8080e14:	f001 f916 	bl	8082044 <__adddf3>
 8080e18:	460f      	mov	r7, r1
 8080e1a:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 8080e1c:	f001 fd9c 	bl	8082958 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 8080e20:	220a      	movs	r2, #10
 8080e22:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 8080e24:	4681      	mov	r9, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 8080e26:	4640      	mov	r0, r8
 8080e28:	f7ff ff4b 	bl	8080cc2 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 8080e2c:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 8080e2e:	b37d      	cbz	r5, 8080e90 <_ZN5Print10printFloatEdh+0x130>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
 8080e30:	4648      	mov	r0, r9
 8080e32:	f001 fa43 	bl	80822bc <__aeabi_ui2d>
 8080e36:	4602      	mov	r2, r0
 8080e38:	460b      	mov	r3, r1
 8080e3a:	4630      	mov	r0, r6
 8080e3c:	4639      	mov	r1, r7
 8080e3e:	f001 f8ff 	bl	8082040 <__aeabi_dsub>
 8080e42:	4606      	mov	r6, r0
 8080e44:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8080e46:	4640      	mov	r0, r8
 8080e48:	491b      	ldr	r1, [pc, #108]	; (8080eb8 <_ZN5Print10printFloatEdh+0x158>)
 8080e4a:	f7ff ff0d 	bl	8080c68 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
 8080e4e:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 8080e50:	4b18      	ldr	r3, [pc, #96]	; (8080eb4 <_ZN5Print10printFloatEdh+0x154>)
 8080e52:	2200      	movs	r2, #0
 8080e54:	4630      	mov	r0, r6
 8080e56:	4639      	mov	r1, r7
 8080e58:	f001 faa6 	bl	80823a8 <__aeabi_dmul>
 8080e5c:	460f      	mov	r7, r1
 8080e5e:	4606      	mov	r6, r0
    int toPrint = int(remainder);
 8080e60:	f001 fd52 	bl	8082908 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 8080e64:	220a      	movs	r2, #10
 8080e66:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
 8080e68:	4681      	mov	r9, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 8080e6a:	4640      	mov	r0, r8
 8080e6c:	f7ff ff55 	bl	8080d1a <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
 8080e70:	4404      	add	r4, r0
    remainder -= toPrint;
 8080e72:	4648      	mov	r0, r9
 8080e74:	f001 fa32 	bl	80822dc <__aeabi_i2d>
 8080e78:	4602      	mov	r2, r0
 8080e7a:	460b      	mov	r3, r1
 8080e7c:	4630      	mov	r0, r6
 8080e7e:	4639      	mov	r1, r7
 8080e80:	f001 f8de 	bl	8082040 <__aeabi_dsub>
 8080e84:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 8080e86:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
 8080e8a:	4606      	mov	r6, r0
 8080e8c:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 8080e8e:	d1df      	bne.n	8080e50 <_ZN5Print10printFloatEdh+0xf0>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 8080e90:	4620      	mov	r0, r4
 8080e92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8080e96:	bf00      	nop
 8080e98:	080831f4 	.word	0x080831f4
 8080e9c:	7fefffff 	.word	0x7fefffff
 8080ea0:	080831fc 	.word	0x080831fc
 8080ea4:	41efffff 	.word	0x41efffff
 8080ea8:	080831f8 	.word	0x080831f8
 8080eac:	c1efffff 	.word	0xc1efffff
 8080eb0:	3fe00000 	.word	0x3fe00000
 8080eb4:	40240000 	.word	0x40240000
 8080eb8:	080831a8 	.word	0x080831a8

08080ebc <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 8080ebc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 8080ebe:	f89d 1018 	ldrb.w	r1, [sp, #24]
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 8080ec2:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 8080ec4:	9100      	str	r1, [sp, #0]
 8080ec6:	f7ff ff4b 	bl	8080d60 <_ZN5Print10printFloatEdh>
 8080eca:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
 8080ecc:	4628      	mov	r0, r5
 8080ece:	f7ff fee2 	bl	8080c96 <_ZN5Print7printlnEv>
  return n;
}
 8080ed2:	4420      	add	r0, r4
 8080ed4:	b003      	add	sp, #12
 8080ed6:	bd30      	pop	{r4, r5, pc}

08080ed8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 8080ed8:	680b      	ldr	r3, [r1, #0]
 8080eda:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 8080edc:	b113      	cbz	r3, 8080ee4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 8080ede:	685a      	ldr	r2, [r3, #4]
 8080ee0:	3201      	adds	r2, #1
 8080ee2:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 8080ee4:	4770      	bx	lr
	...

08080ee8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 8080ee8:	4a01      	ldr	r2, [pc, #4]	; (8080ef0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 8080eea:	4b02      	ldr	r3, [pc, #8]	; (8080ef4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 8080eec:	601a      	str	r2, [r3, #0]
 8080eee:	4770      	bx	lr
 8080ef0:	08083276 	.word	0x08083276
 8080ef4:	2000008c 	.word	0x2000008c

08080ef8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 8080ef8:	4b02      	ldr	r3, [pc, #8]	; (8080f04 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 8080efa:	681a      	ldr	r2, [r3, #0]
 8080efc:	4b02      	ldr	r3, [pc, #8]	; (8080f08 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 8080efe:	601a      	str	r2, [r3, #0]
 8080f00:	4770      	bx	lr
 8080f02:	bf00      	nop
 8080f04:	20000004 	.word	0x20000004
 8080f08:	20000090 	.word	0x20000090

08080f0c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 8080f0c:	2100      	movs	r1, #0
 8080f0e:	f7ff bc07 	b.w	8080720 <system_delay_ms>

08080f12 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8080f12:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 8080f14:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8080f16:	4604      	mov	r4, r0
    {
      if (_M_manager)
 8080f18:	b113      	cbz	r3, 8080f20 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8080f1a:	2203      	movs	r2, #3
 8080f1c:	4601      	mov	r1, r0
 8080f1e:	4798      	blx	r3
    }
 8080f20:	4620      	mov	r0, r4
 8080f22:	bd10      	pop	{r4, pc}

08080f24 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 8080f24:	b510      	push	{r4, lr}
 8080f26:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8080f28:	f7ff fff3 	bl	8080f12 <_ZNSt14_Function_baseD1Ev>
 8080f2c:	4620      	mov	r0, r4
 8080f2e:	bd10      	pop	{r4, pc}

08080f30 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 8080f30:	b513      	push	{r0, r1, r4, lr}
 8080f32:	460b      	mov	r3, r1
 8080f34:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8080f36:	c803      	ldmia	r0, {r0, r1}
 8080f38:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8080f3c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8080f40:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8080f44:	e89d 0003 	ldmia.w	sp, {r0, r1}
 8080f48:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8080f4c:	b002      	add	sp, #8
 8080f4e:	bd10      	pop	{r4, pc}

08080f50 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8080f50:	4803      	ldr	r0, [pc, #12]	; (8080f60 <_GLOBAL__sub_I_RGB+0x10>)
 8080f52:	2300      	movs	r3, #0
 8080f54:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 8080f56:	4a03      	ldr	r2, [pc, #12]	; (8080f64 <_GLOBAL__sub_I_RGB+0x14>)
 8080f58:	4903      	ldr	r1, [pc, #12]	; (8080f68 <_GLOBAL__sub_I_RGB+0x18>)
 8080f5a:	f000 bf1b 	b.w	8081d94 <__aeabi_atexit>
 8080f5e:	bf00      	nop
 8080f60:	20000094 	.word	0x20000094
 8080f64:	2000006c 	.word	0x2000006c
 8080f68:	08080f25 	.word	0x08080f25

08080f6c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 8080f6c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 8080f6e:	4b18      	ldr	r3, [pc, #96]	; (8080fd0 <serialEventRun+0x64>)
 8080f70:	b133      	cbz	r3, 8080f80 <serialEventRun+0x14>
 8080f72:	f000 fc23 	bl	80817bc <_Z16_fetch_usbserialv>
 8080f76:	6803      	ldr	r3, [r0, #0]
 8080f78:	691b      	ldr	r3, [r3, #16]
 8080f7a:	4798      	blx	r3
 8080f7c:	2800      	cmp	r0, #0
 8080f7e:	dc1e      	bgt.n	8080fbe <serialEventRun+0x52>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 8080f80:	4b14      	ldr	r3, [pc, #80]	; (8080fd4 <serialEventRun+0x68>)
 8080f82:	b133      	cbz	r3, 8080f92 <serialEventRun+0x26>
 8080f84:	f000 fd46 	bl	8081a14 <_Z22__fetch_global_Serial1v>
 8080f88:	6803      	ldr	r3, [r0, #0]
 8080f8a:	691b      	ldr	r3, [r3, #16]
 8080f8c:	4798      	blx	r3
 8080f8e:	2800      	cmp	r0, #0
 8080f90:	dc18      	bgt.n	8080fc4 <serialEventRun+0x58>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 8080f92:	4b11      	ldr	r3, [pc, #68]	; (8080fd8 <serialEventRun+0x6c>)
 8080f94:	b10b      	cbz	r3, 8080f9a <serialEventRun+0x2e>
 8080f96:	f3af 8000 	nop.w
#if Wiring_Serial3
    if (serialEventRun3) serialEventRun3();
#endif

#if Wiring_Serial4
    if (serialEventRun4) serialEventRun4();
 8080f9a:	4b10      	ldr	r3, [pc, #64]	; (8080fdc <serialEventRun+0x70>)
 8080f9c:	b10b      	cbz	r3, 8080fa2 <serialEventRun+0x36>
 8080f9e:	f3af 8000 	nop.w
#endif

#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
 8080fa2:	4b0f      	ldr	r3, [pc, #60]	; (8080fe0 <serialEventRun+0x74>)
 8080fa4:	b10b      	cbz	r3, 8080faa <serialEventRun+0x3e>
 8080fa6:	f3af 8000 	nop.w
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 8080faa:	4b0e      	ldr	r3, [pc, #56]	; (8080fe4 <serialEventRun+0x78>)
 8080fac:	b17b      	cbz	r3, 8080fce <serialEventRun+0x62>
 8080fae:	f000 fc41 	bl	8081834 <_Z17_fetch_usbserial1v>
 8080fb2:	6803      	ldr	r3, [r0, #0]
 8080fb4:	691b      	ldr	r3, [r3, #16]
 8080fb6:	4798      	blx	r3
 8080fb8:	2800      	cmp	r0, #0
 8080fba:	dc06      	bgt.n	8080fca <serialEventRun+0x5e>
 8080fbc:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 8080fbe:	f3af 8000 	nop.w
 8080fc2:	e7dd      	b.n	8080f80 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 8080fc4:	f3af 8000 	nop.w
 8080fc8:	e7e3      	b.n	8080f92 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 8080fca:	f3af 8000 	nop.w
 8080fce:	bd08      	pop	{r3, pc}
	...

08080fe8 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 8080fe8:	b508      	push	{r3, lr}
	serialEventRun();
 8080fea:	f7ff ffbf 	bl	8080f6c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8080fee:	f7ff facf 	bl	8080590 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8080ff2:	4b01      	ldr	r3, [pc, #4]	; (8080ff8 <_post_loop+0x10>)
 8080ff4:	6018      	str	r0, [r3, #0]
 8080ff6:	bd08      	pop	{r3, pc}
 8080ff8:	20000570 	.word	0x20000570

08080ffc <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8080ffc:	4802      	ldr	r0, [pc, #8]	; (8081008 <_Z33system_initialize_user_backup_ramv+0xc>)
 8080ffe:	4a03      	ldr	r2, [pc, #12]	; (808100c <_Z33system_initialize_user_backup_ramv+0x10>)
 8081000:	4903      	ldr	r1, [pc, #12]	; (8081010 <_Z33system_initialize_user_backup_ramv+0x14>)
 8081002:	1a12      	subs	r2, r2, r0
 8081004:	f002 b80e 	b.w	8083024 <memcpy>
 8081008:	40024000 	.word	0x40024000
 808100c:	40024004 	.word	0x40024004
 8081010:	080834d8 	.word	0x080834d8

08081014 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 8081014:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8081016:	2300      	movs	r3, #0
 8081018:	9300      	str	r3, [sp, #0]
 808101a:	461a      	mov	r2, r3
 808101c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8081020:	f7ff fba0 	bl	8080764 <system_ctrl_set_result>
}
 8081024:	b003      	add	sp, #12
 8081026:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0808102c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 808102c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 808102e:	8843      	ldrh	r3, [r0, #2]
 8081030:	2b0a      	cmp	r3, #10
 8081032:	d008      	beq.n	8081046 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 8081034:	2b50      	cmp	r3, #80	; 0x50
 8081036:	d109      	bne.n	808104c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 8081038:	4b09      	ldr	r3, [pc, #36]	; (8081060 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 808103a:	681b      	ldr	r3, [r3, #0]
 808103c:	b13b      	cbz	r3, 808104e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 808103e:	b003      	add	sp, #12
 8081040:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 8081044:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 8081046:	f7ff ffe5 	bl	8081014 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 808104a:	e006      	b.n	808105a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 808104c:	2300      	movs	r3, #0
 808104e:	9300      	str	r3, [sp, #0]
 8081050:	461a      	mov	r2, r3
 8081052:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8081056:	f7ff fb85 	bl	8080764 <system_ctrl_set_result>
        break;
    }
}
 808105a:	b003      	add	sp, #12
 808105c:	f85d fb04 	ldr.w	pc, [sp], #4
 8081060:	200000a4 	.word	0x200000a4

08081064 <module_user_init_hook>:

void module_user_init_hook()
{
 8081064:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 8081066:	4c10      	ldr	r4, [pc, #64]	; (80810a8 <module_user_init_hook+0x44>)
 8081068:	4d10      	ldr	r5, [pc, #64]	; (80810ac <module_user_init_hook+0x48>)
 808106a:	6823      	ldr	r3, [r4, #0]
 808106c:	42ab      	cmp	r3, r5
 808106e:	4b10      	ldr	r3, [pc, #64]	; (80810b0 <module_user_init_hook+0x4c>)
 8081070:	bf0c      	ite	eq
 8081072:	2201      	moveq	r2, #1
 8081074:	2200      	movne	r2, #0
 8081076:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 8081078:	d002      	beq.n	8081080 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 808107a:	f7ff ffbf 	bl	8080ffc <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 808107e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 8081080:	f7ff fa76 	bl	8080570 <HAL_RNG_GetRandomNumber>
 8081084:	4604      	mov	r4, r0
    srand(seed);
 8081086:	f001 ffe1 	bl	808304c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 808108a:	4b0a      	ldr	r3, [pc, #40]	; (80810b4 <module_user_init_hook+0x50>)
 808108c:	b113      	cbz	r3, 8081094 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 808108e:	4620      	mov	r0, r4
 8081090:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 8081094:	2100      	movs	r1, #0
 8081096:	4807      	ldr	r0, [pc, #28]	; (80810b4 <module_user_init_hook+0x50>)
 8081098:	f7ff fbce 	bl	8080838 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 808109c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80810a0:	2100      	movs	r1, #0
 80810a2:	4805      	ldr	r0, [pc, #20]	; (80810b8 <module_user_init_hook+0x54>)
 80810a4:	f7ff bb54 	b.w	8080750 <system_ctrl_set_app_request_handler>
 80810a8:	40024000 	.word	0x40024000
 80810ac:	9a271c1e 	.word	0x9a271c1e
 80810b0:	200000a8 	.word	0x200000a8
 80810b4:	00000000 	.word	0x00000000
 80810b8:	0808102d 	.word	0x0808102d

080810bc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80810bc:	4770      	bx	lr

080810be <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 80810be:	2000      	movs	r0, #0
 80810c0:	4770      	bx	lr

080810c2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80810c2:	b510      	push	{r4, lr}
 80810c4:	4604      	mov	r4, r0
 80810c6:	2110      	movs	r1, #16
 80810c8:	f000 fe69 	bl	8081d9e <_ZdlPvj>
 80810cc:	4620      	mov	r0, r4
 80810ce:	bd10      	pop	{r4, pc}

080810d0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 80810d0:	b508      	push	{r3, lr}
      { delete this; }
 80810d2:	b108      	cbz	r0, 80810d8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 80810d4:	f7ff fff5 	bl	80810c2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80810d8:	bd08      	pop	{r3, pc}

080810da <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80810da:	2200      	movs	r2, #0
 80810dc:	6002      	str	r2, [r0, #0]
 80810de:	f64f 729c 	movw	r2, #65436	; 0xff9c
 80810e2:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80810e4:	b510      	push	{r4, lr}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80810e6:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 80810ea:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80810ec:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80810ee:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 80810f0:	680c      	ldr	r4, [r1, #0]
 80810f2:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80810f4:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80810f6:	bd10      	pop	{r4, pc}

080810f8 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80810f8:	b510      	push	{r4, lr}
 80810fa:	4604      	mov	r4, r0
    free((void*)msg_);
 80810fc:	6800      	ldr	r0, [r0, #0]
 80810fe:	f7ff fbab 	bl	8080858 <free>
}
 8081102:	4620      	mov	r0, r4
 8081104:	bd10      	pop	{r4, pc}

08081106 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 8081106:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 8081108:	68c4      	ldr	r4, [r0, #12]
 808110a:	b1f4      	cbz	r4, 808114a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 808110c:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 808110e:	2b02      	cmp	r3, #2
 8081110:	d103      	bne.n	808111a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 8081112:	f104 000c 	add.w	r0, r4, #12
 8081116:	f7ff ffef 	bl	80810f8 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 808111a:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 808111c:	b135      	cbz	r5, 808112c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808111e:	4628      	mov	r0, r5
 8081120:	f7ff fef7 	bl	8080f12 <_ZNSt14_Function_baseD1Ev>
 8081124:	2110      	movs	r1, #16
 8081126:	4628      	mov	r0, r5
 8081128:	f000 fe39 	bl	8081d9e <_ZdlPvj>
 808112c:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 808112e:	b135      	cbz	r5, 808113e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 8081130:	4628      	mov	r0, r5
 8081132:	f7ff feee 	bl	8080f12 <_ZNSt14_Function_baseD1Ev>
 8081136:	2110      	movs	r1, #16
 8081138:	4628      	mov	r0, r5
 808113a:	f000 fe30 	bl	8081d9e <_ZdlPvj>
 808113e:	4620      	mov	r0, r4
 8081140:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8081144:	2114      	movs	r1, #20
 8081146:	f000 be2a 	b.w	8081d9e <_ZdlPvj>
 808114a:	bd38      	pop	{r3, r4, r5, pc}

0808114c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 808114c:	b513      	push	{r0, r1, r4, lr}
 808114e:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8081150:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 8081154:	2300      	movs	r3, #0
 8081156:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8081158:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 808115a:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 808115c:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 808115e:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 8081160:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8081162:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8081164:	f7ff f836 	bl	80801d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081168:	4620      	mov	r0, r4
 808116a:	b002      	add	sp, #8
 808116c:	bd10      	pop	{r4, pc}

0808116e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 808116e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8081170:	460c      	mov	r4, r1
 8081172:	4606      	mov	r6, r0
 8081174:	460f      	mov	r7, r1
 8081176:	f854 3b04 	ldr.w	r3, [r4], #4
 808117a:	ad02      	add	r5, sp, #8
 808117c:	f845 3d08 	str.w	r3, [r5, #-8]!
 8081180:	4621      	mov	r1, r4
 8081182:	a801      	add	r0, sp, #4
 8081184:	f7ff fea8 	bl	8080ed8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 8081188:	4629      	mov	r1, r5
 808118a:	4630      	mov	r0, r6
 808118c:	f7ff ffde 	bl	808114c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8081190:	a801      	add	r0, sp, #4
 8081192:	f7ff f81f 	bl	80801d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081196:	4620      	mov	r0, r4
 8081198:	f7ff f81c 	bl	80801d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 808119c:	4638      	mov	r0, r7
 808119e:	2108      	movs	r1, #8
 80811a0:	f000 fdfd 	bl	8081d9e <_ZdlPvj>
        return p;
    }
 80811a4:	4630      	mov	r0, r6
 80811a6:	b003      	add	sp, #12
 80811a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080811ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80811ac:	b538      	push	{r3, r4, r5, lr}
 80811ae:	2300      	movs	r3, #0
 80811b0:	4604      	mov	r4, r0
 80811b2:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80811b4:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80811b6:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80811b8:	f7fe ff71 	bl	808009e <_Znwj>
 80811bc:	b128      	cbz	r0, 80811ca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80811be:	2301      	movs	r3, #1
 80811c0:	6043      	str	r3, [r0, #4]
 80811c2:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 80811c4:	4b02      	ldr	r3, [pc, #8]	; (80811d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80811c6:	60c5      	str	r5, [r0, #12]
 80811c8:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80811ca:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 80811cc:	4620      	mov	r0, r4
 80811ce:	bd38      	pop	{r3, r4, r5, pc}
 80811d0:	08083314 	.word	0x08083314

080811d4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80811d4:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80811d6:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80811d8:	b90a      	cbnz	r2, 80811de <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80811da:	f000 fde2 	bl	8081da2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80811de:	68c3      	ldr	r3, [r0, #12]
    }
 80811e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80811e4:	4718      	bx	r3

080811e6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80811e6:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80811e8:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80811ea:	f100 0110 	add.w	r1, r0, #16
 80811ee:	f7ff fff1 	bl	80811d4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80811f2:	bd08      	pop	{r3, pc}

080811f4 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80811f4:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80811f6:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80811f8:	b90a      	cbnz	r2, 80811fe <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80811fa:	f000 fdd2 	bl	8081da2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80811fe:	68c3      	ldr	r3, [r0, #12]
    }
 8081200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8081204:	4718      	bx	r3

08081206 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8081206:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8081208:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 808120a:	f100 0110 	add.w	r1, r0, #16
 808120e:	f7ff fff1 	bl	80811f4 <_ZNKSt8functionIFvRKbEEclES1_>
 8081212:	bd08      	pop	{r3, pc}

08081214 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8081214:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8081216:	2300      	movs	r3, #0
 8081218:	6083      	str	r3, [r0, #8]
 808121a:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 808121c:	4604      	mov	r4, r0
 808121e:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8081220:	b12b      	cbz	r3, 808122e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8081222:	2202      	movs	r2, #2
 8081224:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8081226:	68eb      	ldr	r3, [r5, #12]
 8081228:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 808122a:	68ab      	ldr	r3, [r5, #8]
 808122c:	60a3      	str	r3, [r4, #8]
	}
    }
 808122e:	4620      	mov	r0, r4
 8081230:	bd38      	pop	{r3, r4, r5, pc}
	...

08081234 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 8081234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8081236:	b089      	sub	sp, #36	; 0x24
 8081238:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 808123a:	4668      	mov	r0, sp
 808123c:	f7ff ff4d 	bl	80810da <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 8081240:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 8081244:	2300      	movs	r3, #0
 8081246:	f88d 3008 	strb.w	r3, [sp, #8]
 808124a:	e8d4 3f4f 	ldrexb	r3, [r4]
 808124e:	2b00      	cmp	r3, #0
 8081250:	d103      	bne.n	808125a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 8081252:	e8c4 2f41 	strexb	r1, r2, [r4]
 8081256:	2900      	cmp	r1, #0
 8081258:	d1f7      	bne.n	808124a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 808125a:	d002      	beq.n	8081262 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 808125c:	f88d 3008 	strb.w	r3, [sp, #8]
 8081260:	e063      	b.n	808132a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 8081262:	f114 050c 	adds.w	r5, r4, #12
 8081266:	d003      	beq.n	8081270 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 8081268:	4669      	mov	r1, sp
 808126a:	4628      	mov	r0, r5
 808126c:	f7ff ff35 	bl	80810da <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 8081270:	f3bf 8f5f 	dmb	sy
 8081274:	2301      	movs	r3, #1
 8081276:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 8081278:	f3bf 8f5f 	dmb	sy
 808127c:	f104 0308 	add.w	r3, r4, #8
 8081280:	2000      	movs	r0, #0
 8081282:	e853 6f00 	ldrex	r6, [r3]
 8081286:	e843 0200 	strex	r2, r0, [r3]
 808128a:	2a00      	cmp	r2, #0
 808128c:	d1f9      	bne.n	8081282 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 808128e:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 8081292:	2e00      	cmp	r6, #0
 8081294:	d049      	beq.n	808132a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8081296:	f7ff fa4b 	bl	8080730 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 808129a:	b120      	cbz	r0, 80812a6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 808129c:	4629      	mov	r1, r5
 808129e:	4630      	mov	r0, r6
 80812a0:	f7ff ff98 	bl	80811d4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80812a4:	e03a      	b.n	808131c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80812a6:	4631      	mov	r1, r6
 80812a8:	a802      	add	r0, sp, #8
 80812aa:	f7ff ffb3 	bl	8081214 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80812ae:	68e0      	ldr	r0, [r4, #12]
 80812b0:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80812b4:	b108      	cbz	r0, 80812ba <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 80812b6:	f001 fef9 	bl	80830ac <strdup>
 80812ba:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80812bc:	2010      	movs	r0, #16
 80812be:	f8ad 501c 	strh.w	r5, [sp, #28]
 80812c2:	f7fe feec 	bl	808009e <_Znwj>
 80812c6:	4605      	mov	r5, r0
 80812c8:	b1e8      	cbz	r0, 8081306 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80812ca:	2700      	movs	r7, #0
 80812cc:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80812ce:	2018      	movs	r0, #24
 80812d0:	f7fe fee5 	bl	808009e <_Znwj>
 80812d4:	4604      	mov	r4, r0
 80812d6:	b188      	cbz	r0, 80812fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80812d8:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80812da:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80812dc:	a802      	add	r0, sp, #8
 80812de:	f7ff fe27 	bl	8080f30 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80812e2:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80812e4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80812e6:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80812e8:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80812ea:	9204      	str	r2, [sp, #16]
 80812ec:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80812ee:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80812f0:	60e3      	str	r3, [r4, #12]
 80812f2:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80812f6:	9205      	str	r2, [sp, #20]
 80812f8:	f7ff feef 	bl	80810da <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80812fc:	4b0d      	ldr	r3, [pc, #52]	; (8081334 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80812fe:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8081300:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8081302:	4b0d      	ldr	r3, [pc, #52]	; (8081338 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 8081304:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 8081306:	a806      	add	r0, sp, #24
 8081308:	f7ff fef6 	bl	80810f8 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808130c:	a802      	add	r0, sp, #8
 808130e:	f7ff fe00 	bl	8080f12 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8081312:	2200      	movs	r2, #0
 8081314:	4629      	mov	r1, r5
 8081316:	4809      	ldr	r0, [pc, #36]	; (808133c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 8081318:	f7ff fa12 	bl	8080740 <application_thread_invoke>
 808131c:	4630      	mov	r0, r6
 808131e:	f7ff fdf8 	bl	8080f12 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 8081322:	2110      	movs	r1, #16
 8081324:	4630      	mov	r0, r6
 8081326:	f000 fd3a 	bl	8081d9e <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 808132a:	4668      	mov	r0, sp
 808132c:	f7ff fee4 	bl	80810f8 <_ZN8particle5ErrorD1Ev>
    }
 8081330:	b009      	add	sp, #36	; 0x24
 8081332:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8081334:	080811e7 	.word	0x080811e7
 8081338:	0808145d 	.word	0x0808145d
 808133c:	08081a61 	.word	0x08081a61

08081340 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8081340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8081344:	b08b      	sub	sp, #44	; 0x2c
 8081346:	4606      	mov	r6, r0
 8081348:	460f      	mov	r7, r1
 808134a:	4690      	mov	r8, r2
 808134c:	4699      	mov	r9, r3
 808134e:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8081352:	f7ff fa61 	bl	8080818 <spark_cloud_flag_connected>
 8081356:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
 8081358:	4683      	mov	fp, r0
 808135a:	bb30      	cbnz	r0, 80813aa <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 808135c:	f64f 732e 	movw	r3, #65326	; 0xff2e
 8081360:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 8081362:	a905      	add	r1, sp, #20
 8081364:	4628      	mov	r0, r5
 8081366:	f8ad 3018 	strh.w	r3, [sp, #24]
 808136a:	f7ff feb6 	bl	80810da <_ZN8particle5ErrorC1EOS0_>
 808136e:	2014      	movs	r0, #20
 8081370:	f7fe fe95 	bl	808009e <_Znwj>
 8081374:	4604      	mov	r4, r0
 8081376:	b158      	cbz	r0, 8081390 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 8081378:	2302      	movs	r3, #2
 808137a:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 808137c:	2301      	movs	r3, #1
 808137e:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8081380:	f8c0 b004 	str.w	fp, [r0, #4]
 8081384:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 8081388:	4629      	mov	r1, r5
 808138a:	300c      	adds	r0, #12
 808138c:	f7ff fea5 	bl	80810da <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 8081390:	4630      	mov	r0, r6
 8081392:	4621      	mov	r1, r4
 8081394:	f840 4b04 	str.w	r4, [r0], #4
 8081398:	f7ff ff08 	bl	80811ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 808139c:	4628      	mov	r0, r5
 808139e:	f7ff feab 	bl	80810f8 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80813a2:	a805      	add	r0, sp, #20
 80813a4:	f7ff fea8 	bl	80810f8 <_ZN8particle5ErrorD1Ev>
 80813a8:	e052      	b.n	8081450 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80813aa:	2400      	movs	r4, #0
 80813ac:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80813ae:	2014      	movs	r0, #20
 80813b0:	606c      	str	r4, [r5, #4]
 80813b2:	60ac      	str	r4, [r5, #8]
 80813b4:	9307      	str	r3, [sp, #28]
 80813b6:	f7fe fe72 	bl	808009e <_Znwj>
 80813ba:	4601      	mov	r1, r0
 80813bc:	b118      	cbz	r0, 80813c6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 80813be:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80813c0:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80813c2:	6044      	str	r4, [r0, #4]
 80813c4:	6084      	str	r4, [r0, #8]
 80813c6:	a804      	add	r0, sp, #16
 80813c8:	9103      	str	r1, [sp, #12]
 80813ca:	f7ff feef 	bl	80811ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 80813ce:	4b22      	ldr	r3, [pc, #136]	; (8081458 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80813d0:	2008      	movs	r0, #8
 80813d2:	9308      	str	r3, [sp, #32]
 80813d4:	f7fe fe63 	bl	808009e <_Znwj>
 80813d8:	4604      	mov	r4, r0
 80813da:	b128      	cbz	r0, 80813e8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80813dc:	9b03      	ldr	r3, [sp, #12]
 80813de:	a904      	add	r1, sp, #16
 80813e0:	f840 3b04 	str.w	r3, [r0], #4
 80813e4:	f7ff fd78 	bl	8080ed8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80813e8:	9500      	str	r5, [sp, #0]
 80813ea:	fa5f f38a 	uxtb.w	r3, sl
 80813ee:	464a      	mov	r2, r9
 80813f0:	4641      	mov	r1, r8
 80813f2:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 80813f4:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80813f6:	f7ff fa17 	bl	8080828 <spark_send_event>
 80813fa:	b920      	cbnz	r0, 8081406 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80813fc:	9b03      	ldr	r3, [sp, #12]
 80813fe:	785b      	ldrb	r3, [r3, #1]
 8081400:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8081404:	b183      	cbz	r3, 8081428 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 8081406:	9b03      	ldr	r3, [sp, #12]
 8081408:	a904      	add	r1, sp, #16
 808140a:	a806      	add	r0, sp, #24
 808140c:	9305      	str	r3, [sp, #20]
 808140e:	f7ff fd63 	bl	8080ed8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 8081412:	a905      	add	r1, sp, #20
 8081414:	4630      	mov	r0, r6
 8081416:	f7ff fe99 	bl	808114c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 808141a:	a806      	add	r0, sp, #24
 808141c:	f7fe feda 	bl	80801d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081420:	a804      	add	r0, sp, #16
 8081422:	f7fe fed7 	bl	80801d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081426:	e013      	b.n	8081450 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 8081428:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 808142c:	a905      	add	r1, sp, #20
 808142e:	a803      	add	r0, sp, #12
 8081430:	9205      	str	r2, [sp, #20]
 8081432:	f8ad 3018 	strh.w	r3, [sp, #24]
 8081436:	f7ff fefd 	bl	8081234 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 808143a:	a805      	add	r0, sp, #20
 808143c:	f7ff fe5c 	bl	80810f8 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 8081440:	a805      	add	r0, sp, #20
 8081442:	9909      	ldr	r1, [sp, #36]	; 0x24
 8081444:	f7ff fe93 	bl	808116e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 8081448:	a806      	add	r0, sp, #24
 808144a:	f7fe fec3 	bl	80801d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808144e:	e7da      	b.n	8081406 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 8081450:	4630      	mov	r0, r6
 8081452:	b00b      	add	sp, #44	; 0x2c
 8081454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8081458:	080815cd 	.word	0x080815cd

0808145c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 808145c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 808145e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081460:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 8081462:	d006      	beq.n	8081472 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 8081464:	2a03      	cmp	r2, #3
 8081466:	d017      	beq.n	8081498 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 8081468:	2a01      	cmp	r2, #1
 808146a:	d122      	bne.n	80814b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 808146c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 808146e:	6003      	str	r3, [r0, #0]
	      break;
 8081470:	e01f      	b.n	80814b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8081472:	2018      	movs	r0, #24
 8081474:	680e      	ldr	r6, [r1, #0]
 8081476:	f7fe fe12 	bl	808009e <_Znwj>
 808147a:	4605      	mov	r5, r0
 808147c:	b150      	cbz	r0, 8081494 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 808147e:	4631      	mov	r1, r6
 8081480:	f7ff fec8 	bl	8081214 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 8081484:	6930      	ldr	r0, [r6, #16]
 8081486:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 808148a:	b108      	cbz	r0, 8081490 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 808148c:	f001 fe0e 	bl	80830ac <strdup>
 8081490:	6128      	str	r0, [r5, #16]
 8081492:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8081494:	6025      	str	r5, [r4, #0]
 8081496:	e00c      	b.n	80814b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8081498:	6804      	ldr	r4, [r0, #0]
 808149a:	b154      	cbz	r4, 80814b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 808149c:	f104 0010 	add.w	r0, r4, #16
 80814a0:	f7ff fe2a 	bl	80810f8 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80814a4:	4620      	mov	r0, r4
 80814a6:	f7ff fd34 	bl	8080f12 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80814aa:	2118      	movs	r1, #24
 80814ac:	4620      	mov	r0, r4
 80814ae:	f000 fc76 	bl	8081d9e <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80814b2:	2000      	movs	r0, #0
 80814b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080814b6 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80814b6:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80814b8:	2300      	movs	r3, #0
 80814ba:	6083      	str	r3, [r0, #8]
 80814bc:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80814be:	4604      	mov	r4, r0
 80814c0:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80814c2:	b12b      	cbz	r3, 80814d0 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80814c4:	2202      	movs	r2, #2
 80814c6:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80814c8:	68eb      	ldr	r3, [r5, #12]
 80814ca:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80814cc:	68ab      	ldr	r3, [r5, #8]
 80814ce:	60a3      	str	r3, [r4, #8]
	}
    }
 80814d0:	4620      	mov	r0, r4
 80814d2:	bd38      	pop	{r3, r4, r5, pc}

080814d4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80814d4:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80814d6:	b570      	push	{r4, r5, r6, lr}
 80814d8:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80814da:	d006      	beq.n	80814ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 80814dc:	2a03      	cmp	r2, #3
 80814de:	d011      	beq.n	8081504 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 80814e0:	2a01      	cmp	r2, #1
 80814e2:	d118      	bne.n	8081516 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80814e4:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80814e6:	6003      	str	r3, [r0, #0]
	      break;
 80814e8:	e015      	b.n	8081516 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80814ea:	2014      	movs	r0, #20
 80814ec:	680e      	ldr	r6, [r1, #0]
 80814ee:	f7fe fdd6 	bl	808009e <_Znwj>
 80814f2:	4605      	mov	r5, r0
 80814f4:	b120      	cbz	r0, 8081500 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80814f6:	4631      	mov	r1, r6
 80814f8:	f7ff ffdd 	bl	80814b6 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80814fc:	7c33      	ldrb	r3, [r6, #16]
 80814fe:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8081500:	6025      	str	r5, [r4, #0]
 8081502:	e008      	b.n	8081516 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8081504:	6804      	ldr	r4, [r0, #0]
 8081506:	b134      	cbz	r4, 8081516 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8081508:	4620      	mov	r0, r4
 808150a:	f7ff fd02 	bl	8080f12 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 808150e:	2114      	movs	r1, #20
 8081510:	4620      	mov	r0, r4
 8081512:	f000 fc44 	bl	8081d9e <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8081516:	2000      	movs	r0, #0
 8081518:	bd70      	pop	{r4, r5, r6, pc}
	...

0808151c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 808151c:	b5f0      	push	{r4, r5, r6, r7, lr}
 808151e:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 8081520:	f3bf 8f5f 	dmb	sy
 8081524:	b087      	sub	sp, #28
 8081526:	2300      	movs	r3, #0
 8081528:	e850 6f00 	ldrex	r6, [r0]
 808152c:	e840 3200 	strex	r2, r3, [r0]
 8081530:	2a00      	cmp	r2, #0
 8081532:	d1f9      	bne.n	8081528 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 8081534:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 8081538:	2e00      	cmp	r6, #0
 808153a:	d03f      	beq.n	80815bc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 808153c:	4618      	mov	r0, r3
 808153e:	f7ff f8f7 	bl	8080730 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 8081542:	4607      	mov	r7, r0
 8081544:	b120      	cbz	r0, 8081550 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8081546:	4621      	mov	r1, r4
 8081548:	4630      	mov	r0, r6
 808154a:	f7ff fe53 	bl	80811f4 <_ZNKSt8functionIFvRKbEEclES1_>
 808154e:	e02e      	b.n	80815ae <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8081550:	4631      	mov	r1, r6
 8081552:	a801      	add	r0, sp, #4
 8081554:	f7ff ffaf 	bl	80814b6 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8081558:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 808155a:	2010      	movs	r0, #16
 808155c:	f88d 3014 	strb.w	r3, [sp, #20]
 8081560:	f7fe fd9d 	bl	808009e <_Znwj>
 8081564:	4605      	mov	r5, r0
 8081566:	b1d0      	cbz	r0, 808159e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8081568:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808156a:	2014      	movs	r0, #20
 808156c:	f7fe fd97 	bl	808009e <_Znwj>
 8081570:	4604      	mov	r4, r0
 8081572:	b178      	cbz	r0, 8081594 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8081574:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8081576:	4601      	mov	r1, r0
 8081578:	a801      	add	r0, sp, #4
 808157a:	f7ff fcd9 	bl	8080f30 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808157e:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 8081580:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8081582:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081584:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 8081586:	9203      	str	r2, [sp, #12]
 8081588:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 808158a:	60e3      	str	r3, [r4, #12]
 808158c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8081590:	9204      	str	r2, [sp, #16]
 8081592:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8081594:	4b0a      	ldr	r3, [pc, #40]	; (80815c0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8081596:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8081598:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 808159a:	4b0a      	ldr	r3, [pc, #40]	; (80815c4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 808159c:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808159e:	a801      	add	r0, sp, #4
 80815a0:	f7ff fcb7 	bl	8080f12 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80815a4:	2200      	movs	r2, #0
 80815a6:	4629      	mov	r1, r5
 80815a8:	4807      	ldr	r0, [pc, #28]	; (80815c8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 80815aa:	f7ff f8c9 	bl	8080740 <application_thread_invoke>
 80815ae:	4630      	mov	r0, r6
 80815b0:	f7ff fcaf 	bl	8080f12 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80815b4:	2110      	movs	r1, #16
 80815b6:	4630      	mov	r0, r6
 80815b8:	f000 fbf1 	bl	8081d9e <_ZdlPvj>
        }
    }
 80815bc:	b007      	add	sp, #28
 80815be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80815c0:	08081207 	.word	0x08081207
 80815c4:	080814d5 	.word	0x080814d5
 80815c8:	08081a61 	.word	0x08081a61

080815cc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80815cc:	b530      	push	{r4, r5, lr}
 80815ce:	4604      	mov	r4, r0
 80815d0:	b085      	sub	sp, #20
 80815d2:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80815d4:	4668      	mov	r0, sp
 80815d6:	4611      	mov	r1, r2
 80815d8:	f7ff fdc9 	bl	808116e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80815dc:	b17c      	cbz	r4, 80815fe <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 80815de:	b224      	sxth	r4, r4
 80815e0:	4628      	mov	r0, r5
 80815e2:	b10d      	cbz	r5, 80815e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 80815e4:	f001 fd62 	bl	80830ac <strdup>
 80815e8:	9002      	str	r0, [sp, #8]
 80815ea:	a902      	add	r1, sp, #8
 80815ec:	4668      	mov	r0, sp
 80815ee:	f8ad 400c 	strh.w	r4, [sp, #12]
 80815f2:	f7ff fe1f 	bl	8081234 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80815f6:	a802      	add	r0, sp, #8
 80815f8:	f7ff fd7e 	bl	80810f8 <_ZN8particle5ErrorD1Ev>
 80815fc:	e01d      	b.n	808163a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80815fe:	f04f 0201 	mov.w	r2, #1
 8081602:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 8081604:	f88d 4008 	strb.w	r4, [sp, #8]
 8081608:	e8d0 3f4f 	ldrexb	r3, [r0]
 808160c:	42a3      	cmp	r3, r4
 808160e:	d103      	bne.n	8081618 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 8081610:	e8c0 2f41 	strexb	r1, r2, [r0]
 8081614:	2900      	cmp	r1, #0
 8081616:	d1f7      	bne.n	8081608 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 8081618:	d002      	beq.n	8081620 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 808161a:	f88d 3008 	strb.w	r3, [sp, #8]
 808161e:	e00c      	b.n	808163a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 8081620:	f110 010c 	adds.w	r1, r0, #12
 8081624:	f04f 0301 	mov.w	r3, #1
 8081628:	bf18      	it	ne
 808162a:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 808162c:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 8081630:	3004      	adds	r0, #4
 8081632:	f800 3c03 	strb.w	r3, [r0, #-3]
 8081636:	f7ff ff71 	bl	808151c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 808163a:	a801      	add	r0, sp, #4
 808163c:	f7fe fdca 	bl	80801d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 8081640:	b005      	add	sp, #20
 8081642:	bd30      	pop	{r4, r5, pc}

08081644 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 8081644:	4770      	bx	lr

08081646 <_ZN9IPAddressD0Ev>:
 8081646:	b510      	push	{r4, lr}
 8081648:	4604      	mov	r4, r0
 808164a:	2108      	movs	r1, #8
 808164c:	f000 fba7 	bl	8081d9e <_ZdlPvj>
 8081650:	4620      	mov	r0, r4
 8081652:	bd10      	pop	{r4, pc}

08081654 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 8081654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081656:	460f      	mov	r7, r1
 8081658:	f100 0608 	add.w	r6, r0, #8
 808165c:	1d05      	adds	r5, r0, #4
 808165e:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8081660:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8081664:	220a      	movs	r2, #10
 8081666:	4638      	mov	r0, r7
 8081668:	f7ff fb55 	bl	8080d16 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 808166c:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 808166e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8081670:	d007      	beq.n	8081682 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 8081672:	2c00      	cmp	r4, #0
 8081674:	d0f4      	beq.n	8081660 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 8081676:	212e      	movs	r1, #46	; 0x2e
 8081678:	4638      	mov	r0, r7
 808167a:	f7ff fb09 	bl	8080c90 <_ZN5Print5printEc>
 808167e:	4404      	add	r4, r0
 8081680:	e7ee      	b.n	8081660 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 8081682:	4620      	mov	r0, r4
 8081684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08081688 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 8081688:	4a02      	ldr	r2, [pc, #8]	; (8081694 <_ZN9IPAddressC1Ev+0xc>)
 808168a:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 808168c:	2200      	movs	r2, #0
 808168e:	6042      	str	r2, [r0, #4]
{
    clear();
}
 8081690:	4770      	bx	lr
 8081692:	bf00      	nop
 8081694:	08083330 	.word	0x08083330

08081698 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 8081698:	4a02      	ldr	r2, [pc, #8]	; (80816a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 808169a:	6002      	str	r2, [r0, #0]
{
    memcpy(&this->address, &address, sizeof(address));
 808169c:	680a      	ldr	r2, [r1, #0]
 808169e:	6042      	str	r2, [r0, #4]
}
 80816a0:	4770      	bx	lr
 80816a2:	bf00      	nop
 80816a4:	08083330 	.word	0x08083330

080816a8 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80816a8:	4a01      	ldr	r2, [pc, #4]	; (80816b0 <_ZN9IPAddressC1Em+0x8>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80816aa:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80816ac:	6002      	str	r2, [r0, #0]
{
    *this = address;
}
 80816ae:	4770      	bx	lr
 80816b0:	08083330 	.word	0x08083330

080816b4 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80816b4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80816b6:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80816ba:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80816be:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80816c2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80816c6:	6041      	str	r1, [r0, #4]
 80816c8:	bd10      	pop	{r4, pc}
	...

080816cc <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80816cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80816ce:	4d04      	ldr	r5, [pc, #16]	; (80816e0 <_ZN9IPAddressC1Ehhhh+0x14>)
 80816d0:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80816d2:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80816d6:	9500      	str	r5, [sp, #0]
 80816d8:	f7ff ffec 	bl	80816b4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80816dc:	b003      	add	sp, #12
 80816de:	bd30      	pop	{r4, r5, pc}
 80816e0:	08083330 	.word	0x08083330

080816e4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80816e4:	7441      	strb	r1, [r0, #17]
 80816e6:	4770      	bx	lr

080816e8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80816e8:	4770      	bx	lr

080816ea <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80816ea:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80816ec:	2100      	movs	r1, #0
 80816ee:	7c00      	ldrb	r0, [r0, #16]
 80816f0:	f7fe fff6 	bl	80806e0 <HAL_USB_USART_Receive_Data>
}
 80816f4:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80816f8:	bf28      	it	cs
 80816fa:	f04f 30ff 	movcs.w	r0, #4294967295
 80816fe:	bd08      	pop	{r3, pc}

08081700 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 8081700:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 8081702:	2101      	movs	r1, #1
 8081704:	7c00      	ldrb	r0, [r0, #16]
 8081706:	f7fe ffeb 	bl	80806e0 <HAL_USB_USART_Receive_Data>
}
 808170a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 808170e:	bf28      	it	cs
 8081710:	f04f 30ff 	movcs.w	r0, #4294967295
 8081714:	bd08      	pop	{r3, pc}

08081716 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 8081716:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 8081718:	7c00      	ldrb	r0, [r0, #16]
 808171a:	f7fe ffd9 	bl	80806d0 <HAL_USB_USART_Available_Data_For_Write>
}
 808171e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8081722:	bd08      	pop	{r3, pc}

08081724 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 8081724:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 8081726:	7c00      	ldrb	r0, [r0, #16]
 8081728:	f7fe ffca 	bl	80806c0 <HAL_USB_USART_Available_Data>
}
 808172c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8081730:	bd08      	pop	{r3, pc}

08081732 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 8081732:	7c00      	ldrb	r0, [r0, #16]
 8081734:	f7fe bfe4 	b.w	8080700 <HAL_USB_USART_Flush_Data>

08081738 <_ZN9USBSerialD0Ev>:
 8081738:	b510      	push	{r4, lr}
 808173a:	4604      	mov	r4, r0
 808173c:	2114      	movs	r1, #20
 808173e:	f000 fb2e 	bl	8081d9e <_ZdlPvj>
 8081742:	4620      	mov	r0, r4
 8081744:	bd10      	pop	{r4, pc}

08081746 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 8081746:	b538      	push	{r3, r4, r5, lr}
 8081748:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 808174a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 808174c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 808174e:	f7fe ffbf 	bl	80806d0 <HAL_USB_USART_Available_Data_For_Write>
 8081752:	2800      	cmp	r0, #0
 8081754:	dc01      	bgt.n	808175a <_ZN9USBSerial5writeEh+0x14>
 8081756:	7c60      	ldrb	r0, [r4, #17]
 8081758:	b128      	cbz	r0, 8081766 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 808175a:	4629      	mov	r1, r5
 808175c:	7c20      	ldrb	r0, [r4, #16]
 808175e:	f7fe ffc7 	bl	80806f0 <HAL_USB_USART_Send_Data>
 8081762:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 8081766:	bd38      	pop	{r3, r4, r5, pc}

08081768 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8081768:	b510      	push	{r4, lr}
 808176a:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 808176c:	2300      	movs	r3, #0
 808176e:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8081770:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8081774:	60a3      	str	r3, [r4, #8]
 8081776:	4b05      	ldr	r3, [pc, #20]	; (808178c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 8081778:	4608      	mov	r0, r1
 808177a:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 808177c:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 808177e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 8081780:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 8081782:	4611      	mov	r1, r2
 8081784:	f7fe ff94 	bl	80806b0 <HAL_USB_USART_Init>
}
 8081788:	4620      	mov	r0, r4
 808178a:	bd10      	pop	{r4, pc}
 808178c:	08083344 	.word	0x08083344

08081790 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 8081790:	b510      	push	{r4, lr}
 8081792:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8081794:	2214      	movs	r2, #20
 8081796:	2100      	movs	r1, #0
 8081798:	f001 fc4f 	bl	808303a <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 808179c:	4b05      	ldr	r3, [pc, #20]	; (80817b4 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 808179e:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80817a0:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80817a2:	4b05      	ldr	r3, [pc, #20]	; (80817b8 <_Z19acquireSerialBufferv+0x28>)
 80817a4:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80817a6:	f240 1301 	movw	r3, #257	; 0x101
 80817aa:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80817ac:	2381      	movs	r3, #129	; 0x81
 80817ae:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80817b0:	bd10      	pop	{r4, pc}
 80817b2:	bf00      	nop
 80817b4:	20000131 	.word	0x20000131
 80817b8:	200000b0 	.word	0x200000b0

080817bc <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80817bc:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80817be:	4d0e      	ldr	r5, [pc, #56]	; (80817f8 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80817c0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80817c2:	a801      	add	r0, sp, #4
 80817c4:	f7ff ffe4 	bl	8081790 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80817c8:	6829      	ldr	r1, [r5, #0]
 80817ca:	f011 0401 	ands.w	r4, r1, #1
 80817ce:	d110      	bne.n	80817f2 <_Z16_fetch_usbserialv+0x36>
 80817d0:	4628      	mov	r0, r5
 80817d2:	f7fe fc68 	bl	80800a6 <__cxa_guard_acquire>
 80817d6:	b160      	cbz	r0, 80817f2 <_Z16_fetch_usbserialv+0x36>
 80817d8:	aa01      	add	r2, sp, #4
 80817da:	4621      	mov	r1, r4
 80817dc:	4807      	ldr	r0, [pc, #28]	; (80817fc <_Z16_fetch_usbserialv+0x40>)
 80817de:	f7ff ffc3 	bl	8081768 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80817e2:	4628      	mov	r0, r5
 80817e4:	f7fe fc64 	bl	80800b0 <__cxa_guard_release>
 80817e8:	4a05      	ldr	r2, [pc, #20]	; (8081800 <_Z16_fetch_usbserialv+0x44>)
 80817ea:	4906      	ldr	r1, [pc, #24]	; (8081804 <_Z16_fetch_usbserialv+0x48>)
 80817ec:	4803      	ldr	r0, [pc, #12]	; (80817fc <_Z16_fetch_usbserialv+0x40>)
 80817ee:	f000 fad1 	bl	8081d94 <__aeabi_atexit>
	return _usbserial;
}
 80817f2:	4802      	ldr	r0, [pc, #8]	; (80817fc <_Z16_fetch_usbserialv+0x40>)
 80817f4:	b007      	add	sp, #28
 80817f6:	bd30      	pop	{r4, r5, pc}
 80817f8:	200000ac 	.word	0x200000ac
 80817fc:	20000234 	.word	0x20000234
 8081800:	2000006c 	.word	0x2000006c
 8081804:	080816e9 	.word	0x080816e9

08081808 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 8081808:	b510      	push	{r4, lr}
 808180a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 808180c:	2214      	movs	r2, #20
 808180e:	2100      	movs	r1, #0
 8081810:	f001 fc13 	bl	808303a <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8081814:	4b05      	ldr	r3, [pc, #20]	; (808182c <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8081816:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8081818:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 808181a:	4b05      	ldr	r3, [pc, #20]	; (8081830 <_Z23acquireUSBSerial1Bufferv+0x28>)
 808181c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 808181e:	f240 1301 	movw	r3, #257	; 0x101
 8081822:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8081824:	2381      	movs	r3, #129	; 0x81
 8081826:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 8081828:	bd10      	pop	{r4, pc}
 808182a:	bf00      	nop
 808182c:	200002e4 	.word	0x200002e4
 8081830:	2000024c 	.word	0x2000024c

08081834 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 8081834:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8081836:	4c0e      	ldr	r4, [pc, #56]	; (8081870 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 8081838:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 808183a:	a801      	add	r0, sp, #4
 808183c:	f7ff ffe4 	bl	8081808 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8081840:	6823      	ldr	r3, [r4, #0]
 8081842:	07db      	lsls	r3, r3, #31
 8081844:	d410      	bmi.n	8081868 <_Z17_fetch_usbserial1v+0x34>
 8081846:	4620      	mov	r0, r4
 8081848:	f7fe fc2d 	bl	80800a6 <__cxa_guard_acquire>
 808184c:	b160      	cbz	r0, 8081868 <_Z17_fetch_usbserial1v+0x34>
 808184e:	aa01      	add	r2, sp, #4
 8081850:	2101      	movs	r1, #1
 8081852:	4808      	ldr	r0, [pc, #32]	; (8081874 <_Z17_fetch_usbserial1v+0x40>)
 8081854:	f7ff ff88 	bl	8081768 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8081858:	4620      	mov	r0, r4
 808185a:	f7fe fc29 	bl	80800b0 <__cxa_guard_release>
 808185e:	4a06      	ldr	r2, [pc, #24]	; (8081878 <_Z17_fetch_usbserial1v+0x44>)
 8081860:	4906      	ldr	r1, [pc, #24]	; (808187c <_Z17_fetch_usbserial1v+0x48>)
 8081862:	4804      	ldr	r0, [pc, #16]	; (8081874 <_Z17_fetch_usbserial1v+0x40>)
 8081864:	f000 fa96 	bl	8081d94 <__aeabi_atexit>
  return _usbserial1;
}
 8081868:	4802      	ldr	r0, [pc, #8]	; (8081874 <_Z17_fetch_usbserial1v+0x40>)
 808186a:	b006      	add	sp, #24
 808186c:	bd10      	pop	{r4, pc}
 808186e:	bf00      	nop
 8081870:	20000248 	.word	0x20000248
 8081874:	200002d0 	.word	0x200002d0
 8081878:	2000006c 	.word	0x2000006c
 808187c:	080816e9 	.word	0x080816e9

08081880 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 8081880:	2200      	movs	r2, #0
 8081882:	4611      	mov	r1, r2
 8081884:	6840      	ldr	r0, [r0, #4]
 8081886:	f7fe bf8f 	b.w	80807a8 <network_ready>

0808188a <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 808188a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    {
        HAL_IPAddress ip = {0};
 808188e:	2600      	movs	r6, #0
 8081890:	ac04      	add	r4, sp, #16
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8081892:	4605      	mov	r5, r0
    {
        HAL_IPAddress ip = {0};
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8081894:	4610      	mov	r0, r2
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8081896:	4688      	mov	r8, r1
 8081898:	4617      	mov	r7, r2
    {
        HAL_IPAddress ip = {0};
 808189a:	f844 6d04 	str.w	r6, [r4, #-4]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808189e:	f001 fc20 	bl	80830e2 <strlen>
 80818a2:	9600      	str	r6, [sp, #0]
 80818a4:	b281      	uxth	r1, r0
 80818a6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80818aa:	4622      	mov	r2, r4
 80818ac:	4638      	mov	r0, r7
 80818ae:	f7fe fef7 	bl	80806a0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80818b2:	b120      	cbz	r0, 80818be <_ZN5spark13CellularClass7resolveEPKc+0x34>
 80818b4:	4631      	mov	r1, r6
 80818b6:	4628      	mov	r0, r5
 80818b8:	f7ff fef6 	bl	80816a8 <_ZN9IPAddressC1Em>
 80818bc:	e003      	b.n	80818c6 <_ZN5spark13CellularClass7resolveEPKc+0x3c>
 80818be:	4621      	mov	r1, r4
 80818c0:	4628      	mov	r0, r5
 80818c2:	f7ff fee9 	bl	8081698 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80818c6:	4628      	mov	r0, r5
 80818c8:	b004      	add	sp, #16
 80818ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080818ce <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80818ce:	2200      	movs	r2, #0
 80818d0:	4611      	mov	r1, r2
 80818d2:	6840      	ldr	r0, [r0, #4]
 80818d4:	f7fe bf88 	b.w	80807e8 <network_listening>

080818d8 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80818d8:	2200      	movs	r2, #0
 80818da:	4611      	mov	r1, r2
 80818dc:	6840      	ldr	r0, [r0, #4]
 80818de:	f7fe bf93 	b.w	8080808 <network_get_listen_timeout>

080818e2 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80818e2:	2200      	movs	r2, #0
 80818e4:	6840      	ldr	r0, [r0, #4]
 80818e6:	f7fe bf87 	b.w	80807f8 <network_set_listen_timeout>

080818ea <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80818ea:	2200      	movs	r2, #0
 80818ec:	f081 0101 	eor.w	r1, r1, #1
 80818f0:	6840      	ldr	r0, [r0, #4]
 80818f2:	f7fe bf71 	b.w	80807d8 <network_listen>

080818f6 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 80818f6:	2300      	movs	r3, #0
 80818f8:	461a      	mov	r2, r3
 80818fa:	4619      	mov	r1, r3
 80818fc:	6840      	ldr	r0, [r0, #4]
 80818fe:	f7fe bf63 	b.w	80807c8 <network_off>

08081902 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 8081902:	2300      	movs	r3, #0
 8081904:	461a      	mov	r2, r3
 8081906:	4619      	mov	r1, r3
 8081908:	6840      	ldr	r0, [r0, #4]
 808190a:	f7fe bf55 	b.w	80807b8 <network_on>

0808190e <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 808190e:	2200      	movs	r2, #0
 8081910:	4611      	mov	r1, r2
 8081912:	6840      	ldr	r0, [r0, #4]
 8081914:	f7fe bf38 	b.w	8080788 <network_connecting>

08081918 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 8081918:	2200      	movs	r2, #0
 808191a:	2102      	movs	r1, #2
 808191c:	6840      	ldr	r0, [r0, #4]
 808191e:	f7fe bf3b 	b.w	8080798 <network_disconnect>

08081922 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 8081922:	2300      	movs	r3, #0
 8081924:	461a      	mov	r2, r3
 8081926:	6840      	ldr	r0, [r0, #4]
 8081928:	f7fe bf26 	b.w	8080778 <network_connect>

0808192c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 808192c:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 808192e:	4c08      	ldr	r4, [pc, #32]	; (8081950 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 8081930:	2528      	movs	r5, #40	; 0x28
 8081932:	462a      	mov	r2, r5
 8081934:	2100      	movs	r1, #0
 8081936:	4620      	mov	r0, r4
 8081938:	f001 fb7f 	bl	808303a <memset>
        cid = -1;
 808193c:	f04f 33ff 	mov.w	r3, #4294967295
 8081940:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 8081942:	4b04      	ldr	r3, [pc, #16]	; (8081954 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
 8081944:	2204      	movs	r2, #4
 8081946:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 8081948:	4a03      	ldr	r2, [pc, #12]	; (8081958 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
        size = sizeof(*this);
 808194a:	8025      	strh	r5, [r4, #0]
 808194c:	601a      	str	r2, [r3, #0]
 808194e:	bd38      	pop	{r3, r4, r5, pc}
 8081950:	200003f0 	.word	0x200003f0
 8081954:	200003e8 	.word	0x200003e8
 8081958:	08083374 	.word	0x08083374

0808195c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 808195c:	4770      	bx	lr

0808195e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 808195e:	7441      	strb	r1, [r0, #17]
 8081960:	4770      	bx	lr

08081962 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 8081962:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 8081964:	7c00      	ldrb	r0, [r0, #16]
 8081966:	f7fe fe5b 	bl	8080620 <HAL_USART_Available_Data_For_Write>
}
 808196a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808196e:	bd08      	pop	{r3, pc}

08081970 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 8081970:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 8081972:	7c00      	ldrb	r0, [r0, #16]
 8081974:	f7fe fe2c 	bl	80805d0 <HAL_USART_Available_Data>
}
 8081978:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808197c:	bd08      	pop	{r3, pc}

0808197e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 808197e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 8081980:	7c00      	ldrb	r0, [r0, #16]
 8081982:	f7fe fe35 	bl	80805f0 <HAL_USART_Peek_Data>
}
 8081986:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 808198a:	bf28      	it	cs
 808198c:	f04f 30ff 	movcs.w	r0, #4294967295
 8081990:	bd08      	pop	{r3, pc}

08081992 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 8081992:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 8081994:	7c00      	ldrb	r0, [r0, #16]
 8081996:	f7fe fe23 	bl	80805e0 <HAL_USART_Read_Data>
}
 808199a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 808199e:	bf28      	it	cs
 80819a0:	f04f 30ff 	movcs.w	r0, #4294967295
 80819a4:	bd08      	pop	{r3, pc}

080819a6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80819a6:	7c00      	ldrb	r0, [r0, #16]
 80819a8:	f7fe be2a 	b.w	8080600 <HAL_USART_Flush_Data>

080819ac <_ZN11USARTSerialD0Ev>:
 80819ac:	b510      	push	{r4, lr}
 80819ae:	4604      	mov	r4, r0
 80819b0:	2114      	movs	r1, #20
 80819b2:	f000 f9f4 	bl	8081d9e <_ZdlPvj>
 80819b6:	4620      	mov	r0, r4
 80819b8:	bd10      	pop	{r4, pc}

080819ba <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80819ba:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80819bc:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80819be:	4604      	mov	r4, r0
 80819c0:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80819c2:	b925      	cbnz	r5, 80819ce <_ZN11USARTSerial5writeEh+0x14>
 80819c4:	7c00      	ldrb	r0, [r0, #16]
 80819c6:	f7fe fe2b 	bl	8080620 <HAL_USART_Available_Data_For_Write>
 80819ca:	2800      	cmp	r0, #0
 80819cc:	dd05      	ble.n	80819da <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80819ce:	4631      	mov	r1, r6
 80819d0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80819d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80819d6:	f7fe bdf3 	b.w	80805c0 <HAL_USART_Write_Data>
  }
  return 0;
}
 80819da:	4628      	mov	r0, r5
 80819dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080819e0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80819e0:	b510      	push	{r4, lr}
 80819e2:	4604      	mov	r4, r0
 80819e4:	4608      	mov	r0, r1
 80819e6:	4611      	mov	r1, r2
 80819e8:	2200      	movs	r2, #0
 80819ea:	6062      	str	r2, [r4, #4]
 80819ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80819f0:	60a2      	str	r2, [r4, #8]
 80819f2:	4a05      	ldr	r2, [pc, #20]	; (8081a08 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80819f4:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80819f6:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80819f8:	2201      	movs	r2, #1
 80819fa:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80819fc:	461a      	mov	r2, r3
 80819fe:	f7fe fdd7 	bl	80805b0 <HAL_USART_Init>
}
 8081a02:	4620      	mov	r0, r4
 8081a04:	bd10      	pop	{r4, pc}
 8081a06:	bf00      	nop
 8081a08:	080833a8 	.word	0x080833a8

08081a0c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 8081a0c:	7c00      	ldrb	r0, [r0, #16]
 8081a0e:	f7fe bdff 	b.w	8080610 <HAL_USART_Is_Enabled>
	...

08081a14 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 8081a14:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 8081a16:	4d0c      	ldr	r5, [pc, #48]	; (8081a48 <_Z22__fetch_global_Serial1v+0x34>)
 8081a18:	6829      	ldr	r1, [r5, #0]
 8081a1a:	f011 0401 	ands.w	r4, r1, #1
 8081a1e:	d111      	bne.n	8081a44 <_Z22__fetch_global_Serial1v+0x30>
 8081a20:	4628      	mov	r0, r5
 8081a22:	f7fe fb40 	bl	80800a6 <__cxa_guard_acquire>
 8081a26:	b168      	cbz	r0, 8081a44 <_Z22__fetch_global_Serial1v+0x30>
 8081a28:	4a08      	ldr	r2, [pc, #32]	; (8081a4c <_Z22__fetch_global_Serial1v+0x38>)
 8081a2a:	4621      	mov	r1, r4
 8081a2c:	4b08      	ldr	r3, [pc, #32]	; (8081a50 <_Z22__fetch_global_Serial1v+0x3c>)
 8081a2e:	4809      	ldr	r0, [pc, #36]	; (8081a54 <_Z22__fetch_global_Serial1v+0x40>)
 8081a30:	f7ff ffd6 	bl	80819e0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 8081a34:	4628      	mov	r0, r5
 8081a36:	f7fe fb3b 	bl	80800b0 <__cxa_guard_release>
 8081a3a:	4a07      	ldr	r2, [pc, #28]	; (8081a58 <_Z22__fetch_global_Serial1v+0x44>)
 8081a3c:	4907      	ldr	r1, [pc, #28]	; (8081a5c <_Z22__fetch_global_Serial1v+0x48>)
 8081a3e:	4805      	ldr	r0, [pc, #20]	; (8081a54 <_Z22__fetch_global_Serial1v+0x40>)
 8081a40:	f000 f9a8 	bl	8081d94 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 8081a44:	4803      	ldr	r0, [pc, #12]	; (8081a54 <_Z22__fetch_global_Serial1v+0x40>)
 8081a46:	bd38      	pop	{r3, r4, r5, pc}
 8081a48:	200004b0 	.word	0x200004b0
 8081a4c:	200004b4 	.word	0x200004b4
 8081a50:	2000042c 	.word	0x2000042c
 8081a54:	20000418 	.word	0x20000418
 8081a58:	2000006c 	.word	0x2000006c
 8081a5c:	0808195d 	.word	0x0808195d

08081a60 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 8081a60:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8081a62:	6883      	ldr	r3, [r0, #8]
 8081a64:	4604      	mov	r4, r0
 8081a66:	b90b      	cbnz	r3, 8081a6c <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 8081a68:	f000 f99b 	bl	8081da2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8081a6c:	68c3      	ldr	r3, [r0, #12]
 8081a6e:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 8081a70:	68a3      	ldr	r3, [r4, #8]
 8081a72:	b11b      	cbz	r3, 8081a7c <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8081a74:	2203      	movs	r2, #3
 8081a76:	4621      	mov	r1, r4
 8081a78:	4620      	mov	r0, r4
 8081a7a:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8081a7c:	4620      	mov	r0, r4
}
 8081a7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8081a82:	2110      	movs	r1, #16
 8081a84:	f000 b98b 	b.w	8081d9e <_ZdlPvj>

08081a88 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 8081a88:	4770      	bx	lr

08081a8a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 8081a8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081a8c:	4606      	mov	r6, r0
 8081a8e:	4615      	mov	r5, r2
 8081a90:	460c      	mov	r4, r1
 8081a92:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8081a94:	42bc      	cmp	r4, r7
 8081a96:	d006      	beq.n	8081aa6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 8081a98:	6833      	ldr	r3, [r6, #0]
 8081a9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8081a9e:	689b      	ldr	r3, [r3, #8]
 8081aa0:	4630      	mov	r0, r6
 8081aa2:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8081aa4:	e7f6      	b.n	8081a94 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 8081aa6:	4628      	mov	r0, r5
 8081aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08081aaa <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 8081aaa:	2200      	movs	r2, #0
 8081aac:	7c00      	ldrb	r0, [r0, #16]
 8081aae:	f7fe bdbf 	b.w	8080630 <HAL_I2C_Write_Data>

08081ab2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 8081ab2:	2100      	movs	r1, #0
 8081ab4:	7c00      	ldrb	r0, [r0, #16]
 8081ab6:	f7fe bdc3 	b.w	8080640 <HAL_I2C_Available_Data>

08081aba <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 8081aba:	2100      	movs	r1, #0
 8081abc:	7c00      	ldrb	r0, [r0, #16]
 8081abe:	f7fe bdc7 	b.w	8080650 <HAL_I2C_Read_Data>

08081ac2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 8081ac2:	2100      	movs	r1, #0
 8081ac4:	7c00      	ldrb	r0, [r0, #16]
 8081ac6:	f7fe bdcb 	b.w	8080660 <HAL_I2C_Peek_Data>

08081aca <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 8081aca:	2100      	movs	r1, #0
 8081acc:	7c00      	ldrb	r0, [r0, #16]
 8081ace:	f7fe bdcf 	b.w	8080670 <HAL_I2C_Flush_Data>

08081ad2 <_ZN7TwoWireD0Ev>:
 8081ad2:	b510      	push	{r4, lr}
 8081ad4:	4604      	mov	r4, r0
 8081ad6:	2114      	movs	r1, #20
 8081ad8:	f000 f961 	bl	8081d9e <_ZdlPvj>
 8081adc:	4620      	mov	r0, r4
 8081ade:	bd10      	pop	{r4, pc}

08081ae0 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 8081ae0:	b510      	push	{r4, lr}
 8081ae2:	4604      	mov	r4, r0
 8081ae4:	4608      	mov	r0, r1
 8081ae6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8081aea:	60a3      	str	r3, [r4, #8]
 8081aec:	4b04      	ldr	r3, [pc, #16]	; (8081b00 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 8081aee:	2100      	movs	r1, #0
{
  _i2c = i2c;
 8081af0:	7420      	strb	r0, [r4, #16]
 8081af2:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 8081af4:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 8081af6:	f7fe fdcb 	bl	8080690 <HAL_I2C_Init>

}
 8081afa:	4620      	mov	r0, r4
 8081afc:	bd10      	pop	{r4, pc}
 8081afe:	bf00      	nop
 8081b00:	080833d8 	.word	0x080833d8

08081b04 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 8081b04:	2100      	movs	r1, #0
 8081b06:	7c00      	ldrb	r0, [r0, #16]
 8081b08:	f7fe bdba 	b.w	8080680 <HAL_I2C_Is_Enabled>

08081b0c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 8081b0c:	2300      	movs	r3, #0
 8081b0e:	461a      	mov	r2, r3
 8081b10:	6840      	ldr	r0, [r0, #4]
 8081b12:	f7fe be31 	b.w	8080778 <network_connect>

08081b16 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 8081b16:	2200      	movs	r2, #0
 8081b18:	2102      	movs	r1, #2
 8081b1a:	6840      	ldr	r0, [r0, #4]
 8081b1c:	f7fe be3c 	b.w	8080798 <network_disconnect>

08081b20 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 8081b20:	2200      	movs	r2, #0
 8081b22:	4611      	mov	r1, r2
 8081b24:	6840      	ldr	r0, [r0, #4]
 8081b26:	f7fe be2f 	b.w	8080788 <network_connecting>

08081b2a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 8081b2a:	2200      	movs	r2, #0
 8081b2c:	4611      	mov	r1, r2
 8081b2e:	6840      	ldr	r0, [r0, #4]
 8081b30:	f7fe be3a 	b.w	80807a8 <network_ready>

08081b34 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 8081b34:	2300      	movs	r3, #0
 8081b36:	461a      	mov	r2, r3
 8081b38:	4619      	mov	r1, r3
 8081b3a:	6840      	ldr	r0, [r0, #4]
 8081b3c:	f7fe be3c 	b.w	80807b8 <network_on>

08081b40 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 8081b40:	2300      	movs	r3, #0
 8081b42:	461a      	mov	r2, r3
 8081b44:	4619      	mov	r1, r3
 8081b46:	6840      	ldr	r0, [r0, #4]
 8081b48:	f7fe be3e 	b.w	80807c8 <network_off>

08081b4c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 8081b4c:	2200      	movs	r2, #0
 8081b4e:	f081 0101 	eor.w	r1, r1, #1
 8081b52:	6840      	ldr	r0, [r0, #4]
 8081b54:	f7fe be40 	b.w	80807d8 <network_listen>

08081b58 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 8081b58:	2200      	movs	r2, #0
 8081b5a:	6840      	ldr	r0, [r0, #4]
 8081b5c:	f7fe be4c 	b.w	80807f8 <network_set_listen_timeout>

08081b60 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 8081b60:	2200      	movs	r2, #0
 8081b62:	4611      	mov	r1, r2
 8081b64:	6840      	ldr	r0, [r0, #4]
 8081b66:	f7fe be4f 	b.w	8080808 <network_get_listen_timeout>

08081b6a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 8081b6a:	2200      	movs	r2, #0
 8081b6c:	4611      	mov	r1, r2
 8081b6e:	6840      	ldr	r0, [r0, #4]
 8081b70:	f7fe be3a 	b.w	80807e8 <network_listening>

08081b74 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 8081b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8081b76:	4617      	mov	r7, r2
 8081b78:	b087      	sub	sp, #28
 8081b7a:	4605      	mov	r5, r0
    IPAddress addr;
 8081b7c:	a804      	add	r0, sp, #16
 8081b7e:	f7ff fd83 	bl	8081688 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 8081b82:	2600      	movs	r6, #0
 8081b84:	ac06      	add	r4, sp, #24
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8081b86:	4638      	mov	r0, r7
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 8081b88:	f844 6d0c 	str.w	r6, [r4, #-12]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8081b8c:	f001 faa9 	bl	80830e2 <strlen>
 8081b90:	4b0a      	ldr	r3, [pc, #40]	; (8081bbc <_ZN5spark12NetworkClass7resolveEPKc+0x48>)
 8081b92:	9600      	str	r6, [sp, #0]
 8081b94:	b281      	uxth	r1, r0
 8081b96:	685b      	ldr	r3, [r3, #4]
 8081b98:	4622      	mov	r2, r4
 8081b9a:	4638      	mov	r0, r7
 8081b9c:	f7fe fd80 	bl	80806a0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8081ba0:	b120      	cbz	r0, 8081bac <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 8081ba2:	4631      	mov	r1, r6
 8081ba4:	4628      	mov	r0, r5
 8081ba6:	f7ff fd7f 	bl	80816a8 <_ZN9IPAddressC1Em>
 8081baa:	e003      	b.n	8081bb4 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 8081bac:	4621      	mov	r1, r4
 8081bae:	4628      	mov	r0, r5
 8081bb0:	f7ff fd72 	bl	8081698 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 8081bb4:	4628      	mov	r0, r5
 8081bb6:	b007      	add	sp, #28
 8081bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8081bba:	bf00      	nop
 8081bbc:	200003e8 	.word	0x200003e8

08081bc0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 8081bc0:	4b02      	ldr	r3, [pc, #8]	; (8081bcc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 8081bc2:	4a03      	ldr	r2, [pc, #12]	; (8081bd0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 8081bc4:	601a      	str	r2, [r3, #0]
 8081bc6:	2200      	movs	r2, #0
 8081bc8:	605a      	str	r2, [r3, #4]
 8081bca:	4770      	bx	lr
 8081bcc:	20000538 	.word	0x20000538
 8081bd0:	08083400 	.word	0x08083400

08081bd4 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 8081bd4:	b510      	push	{r4, lr}
 8081bd6:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 8081bd8:	480f      	ldr	r0, [pc, #60]	; (8081c18 <pinAvailable+0x44>)
 8081bda:	f7fe fe79 	bl	80808d0 <_ZN8SPIClass9isEnabledEv>
 8081bde:	b128      	cbz	r0, 8081bec <pinAvailable+0x18>
 8081be0:	f1a4 030d 	sub.w	r3, r4, #13
 8081be4:	2b02      	cmp	r3, #2
 8081be6:	d801      	bhi.n	8081bec <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 8081be8:	2000      	movs	r0, #0
 8081bea:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 8081bec:	f000 f8b2 	bl	8081d54 <_Z19__fetch_global_Wirev>
 8081bf0:	f7ff ff88 	bl	8081b04 <_ZN7TwoWire9isEnabledEv>
 8081bf4:	b108      	cbz	r0, 8081bfa <pinAvailable+0x26>
 8081bf6:	2c01      	cmp	r4, #1
 8081bf8:	d9f6      	bls.n	8081be8 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 8081bfa:	f7ff ff0b 	bl	8081a14 <_Z22__fetch_global_Serial1v>
 8081bfe:	f7ff ff05 	bl	8081a0c <_ZN11USARTSerial9isEnabledEv>
 8081c02:	b118      	cbz	r0, 8081c0c <pinAvailable+0x38>
 8081c04:	f1a4 0312 	sub.w	r3, r4, #18
 8081c08:	2b01      	cmp	r3, #1
 8081c0a:	d9ed      	bls.n	8081be8 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 8081c0c:	2c2e      	cmp	r4, #46	; 0x2e
 8081c0e:	bf8c      	ite	hi
 8081c10:	2000      	movhi	r0, #0
 8081c12:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 8081c14:	bd10      	pop	{r4, pc}
 8081c16:	bf00      	nop
 8081c18:	20000540 	.word	0x20000540

08081c1c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8081c1c:	282e      	cmp	r0, #46	; 0x2e
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 8081c1e:	b538      	push	{r3, r4, r5, lr}
 8081c20:	4604      	mov	r4, r0
 8081c22:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8081c24:	d80a      	bhi.n	8081c3c <pinMode+0x20>
 8081c26:	29ff      	cmp	r1, #255	; 0xff
 8081c28:	d008      	beq.n	8081c3c <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 8081c2a:	f7ff ffd3 	bl	8081bd4 <pinAvailable>
 8081c2e:	b128      	cbz	r0, 8081c3c <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 8081c30:	4629      	mov	r1, r5
 8081c32:	4620      	mov	r0, r4
}
 8081c34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 8081c38:	f7fe bc5a 	b.w	80804f0 <HAL_Pin_Mode>
 8081c3c:	bd38      	pop	{r3, r4, r5, pc}

08081c3e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 8081c3e:	b538      	push	{r3, r4, r5, lr}
 8081c40:	4604      	mov	r4, r0
 8081c42:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 8081c44:	f7fe fc5c 	bl	8080500 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 8081c48:	28ff      	cmp	r0, #255	; 0xff
 8081c4a:	d010      	beq.n	8081c6e <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 8081c4c:	2806      	cmp	r0, #6
 8081c4e:	d804      	bhi.n	8081c5a <digitalWrite+0x1c>
 8081c50:	234d      	movs	r3, #77	; 0x4d
 8081c52:	fa23 f000 	lsr.w	r0, r3, r0
 8081c56:	07c3      	lsls	r3, r0, #31
 8081c58:	d409      	bmi.n	8081c6e <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 8081c5a:	4620      	mov	r0, r4
 8081c5c:	f7ff ffba 	bl	8081bd4 <pinAvailable>
 8081c60:	b128      	cbz	r0, 8081c6e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 8081c62:	4629      	mov	r1, r5
 8081c64:	4620      	mov	r0, r4
}
 8081c66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 8081c6a:	f7fe bc51 	b.w	8080510 <HAL_GPIO_Write>
 8081c6e:	bd38      	pop	{r3, r4, r5, pc}

08081c70 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 8081c70:	b510      	push	{r4, lr}
 8081c72:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 8081c74:	f7fe fc44 	bl	8080500 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 8081c78:	3804      	subs	r0, #4
 8081c7a:	b2c0      	uxtb	r0, r0
 8081c7c:	2801      	cmp	r0, #1
 8081c7e:	d908      	bls.n	8081c92 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 8081c80:	4620      	mov	r0, r4
 8081c82:	f7ff ffa7 	bl	8081bd4 <pinAvailable>
 8081c86:	b120      	cbz	r0, 8081c92 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 8081c88:	4620      	mov	r0, r4
}
 8081c8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 8081c8e:	f7fe bc47 	b.w	8080520 <HAL_GPIO_Read>
}
 8081c92:	2000      	movs	r0, #0
 8081c94:	bd10      	pop	{r4, pc}

08081c96 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 8081c96:	b510      	push	{r4, lr}
 8081c98:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 8081c9a:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 8081c9c:	bf9c      	itt	ls
 8081c9e:	340a      	addls	r4, #10
 8081ca0:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 8081ca2:	4620      	mov	r0, r4
 8081ca4:	f7ff ff96 	bl	8081bd4 <pinAvailable>
 8081ca8:	b150      	cbz	r0, 8081cc0 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 8081caa:	2103      	movs	r1, #3
 8081cac:	4620      	mov	r0, r4
 8081cae:	f7fe fc17 	bl	80804e0 <HAL_Validate_Pin_Function>
 8081cb2:	2803      	cmp	r0, #3
 8081cb4:	d104      	bne.n	8081cc0 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 8081cb6:	4620      	mov	r0, r4
}
 8081cb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 8081cbc:	f7fe bc38 	b.w	8080530 <HAL_ADC_Read>
}
 8081cc0:	2000      	movs	r0, #0
 8081cc2:	bd10      	pop	{r4, pc}

08081cc4 <pulseIn>:
 */
uint32_t pulseIn(pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return HAL_Pulse_In(pin, value);
 8081cc4:	f7fe bc3c 	b.w	8080540 <HAL_Pulse_In>

08081cc8 <_GLOBAL__sub_I_SPI>:
#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 8081cc8:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 8081cca:	4e11      	ldr	r6, [pc, #68]	; (8081d10 <_GLOBAL__sub_I_SPI+0x48>)
 8081ccc:	4d11      	ldr	r5, [pc, #68]	; (8081d14 <_GLOBAL__sub_I_SPI+0x4c>)
 8081cce:	4c12      	ldr	r4, [pc, #72]	; (8081d18 <_GLOBAL__sub_I_SPI+0x50>)
 8081cd0:	2100      	movs	r1, #0
 8081cd2:	4630      	mov	r0, r6
 8081cd4:	f7fe fde8 	bl	80808a8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8081cd8:	4630      	mov	r0, r6

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 8081cda:	4e10      	ldr	r6, [pc, #64]	; (8081d1c <_GLOBAL__sub_I_SPI+0x54>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 8081cdc:	462a      	mov	r2, r5
 8081cde:	4621      	mov	r1, r4
 8081ce0:	f000 f858 	bl	8081d94 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 8081ce4:	2101      	movs	r1, #1
 8081ce6:	4630      	mov	r0, r6
 8081ce8:	f7fe fdde 	bl	80808a8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8081cec:	4630      	mov	r0, r6
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 8081cee:	4e0c      	ldr	r6, [pc, #48]	; (8081d20 <_GLOBAL__sub_I_SPI+0x58>)
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 8081cf0:	462a      	mov	r2, r5
 8081cf2:	4621      	mov	r1, r4
 8081cf4:	f000 f84e 	bl	8081d94 <__aeabi_atexit>
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 8081cf8:	2102      	movs	r1, #2
 8081cfa:	4630      	mov	r0, r6
 8081cfc:	f7fe fdd4 	bl	80808a8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8081d00:	462a      	mov	r2, r5
 8081d02:	4621      	mov	r1, r4
 8081d04:	4630      	mov	r0, r6
 8081d06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8081d0a:	f000 b843 	b.w	8081d94 <__aeabi_atexit>
 8081d0e:	bf00      	nop
 8081d10:	20000540 	.word	0x20000540
 8081d14:	2000006c 	.word	0x2000006c
 8081d18:	08080899 	.word	0x08080899
 8081d1c:	20000550 	.word	0x20000550
 8081d20:	20000560 	.word	0x20000560

08081d24 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 8081d24:	b513      	push	{r0, r1, r4, lr}
 8081d26:	4c08      	ldr	r4, [pc, #32]	; (8081d48 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 8081d28:	2300      	movs	r3, #0
 8081d2a:	461a      	mov	r2, r3
 8081d2c:	4619      	mov	r1, r3
 8081d2e:	9300      	str	r3, [sp, #0]
 8081d30:	4620      	mov	r0, r4
 8081d32:	f7ff fccb 	bl	80816cc <_ZN9IPAddressC1Ehhhh>
 8081d36:	4620      	mov	r0, r4
 8081d38:	4a04      	ldr	r2, [pc, #16]	; (8081d4c <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 8081d3a:	4905      	ldr	r1, [pc, #20]	; (8081d50 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 8081d3c:	b002      	add	sp, #8
 8081d3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8081d42:	f000 b827 	b.w	8081d94 <__aeabi_atexit>
 8081d46:	bf00      	nop
 8081d48:	20000574 	.word	0x20000574
 8081d4c:	2000006c 	.word	0x2000006c
 8081d50:	08081645 	.word	0x08081645

08081d54 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 8081d54:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 8081d56:	4d0b      	ldr	r5, [pc, #44]	; (8081d84 <_Z19__fetch_global_Wirev+0x30>)
 8081d58:	6829      	ldr	r1, [r5, #0]
 8081d5a:	f011 0401 	ands.w	r4, r1, #1
 8081d5e:	d10f      	bne.n	8081d80 <_Z19__fetch_global_Wirev+0x2c>
 8081d60:	4628      	mov	r0, r5
 8081d62:	f7fe f9a0 	bl	80800a6 <__cxa_guard_acquire>
 8081d66:	b158      	cbz	r0, 8081d80 <_Z19__fetch_global_Wirev+0x2c>
 8081d68:	4621      	mov	r1, r4
 8081d6a:	4807      	ldr	r0, [pc, #28]	; (8081d88 <_Z19__fetch_global_Wirev+0x34>)
 8081d6c:	f7ff feb8 	bl	8081ae0 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 8081d70:	4628      	mov	r0, r5
 8081d72:	f7fe f99d 	bl	80800b0 <__cxa_guard_release>
 8081d76:	4a05      	ldr	r2, [pc, #20]	; (8081d8c <_Z19__fetch_global_Wirev+0x38>)
 8081d78:	4905      	ldr	r1, [pc, #20]	; (8081d90 <_Z19__fetch_global_Wirev+0x3c>)
 8081d7a:	4803      	ldr	r0, [pc, #12]	; (8081d88 <_Z19__fetch_global_Wirev+0x34>)
 8081d7c:	f000 f80a 	bl	8081d94 <__aeabi_atexit>
	return wire;
}
 8081d80:	4801      	ldr	r0, [pc, #4]	; (8081d88 <_Z19__fetch_global_Wirev+0x34>)
 8081d82:	bd38      	pop	{r3, r4, r5, pc}
 8081d84:	2000057c 	.word	0x2000057c
 8081d88:	20000580 	.word	0x20000580
 8081d8c:	2000006c 	.word	0x2000006c
 8081d90:	08081a89 	.word	0x08081a89

08081d94 <__aeabi_atexit>:
 8081d94:	460b      	mov	r3, r1
 8081d96:	4601      	mov	r1, r0
 8081d98:	4618      	mov	r0, r3
 8081d9a:	f001 b935 	b.w	8083008 <__cxa_atexit>

08081d9e <_ZdlPvj>:
 8081d9e:	f7fe b980 	b.w	80800a2 <_ZdlPv>

08081da2 <_ZSt25__throw_bad_function_callv>:
 8081da2:	b508      	push	{r3, lr}
 8081da4:	f7fe fd68 	bl	8080878 <abort>

08081da8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8081da8:	4b18      	ldr	r3, [pc, #96]	; (8081e0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8081daa:	681a      	ldr	r2, [r3, #0]
 8081dac:	07d1      	lsls	r1, r2, #31
 8081dae:	bf5c      	itt	pl
 8081db0:	2201      	movpl	r2, #1
 8081db2:	601a      	strpl	r2, [r3, #0]
 8081db4:	4b16      	ldr	r3, [pc, #88]	; (8081e10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8081db6:	681a      	ldr	r2, [r3, #0]
 8081db8:	07d2      	lsls	r2, r2, #31
 8081dba:	bf5c      	itt	pl
 8081dbc:	2201      	movpl	r2, #1
 8081dbe:	601a      	strpl	r2, [r3, #0]
 8081dc0:	4b14      	ldr	r3, [pc, #80]	; (8081e14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8081dc2:	681a      	ldr	r2, [r3, #0]
 8081dc4:	07d0      	lsls	r0, r2, #31
 8081dc6:	bf5c      	itt	pl
 8081dc8:	2201      	movpl	r2, #1
 8081dca:	601a      	strpl	r2, [r3, #0]
 8081dcc:	4b12      	ldr	r3, [pc, #72]	; (8081e18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8081dce:	681a      	ldr	r2, [r3, #0]
 8081dd0:	07d1      	lsls	r1, r2, #31
 8081dd2:	bf5c      	itt	pl
 8081dd4:	2201      	movpl	r2, #1
 8081dd6:	601a      	strpl	r2, [r3, #0]
 8081dd8:	4b10      	ldr	r3, [pc, #64]	; (8081e1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8081dda:	681a      	ldr	r2, [r3, #0]
 8081ddc:	07d2      	lsls	r2, r2, #31
 8081dde:	bf5c      	itt	pl
 8081de0:	2201      	movpl	r2, #1
 8081de2:	601a      	strpl	r2, [r3, #0]
 8081de4:	4b0e      	ldr	r3, [pc, #56]	; (8081e20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8081de6:	681a      	ldr	r2, [r3, #0]
 8081de8:	07d0      	lsls	r0, r2, #31
 8081dea:	bf5c      	itt	pl
 8081dec:	2201      	movpl	r2, #1
 8081dee:	601a      	strpl	r2, [r3, #0]
 8081df0:	4b0c      	ldr	r3, [pc, #48]	; (8081e24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8081df2:	681a      	ldr	r2, [r3, #0]
 8081df4:	07d1      	lsls	r1, r2, #31
 8081df6:	bf5c      	itt	pl
 8081df8:	2201      	movpl	r2, #1
 8081dfa:	601a      	strpl	r2, [r3, #0]
 8081dfc:	4b0a      	ldr	r3, [pc, #40]	; (8081e28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8081dfe:	681a      	ldr	r2, [r3, #0]
 8081e00:	07d2      	lsls	r2, r2, #31
 8081e02:	bf5c      	itt	pl
 8081e04:	2201      	movpl	r2, #1
 8081e06:	601a      	strpl	r2, [r3, #0]
 8081e08:	4770      	bx	lr
 8081e0a:	bf00      	nop
 8081e0c:	200005b0 	.word	0x200005b0
 8081e10:	200005ac 	.word	0x200005ac
 8081e14:	200005a8 	.word	0x200005a8
 8081e18:	200005a4 	.word	0x200005a4
 8081e1c:	200005a0 	.word	0x200005a0
 8081e20:	2000059c 	.word	0x2000059c
 8081e24:	20000598 	.word	0x20000598
 8081e28:	20000594 	.word	0x20000594

08081e2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 8081e2c:	4b24      	ldr	r3, [pc, #144]	; (8081ec0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 8081e2e:	681a      	ldr	r2, [r3, #0]
 8081e30:	07d0      	lsls	r0, r2, #31
 8081e32:	bf5c      	itt	pl
 8081e34:	2201      	movpl	r2, #1
 8081e36:	601a      	strpl	r2, [r3, #0]
 8081e38:	4b22      	ldr	r3, [pc, #136]	; (8081ec4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 8081e3a:	681a      	ldr	r2, [r3, #0]
 8081e3c:	07d1      	lsls	r1, r2, #31
 8081e3e:	bf5c      	itt	pl
 8081e40:	2201      	movpl	r2, #1
 8081e42:	601a      	strpl	r2, [r3, #0]
 8081e44:	4b20      	ldr	r3, [pc, #128]	; (8081ec8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 8081e46:	681a      	ldr	r2, [r3, #0]
 8081e48:	07d2      	lsls	r2, r2, #31
 8081e4a:	bf5c      	itt	pl
 8081e4c:	2201      	movpl	r2, #1
 8081e4e:	601a      	strpl	r2, [r3, #0]
 8081e50:	4b1e      	ldr	r3, [pc, #120]	; (8081ecc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 8081e52:	681a      	ldr	r2, [r3, #0]
 8081e54:	07d0      	lsls	r0, r2, #31
 8081e56:	bf5c      	itt	pl
 8081e58:	2201      	movpl	r2, #1
 8081e5a:	601a      	strpl	r2, [r3, #0]
 8081e5c:	4b1c      	ldr	r3, [pc, #112]	; (8081ed0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 8081e5e:	681a      	ldr	r2, [r3, #0]
 8081e60:	07d1      	lsls	r1, r2, #31
 8081e62:	bf5c      	itt	pl
 8081e64:	2201      	movpl	r2, #1
 8081e66:	601a      	strpl	r2, [r3, #0]
 8081e68:	4b1a      	ldr	r3, [pc, #104]	; (8081ed4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 8081e6a:	681a      	ldr	r2, [r3, #0]
 8081e6c:	07d2      	lsls	r2, r2, #31
 8081e6e:	bf5c      	itt	pl
 8081e70:	2201      	movpl	r2, #1
 8081e72:	601a      	strpl	r2, [r3, #0]
 8081e74:	4b18      	ldr	r3, [pc, #96]	; (8081ed8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 8081e76:	681a      	ldr	r2, [r3, #0]
 8081e78:	07d0      	lsls	r0, r2, #31
 8081e7a:	bf5c      	itt	pl
 8081e7c:	2201      	movpl	r2, #1
 8081e7e:	601a      	strpl	r2, [r3, #0]
 8081e80:	4b16      	ldr	r3, [pc, #88]	; (8081edc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 8081e82:	681a      	ldr	r2, [r3, #0]
 8081e84:	07d1      	lsls	r1, r2, #31
 8081e86:	bf5c      	itt	pl
 8081e88:	2201      	movpl	r2, #1
 8081e8a:	601a      	strpl	r2, [r3, #0]
 8081e8c:	4b14      	ldr	r3, [pc, #80]	; (8081ee0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 8081e8e:	681a      	ldr	r2, [r3, #0]
 8081e90:	07d2      	lsls	r2, r2, #31
 8081e92:	bf5c      	itt	pl
 8081e94:	2201      	movpl	r2, #1
 8081e96:	601a      	strpl	r2, [r3, #0]
 8081e98:	4b12      	ldr	r3, [pc, #72]	; (8081ee4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 8081e9a:	681a      	ldr	r2, [r3, #0]
 8081e9c:	07d0      	lsls	r0, r2, #31
 8081e9e:	bf5c      	itt	pl
 8081ea0:	2201      	movpl	r2, #1
 8081ea2:	601a      	strpl	r2, [r3, #0]
 8081ea4:	4b10      	ldr	r3, [pc, #64]	; (8081ee8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 8081ea6:	681a      	ldr	r2, [r3, #0]
 8081ea8:	07d1      	lsls	r1, r2, #31
 8081eaa:	bf5c      	itt	pl
 8081eac:	2201      	movpl	r2, #1
 8081eae:	601a      	strpl	r2, [r3, #0]
 8081eb0:	4b0e      	ldr	r3, [pc, #56]	; (8081eec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 8081eb2:	681a      	ldr	r2, [r3, #0]
 8081eb4:	07d2      	lsls	r2, r2, #31
 8081eb6:	bf5c      	itt	pl
 8081eb8:	2201      	movpl	r2, #1
 8081eba:	601a      	strpl	r2, [r3, #0]
 8081ebc:	4770      	bx	lr
 8081ebe:	bf00      	nop
 8081ec0:	200005e0 	.word	0x200005e0
 8081ec4:	200005dc 	.word	0x200005dc
 8081ec8:	200005d8 	.word	0x200005d8
 8081ecc:	200005d4 	.word	0x200005d4
 8081ed0:	200005d0 	.word	0x200005d0
 8081ed4:	200005cc 	.word	0x200005cc
 8081ed8:	200005c8 	.word	0x200005c8
 8081edc:	200005c4 	.word	0x200005c4
 8081ee0:	200005c0 	.word	0x200005c0
 8081ee4:	200005bc 	.word	0x200005bc
 8081ee8:	200005b8 	.word	0x200005b8
 8081eec:	200005b4 	.word	0x200005b4

08081ef0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 8081ef0:	4b24      	ldr	r3, [pc, #144]	; (8081f84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 8081ef2:	681a      	ldr	r2, [r3, #0]
 8081ef4:	07d0      	lsls	r0, r2, #31
 8081ef6:	bf5c      	itt	pl
 8081ef8:	2201      	movpl	r2, #1
 8081efa:	601a      	strpl	r2, [r3, #0]
 8081efc:	4b22      	ldr	r3, [pc, #136]	; (8081f88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 8081efe:	681a      	ldr	r2, [r3, #0]
 8081f00:	07d1      	lsls	r1, r2, #31
 8081f02:	bf5c      	itt	pl
 8081f04:	2201      	movpl	r2, #1
 8081f06:	601a      	strpl	r2, [r3, #0]
 8081f08:	4b20      	ldr	r3, [pc, #128]	; (8081f8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 8081f0a:	681a      	ldr	r2, [r3, #0]
 8081f0c:	07d2      	lsls	r2, r2, #31
 8081f0e:	bf5c      	itt	pl
 8081f10:	2201      	movpl	r2, #1
 8081f12:	601a      	strpl	r2, [r3, #0]
 8081f14:	4b1e      	ldr	r3, [pc, #120]	; (8081f90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 8081f16:	681a      	ldr	r2, [r3, #0]
 8081f18:	07d0      	lsls	r0, r2, #31
 8081f1a:	bf5c      	itt	pl
 8081f1c:	2201      	movpl	r2, #1
 8081f1e:	601a      	strpl	r2, [r3, #0]
 8081f20:	4b1c      	ldr	r3, [pc, #112]	; (8081f94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 8081f22:	681a      	ldr	r2, [r3, #0]
 8081f24:	07d1      	lsls	r1, r2, #31
 8081f26:	bf5c      	itt	pl
 8081f28:	2201      	movpl	r2, #1
 8081f2a:	601a      	strpl	r2, [r3, #0]
 8081f2c:	4b1a      	ldr	r3, [pc, #104]	; (8081f98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 8081f2e:	681a      	ldr	r2, [r3, #0]
 8081f30:	07d2      	lsls	r2, r2, #31
 8081f32:	bf5c      	itt	pl
 8081f34:	2201      	movpl	r2, #1
 8081f36:	601a      	strpl	r2, [r3, #0]
 8081f38:	4b18      	ldr	r3, [pc, #96]	; (8081f9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 8081f3a:	681a      	ldr	r2, [r3, #0]
 8081f3c:	07d0      	lsls	r0, r2, #31
 8081f3e:	bf5c      	itt	pl
 8081f40:	2201      	movpl	r2, #1
 8081f42:	601a      	strpl	r2, [r3, #0]
 8081f44:	4b16      	ldr	r3, [pc, #88]	; (8081fa0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 8081f46:	681a      	ldr	r2, [r3, #0]
 8081f48:	07d1      	lsls	r1, r2, #31
 8081f4a:	bf5c      	itt	pl
 8081f4c:	2201      	movpl	r2, #1
 8081f4e:	601a      	strpl	r2, [r3, #0]
 8081f50:	4b14      	ldr	r3, [pc, #80]	; (8081fa4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 8081f52:	681a      	ldr	r2, [r3, #0]
 8081f54:	07d2      	lsls	r2, r2, #31
 8081f56:	bf5c      	itt	pl
 8081f58:	2201      	movpl	r2, #1
 8081f5a:	601a      	strpl	r2, [r3, #0]
 8081f5c:	4b12      	ldr	r3, [pc, #72]	; (8081fa8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 8081f5e:	681a      	ldr	r2, [r3, #0]
 8081f60:	07d0      	lsls	r0, r2, #31
 8081f62:	bf5c      	itt	pl
 8081f64:	2201      	movpl	r2, #1
 8081f66:	601a      	strpl	r2, [r3, #0]
 8081f68:	4b10      	ldr	r3, [pc, #64]	; (8081fac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 8081f6a:	681a      	ldr	r2, [r3, #0]
 8081f6c:	07d1      	lsls	r1, r2, #31
 8081f6e:	bf5c      	itt	pl
 8081f70:	2201      	movpl	r2, #1
 8081f72:	601a      	strpl	r2, [r3, #0]
 8081f74:	4b0e      	ldr	r3, [pc, #56]	; (8081fb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 8081f76:	681a      	ldr	r2, [r3, #0]
 8081f78:	07d2      	lsls	r2, r2, #31
 8081f7a:	bf5c      	itt	pl
 8081f7c:	2201      	movpl	r2, #1
 8081f7e:	601a      	strpl	r2, [r3, #0]
 8081f80:	4770      	bx	lr
 8081f82:	bf00      	nop
 8081f84:	20000610 	.word	0x20000610
 8081f88:	2000060c 	.word	0x2000060c
 8081f8c:	20000608 	.word	0x20000608
 8081f90:	20000604 	.word	0x20000604
 8081f94:	20000600 	.word	0x20000600
 8081f98:	200005fc 	.word	0x200005fc
 8081f9c:	200005f8 	.word	0x200005f8
 8081fa0:	200005f4 	.word	0x200005f4
 8081fa4:	200005f0 	.word	0x200005f0
 8081fa8:	200005ec 	.word	0x200005ec
 8081fac:	200005e8 	.word	0x200005e8
 8081fb0:	200005e4 	.word	0x200005e4

08081fb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8081fb4:	4b18      	ldr	r3, [pc, #96]	; (8082018 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8081fb6:	681a      	ldr	r2, [r3, #0]
 8081fb8:	07d1      	lsls	r1, r2, #31
 8081fba:	bf5c      	itt	pl
 8081fbc:	2201      	movpl	r2, #1
 8081fbe:	601a      	strpl	r2, [r3, #0]
 8081fc0:	4b16      	ldr	r3, [pc, #88]	; (808201c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8081fc2:	681a      	ldr	r2, [r3, #0]
 8081fc4:	07d2      	lsls	r2, r2, #31
 8081fc6:	bf5c      	itt	pl
 8081fc8:	2201      	movpl	r2, #1
 8081fca:	601a      	strpl	r2, [r3, #0]
 8081fcc:	4b14      	ldr	r3, [pc, #80]	; (8082020 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8081fce:	681a      	ldr	r2, [r3, #0]
 8081fd0:	07d0      	lsls	r0, r2, #31
 8081fd2:	bf5c      	itt	pl
 8081fd4:	2201      	movpl	r2, #1
 8081fd6:	601a      	strpl	r2, [r3, #0]
 8081fd8:	4b12      	ldr	r3, [pc, #72]	; (8082024 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8081fda:	681a      	ldr	r2, [r3, #0]
 8081fdc:	07d1      	lsls	r1, r2, #31
 8081fde:	bf5c      	itt	pl
 8081fe0:	2201      	movpl	r2, #1
 8081fe2:	601a      	strpl	r2, [r3, #0]
 8081fe4:	4b10      	ldr	r3, [pc, #64]	; (8082028 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8081fe6:	681a      	ldr	r2, [r3, #0]
 8081fe8:	07d2      	lsls	r2, r2, #31
 8081fea:	bf5c      	itt	pl
 8081fec:	2201      	movpl	r2, #1
 8081fee:	601a      	strpl	r2, [r3, #0]
 8081ff0:	4b0e      	ldr	r3, [pc, #56]	; (808202c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8081ff2:	681a      	ldr	r2, [r3, #0]
 8081ff4:	07d0      	lsls	r0, r2, #31
 8081ff6:	bf5c      	itt	pl
 8081ff8:	2201      	movpl	r2, #1
 8081ffa:	601a      	strpl	r2, [r3, #0]
 8081ffc:	4b0c      	ldr	r3, [pc, #48]	; (8082030 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8081ffe:	681a      	ldr	r2, [r3, #0]
 8082000:	07d1      	lsls	r1, r2, #31
 8082002:	bf5c      	itt	pl
 8082004:	2201      	movpl	r2, #1
 8082006:	601a      	strpl	r2, [r3, #0]
 8082008:	4b0a      	ldr	r3, [pc, #40]	; (8082034 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 808200a:	681a      	ldr	r2, [r3, #0]
 808200c:	07d2      	lsls	r2, r2, #31
 808200e:	bf5c      	itt	pl
 8082010:	2201      	movpl	r2, #1
 8082012:	601a      	strpl	r2, [r3, #0]
 8082014:	4770      	bx	lr
 8082016:	bf00      	nop
 8082018:	20000630 	.word	0x20000630
 808201c:	2000062c 	.word	0x2000062c
 8082020:	20000628 	.word	0x20000628
 8082024:	20000624 	.word	0x20000624
 8082028:	20000620 	.word	0x20000620
 808202c:	2000061c 	.word	0x2000061c
 8082030:	20000618 	.word	0x20000618
 8082034:	20000614 	.word	0x20000614

08082038 <__aeabi_drsub>:
 8082038:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 808203c:	e002      	b.n	8082044 <__adddf3>
 808203e:	bf00      	nop

08082040 <__aeabi_dsub>:
 8082040:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08082044 <__adddf3>:
 8082044:	b530      	push	{r4, r5, lr}
 8082046:	ea4f 0441 	mov.w	r4, r1, lsl #1
 808204a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 808204e:	ea94 0f05 	teq	r4, r5
 8082052:	bf08      	it	eq
 8082054:	ea90 0f02 	teqeq	r0, r2
 8082058:	bf1f      	itttt	ne
 808205a:	ea54 0c00 	orrsne.w	ip, r4, r0
 808205e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8082062:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8082066:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 808206a:	f000 80e2 	beq.w	8082232 <__adddf3+0x1ee>
 808206e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8082072:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8082076:	bfb8      	it	lt
 8082078:	426d      	neglt	r5, r5
 808207a:	dd0c      	ble.n	8082096 <__adddf3+0x52>
 808207c:	442c      	add	r4, r5
 808207e:	ea80 0202 	eor.w	r2, r0, r2
 8082082:	ea81 0303 	eor.w	r3, r1, r3
 8082086:	ea82 0000 	eor.w	r0, r2, r0
 808208a:	ea83 0101 	eor.w	r1, r3, r1
 808208e:	ea80 0202 	eor.w	r2, r0, r2
 8082092:	ea81 0303 	eor.w	r3, r1, r3
 8082096:	2d36      	cmp	r5, #54	; 0x36
 8082098:	bf88      	it	hi
 808209a:	bd30      	pophi	{r4, r5, pc}
 808209c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80820a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80820a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80820a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80820ac:	d002      	beq.n	80820b4 <__adddf3+0x70>
 80820ae:	4240      	negs	r0, r0
 80820b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80820b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80820b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80820bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80820c0:	d002      	beq.n	80820c8 <__adddf3+0x84>
 80820c2:	4252      	negs	r2, r2
 80820c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80820c8:	ea94 0f05 	teq	r4, r5
 80820cc:	f000 80a7 	beq.w	808221e <__adddf3+0x1da>
 80820d0:	f1a4 0401 	sub.w	r4, r4, #1
 80820d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80820d8:	db0d      	blt.n	80820f6 <__adddf3+0xb2>
 80820da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80820de:	fa22 f205 	lsr.w	r2, r2, r5
 80820e2:	1880      	adds	r0, r0, r2
 80820e4:	f141 0100 	adc.w	r1, r1, #0
 80820e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80820ec:	1880      	adds	r0, r0, r2
 80820ee:	fa43 f305 	asr.w	r3, r3, r5
 80820f2:	4159      	adcs	r1, r3
 80820f4:	e00e      	b.n	8082114 <__adddf3+0xd0>
 80820f6:	f1a5 0520 	sub.w	r5, r5, #32
 80820fa:	f10e 0e20 	add.w	lr, lr, #32
 80820fe:	2a01      	cmp	r2, #1
 8082100:	fa03 fc0e 	lsl.w	ip, r3, lr
 8082104:	bf28      	it	cs
 8082106:	f04c 0c02 	orrcs.w	ip, ip, #2
 808210a:	fa43 f305 	asr.w	r3, r3, r5
 808210e:	18c0      	adds	r0, r0, r3
 8082110:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8082114:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8082118:	d507      	bpl.n	808212a <__adddf3+0xe6>
 808211a:	f04f 0e00 	mov.w	lr, #0
 808211e:	f1dc 0c00 	rsbs	ip, ip, #0
 8082122:	eb7e 0000 	sbcs.w	r0, lr, r0
 8082126:	eb6e 0101 	sbc.w	r1, lr, r1
 808212a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 808212e:	d31b      	bcc.n	8082168 <__adddf3+0x124>
 8082130:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8082134:	d30c      	bcc.n	8082150 <__adddf3+0x10c>
 8082136:	0849      	lsrs	r1, r1, #1
 8082138:	ea5f 0030 	movs.w	r0, r0, rrx
 808213c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8082140:	f104 0401 	add.w	r4, r4, #1
 8082144:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8082148:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 808214c:	f080 809a 	bcs.w	8082284 <__adddf3+0x240>
 8082150:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8082154:	bf08      	it	eq
 8082156:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 808215a:	f150 0000 	adcs.w	r0, r0, #0
 808215e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8082162:	ea41 0105 	orr.w	r1, r1, r5
 8082166:	bd30      	pop	{r4, r5, pc}
 8082168:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 808216c:	4140      	adcs	r0, r0
 808216e:	eb41 0101 	adc.w	r1, r1, r1
 8082172:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8082176:	f1a4 0401 	sub.w	r4, r4, #1
 808217a:	d1e9      	bne.n	8082150 <__adddf3+0x10c>
 808217c:	f091 0f00 	teq	r1, #0
 8082180:	bf04      	itt	eq
 8082182:	4601      	moveq	r1, r0
 8082184:	2000      	moveq	r0, #0
 8082186:	fab1 f381 	clz	r3, r1
 808218a:	bf08      	it	eq
 808218c:	3320      	addeq	r3, #32
 808218e:	f1a3 030b 	sub.w	r3, r3, #11
 8082192:	f1b3 0220 	subs.w	r2, r3, #32
 8082196:	da0c      	bge.n	80821b2 <__adddf3+0x16e>
 8082198:	320c      	adds	r2, #12
 808219a:	dd08      	ble.n	80821ae <__adddf3+0x16a>
 808219c:	f102 0c14 	add.w	ip, r2, #20
 80821a0:	f1c2 020c 	rsb	r2, r2, #12
 80821a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80821a8:	fa21 f102 	lsr.w	r1, r1, r2
 80821ac:	e00c      	b.n	80821c8 <__adddf3+0x184>
 80821ae:	f102 0214 	add.w	r2, r2, #20
 80821b2:	bfd8      	it	le
 80821b4:	f1c2 0c20 	rsble	ip, r2, #32
 80821b8:	fa01 f102 	lsl.w	r1, r1, r2
 80821bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80821c0:	bfdc      	itt	le
 80821c2:	ea41 010c 	orrle.w	r1, r1, ip
 80821c6:	4090      	lslle	r0, r2
 80821c8:	1ae4      	subs	r4, r4, r3
 80821ca:	bfa2      	ittt	ge
 80821cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80821d0:	4329      	orrge	r1, r5
 80821d2:	bd30      	popge	{r4, r5, pc}
 80821d4:	ea6f 0404 	mvn.w	r4, r4
 80821d8:	3c1f      	subs	r4, #31
 80821da:	da1c      	bge.n	8082216 <__adddf3+0x1d2>
 80821dc:	340c      	adds	r4, #12
 80821de:	dc0e      	bgt.n	80821fe <__adddf3+0x1ba>
 80821e0:	f104 0414 	add.w	r4, r4, #20
 80821e4:	f1c4 0220 	rsb	r2, r4, #32
 80821e8:	fa20 f004 	lsr.w	r0, r0, r4
 80821ec:	fa01 f302 	lsl.w	r3, r1, r2
 80821f0:	ea40 0003 	orr.w	r0, r0, r3
 80821f4:	fa21 f304 	lsr.w	r3, r1, r4
 80821f8:	ea45 0103 	orr.w	r1, r5, r3
 80821fc:	bd30      	pop	{r4, r5, pc}
 80821fe:	f1c4 040c 	rsb	r4, r4, #12
 8082202:	f1c4 0220 	rsb	r2, r4, #32
 8082206:	fa20 f002 	lsr.w	r0, r0, r2
 808220a:	fa01 f304 	lsl.w	r3, r1, r4
 808220e:	ea40 0003 	orr.w	r0, r0, r3
 8082212:	4629      	mov	r1, r5
 8082214:	bd30      	pop	{r4, r5, pc}
 8082216:	fa21 f004 	lsr.w	r0, r1, r4
 808221a:	4629      	mov	r1, r5
 808221c:	bd30      	pop	{r4, r5, pc}
 808221e:	f094 0f00 	teq	r4, #0
 8082222:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8082226:	bf06      	itte	eq
 8082228:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 808222c:	3401      	addeq	r4, #1
 808222e:	3d01      	subne	r5, #1
 8082230:	e74e      	b.n	80820d0 <__adddf3+0x8c>
 8082232:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8082236:	bf18      	it	ne
 8082238:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 808223c:	d029      	beq.n	8082292 <__adddf3+0x24e>
 808223e:	ea94 0f05 	teq	r4, r5
 8082242:	bf08      	it	eq
 8082244:	ea90 0f02 	teqeq	r0, r2
 8082248:	d005      	beq.n	8082256 <__adddf3+0x212>
 808224a:	ea54 0c00 	orrs.w	ip, r4, r0
 808224e:	bf04      	itt	eq
 8082250:	4619      	moveq	r1, r3
 8082252:	4610      	moveq	r0, r2
 8082254:	bd30      	pop	{r4, r5, pc}
 8082256:	ea91 0f03 	teq	r1, r3
 808225a:	bf1e      	ittt	ne
 808225c:	2100      	movne	r1, #0
 808225e:	2000      	movne	r0, #0
 8082260:	bd30      	popne	{r4, r5, pc}
 8082262:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8082266:	d105      	bne.n	8082274 <__adddf3+0x230>
 8082268:	0040      	lsls	r0, r0, #1
 808226a:	4149      	adcs	r1, r1
 808226c:	bf28      	it	cs
 808226e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8082272:	bd30      	pop	{r4, r5, pc}
 8082274:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8082278:	bf3c      	itt	cc
 808227a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 808227e:	bd30      	popcc	{r4, r5, pc}
 8082280:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8082284:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8082288:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 808228c:	f04f 0000 	mov.w	r0, #0
 8082290:	bd30      	pop	{r4, r5, pc}
 8082292:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8082296:	bf1a      	itte	ne
 8082298:	4619      	movne	r1, r3
 808229a:	4610      	movne	r0, r2
 808229c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80822a0:	bf1c      	itt	ne
 80822a2:	460b      	movne	r3, r1
 80822a4:	4602      	movne	r2, r0
 80822a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80822aa:	bf06      	itte	eq
 80822ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80822b0:	ea91 0f03 	teqeq	r1, r3
 80822b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80822b8:	bd30      	pop	{r4, r5, pc}
 80822ba:	bf00      	nop

080822bc <__aeabi_ui2d>:
 80822bc:	f090 0f00 	teq	r0, #0
 80822c0:	bf04      	itt	eq
 80822c2:	2100      	moveq	r1, #0
 80822c4:	4770      	bxeq	lr
 80822c6:	b530      	push	{r4, r5, lr}
 80822c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80822cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80822d0:	f04f 0500 	mov.w	r5, #0
 80822d4:	f04f 0100 	mov.w	r1, #0
 80822d8:	e750      	b.n	808217c <__adddf3+0x138>
 80822da:	bf00      	nop

080822dc <__aeabi_i2d>:
 80822dc:	f090 0f00 	teq	r0, #0
 80822e0:	bf04      	itt	eq
 80822e2:	2100      	moveq	r1, #0
 80822e4:	4770      	bxeq	lr
 80822e6:	b530      	push	{r4, r5, lr}
 80822e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80822ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80822f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80822f4:	bf48      	it	mi
 80822f6:	4240      	negmi	r0, r0
 80822f8:	f04f 0100 	mov.w	r1, #0
 80822fc:	e73e      	b.n	808217c <__adddf3+0x138>
 80822fe:	bf00      	nop

08082300 <__aeabi_f2d>:
 8082300:	0042      	lsls	r2, r0, #1
 8082302:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8082306:	ea4f 0131 	mov.w	r1, r1, rrx
 808230a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 808230e:	bf1f      	itttt	ne
 8082310:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8082314:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8082318:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 808231c:	4770      	bxne	lr
 808231e:	f092 0f00 	teq	r2, #0
 8082322:	bf14      	ite	ne
 8082324:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8082328:	4770      	bxeq	lr
 808232a:	b530      	push	{r4, r5, lr}
 808232c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8082330:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8082334:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8082338:	e720      	b.n	808217c <__adddf3+0x138>
 808233a:	bf00      	nop

0808233c <__aeabi_ul2d>:
 808233c:	ea50 0201 	orrs.w	r2, r0, r1
 8082340:	bf08      	it	eq
 8082342:	4770      	bxeq	lr
 8082344:	b530      	push	{r4, r5, lr}
 8082346:	f04f 0500 	mov.w	r5, #0
 808234a:	e00a      	b.n	8082362 <__aeabi_l2d+0x16>

0808234c <__aeabi_l2d>:
 808234c:	ea50 0201 	orrs.w	r2, r0, r1
 8082350:	bf08      	it	eq
 8082352:	4770      	bxeq	lr
 8082354:	b530      	push	{r4, r5, lr}
 8082356:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 808235a:	d502      	bpl.n	8082362 <__aeabi_l2d+0x16>
 808235c:	4240      	negs	r0, r0
 808235e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8082362:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8082366:	f104 0432 	add.w	r4, r4, #50	; 0x32
 808236a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 808236e:	f43f aedc 	beq.w	808212a <__adddf3+0xe6>
 8082372:	f04f 0203 	mov.w	r2, #3
 8082376:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 808237a:	bf18      	it	ne
 808237c:	3203      	addne	r2, #3
 808237e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8082382:	bf18      	it	ne
 8082384:	3203      	addne	r2, #3
 8082386:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 808238a:	f1c2 0320 	rsb	r3, r2, #32
 808238e:	fa00 fc03 	lsl.w	ip, r0, r3
 8082392:	fa20 f002 	lsr.w	r0, r0, r2
 8082396:	fa01 fe03 	lsl.w	lr, r1, r3
 808239a:	ea40 000e 	orr.w	r0, r0, lr
 808239e:	fa21 f102 	lsr.w	r1, r1, r2
 80823a2:	4414      	add	r4, r2
 80823a4:	e6c1      	b.n	808212a <__adddf3+0xe6>
 80823a6:	bf00      	nop

080823a8 <__aeabi_dmul>:
 80823a8:	b570      	push	{r4, r5, r6, lr}
 80823aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80823ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80823b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80823b6:	bf1d      	ittte	ne
 80823b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80823bc:	ea94 0f0c 	teqne	r4, ip
 80823c0:	ea95 0f0c 	teqne	r5, ip
 80823c4:	f000 f8de 	bleq	8082584 <__aeabi_dmul+0x1dc>
 80823c8:	442c      	add	r4, r5
 80823ca:	ea81 0603 	eor.w	r6, r1, r3
 80823ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80823d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80823d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80823da:	bf18      	it	ne
 80823dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80823e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80823e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80823e8:	d038      	beq.n	808245c <__aeabi_dmul+0xb4>
 80823ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80823ee:	f04f 0500 	mov.w	r5, #0
 80823f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80823f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80823fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80823fe:	f04f 0600 	mov.w	r6, #0
 8082402:	fbe1 5603 	umlal	r5, r6, r1, r3
 8082406:	f09c 0f00 	teq	ip, #0
 808240a:	bf18      	it	ne
 808240c:	f04e 0e01 	orrne.w	lr, lr, #1
 8082410:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8082414:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8082418:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 808241c:	d204      	bcs.n	8082428 <__aeabi_dmul+0x80>
 808241e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8082422:	416d      	adcs	r5, r5
 8082424:	eb46 0606 	adc.w	r6, r6, r6
 8082428:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 808242c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8082430:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8082434:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8082438:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 808243c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8082440:	bf88      	it	hi
 8082442:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8082446:	d81e      	bhi.n	8082486 <__aeabi_dmul+0xde>
 8082448:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 808244c:	bf08      	it	eq
 808244e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8082452:	f150 0000 	adcs.w	r0, r0, #0
 8082456:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808245a:	bd70      	pop	{r4, r5, r6, pc}
 808245c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8082460:	ea46 0101 	orr.w	r1, r6, r1
 8082464:	ea40 0002 	orr.w	r0, r0, r2
 8082468:	ea81 0103 	eor.w	r1, r1, r3
 808246c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8082470:	bfc2      	ittt	gt
 8082472:	ebd4 050c 	rsbsgt	r5, r4, ip
 8082476:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 808247a:	bd70      	popgt	{r4, r5, r6, pc}
 808247c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8082480:	f04f 0e00 	mov.w	lr, #0
 8082484:	3c01      	subs	r4, #1
 8082486:	f300 80ab 	bgt.w	80825e0 <__aeabi_dmul+0x238>
 808248a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 808248e:	bfde      	ittt	le
 8082490:	2000      	movle	r0, #0
 8082492:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8082496:	bd70      	pople	{r4, r5, r6, pc}
 8082498:	f1c4 0400 	rsb	r4, r4, #0
 808249c:	3c20      	subs	r4, #32
 808249e:	da35      	bge.n	808250c <__aeabi_dmul+0x164>
 80824a0:	340c      	adds	r4, #12
 80824a2:	dc1b      	bgt.n	80824dc <__aeabi_dmul+0x134>
 80824a4:	f104 0414 	add.w	r4, r4, #20
 80824a8:	f1c4 0520 	rsb	r5, r4, #32
 80824ac:	fa00 f305 	lsl.w	r3, r0, r5
 80824b0:	fa20 f004 	lsr.w	r0, r0, r4
 80824b4:	fa01 f205 	lsl.w	r2, r1, r5
 80824b8:	ea40 0002 	orr.w	r0, r0, r2
 80824bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80824c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80824c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80824c8:	fa21 f604 	lsr.w	r6, r1, r4
 80824cc:	eb42 0106 	adc.w	r1, r2, r6
 80824d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80824d4:	bf08      	it	eq
 80824d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80824da:	bd70      	pop	{r4, r5, r6, pc}
 80824dc:	f1c4 040c 	rsb	r4, r4, #12
 80824e0:	f1c4 0520 	rsb	r5, r4, #32
 80824e4:	fa00 f304 	lsl.w	r3, r0, r4
 80824e8:	fa20 f005 	lsr.w	r0, r0, r5
 80824ec:	fa01 f204 	lsl.w	r2, r1, r4
 80824f0:	ea40 0002 	orr.w	r0, r0, r2
 80824f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80824f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80824fc:	f141 0100 	adc.w	r1, r1, #0
 8082500:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8082504:	bf08      	it	eq
 8082506:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808250a:	bd70      	pop	{r4, r5, r6, pc}
 808250c:	f1c4 0520 	rsb	r5, r4, #32
 8082510:	fa00 f205 	lsl.w	r2, r0, r5
 8082514:	ea4e 0e02 	orr.w	lr, lr, r2
 8082518:	fa20 f304 	lsr.w	r3, r0, r4
 808251c:	fa01 f205 	lsl.w	r2, r1, r5
 8082520:	ea43 0302 	orr.w	r3, r3, r2
 8082524:	fa21 f004 	lsr.w	r0, r1, r4
 8082528:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808252c:	fa21 f204 	lsr.w	r2, r1, r4
 8082530:	ea20 0002 	bic.w	r0, r0, r2
 8082534:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8082538:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 808253c:	bf08      	it	eq
 808253e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8082542:	bd70      	pop	{r4, r5, r6, pc}
 8082544:	f094 0f00 	teq	r4, #0
 8082548:	d10f      	bne.n	808256a <__aeabi_dmul+0x1c2>
 808254a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 808254e:	0040      	lsls	r0, r0, #1
 8082550:	eb41 0101 	adc.w	r1, r1, r1
 8082554:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8082558:	bf08      	it	eq
 808255a:	3c01      	subeq	r4, #1
 808255c:	d0f7      	beq.n	808254e <__aeabi_dmul+0x1a6>
 808255e:	ea41 0106 	orr.w	r1, r1, r6
 8082562:	f095 0f00 	teq	r5, #0
 8082566:	bf18      	it	ne
 8082568:	4770      	bxne	lr
 808256a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 808256e:	0052      	lsls	r2, r2, #1
 8082570:	eb43 0303 	adc.w	r3, r3, r3
 8082574:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8082578:	bf08      	it	eq
 808257a:	3d01      	subeq	r5, #1
 808257c:	d0f7      	beq.n	808256e <__aeabi_dmul+0x1c6>
 808257e:	ea43 0306 	orr.w	r3, r3, r6
 8082582:	4770      	bx	lr
 8082584:	ea94 0f0c 	teq	r4, ip
 8082588:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 808258c:	bf18      	it	ne
 808258e:	ea95 0f0c 	teqne	r5, ip
 8082592:	d00c      	beq.n	80825ae <__aeabi_dmul+0x206>
 8082594:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8082598:	bf18      	it	ne
 808259a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808259e:	d1d1      	bne.n	8082544 <__aeabi_dmul+0x19c>
 80825a0:	ea81 0103 	eor.w	r1, r1, r3
 80825a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80825a8:	f04f 0000 	mov.w	r0, #0
 80825ac:	bd70      	pop	{r4, r5, r6, pc}
 80825ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80825b2:	bf06      	itte	eq
 80825b4:	4610      	moveq	r0, r2
 80825b6:	4619      	moveq	r1, r3
 80825b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80825bc:	d019      	beq.n	80825f2 <__aeabi_dmul+0x24a>
 80825be:	ea94 0f0c 	teq	r4, ip
 80825c2:	d102      	bne.n	80825ca <__aeabi_dmul+0x222>
 80825c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80825c8:	d113      	bne.n	80825f2 <__aeabi_dmul+0x24a>
 80825ca:	ea95 0f0c 	teq	r5, ip
 80825ce:	d105      	bne.n	80825dc <__aeabi_dmul+0x234>
 80825d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80825d4:	bf1c      	itt	ne
 80825d6:	4610      	movne	r0, r2
 80825d8:	4619      	movne	r1, r3
 80825da:	d10a      	bne.n	80825f2 <__aeabi_dmul+0x24a>
 80825dc:	ea81 0103 	eor.w	r1, r1, r3
 80825e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80825e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80825e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80825ec:	f04f 0000 	mov.w	r0, #0
 80825f0:	bd70      	pop	{r4, r5, r6, pc}
 80825f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80825f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80825fa:	bd70      	pop	{r4, r5, r6, pc}

080825fc <__aeabi_ddiv>:
 80825fc:	b570      	push	{r4, r5, r6, lr}
 80825fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8082602:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8082606:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 808260a:	bf1d      	ittte	ne
 808260c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8082610:	ea94 0f0c 	teqne	r4, ip
 8082614:	ea95 0f0c 	teqne	r5, ip
 8082618:	f000 f8a7 	bleq	808276a <__aeabi_ddiv+0x16e>
 808261c:	eba4 0405 	sub.w	r4, r4, r5
 8082620:	ea81 0e03 	eor.w	lr, r1, r3
 8082624:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8082628:	ea4f 3101 	mov.w	r1, r1, lsl #12
 808262c:	f000 8088 	beq.w	8082740 <__aeabi_ddiv+0x144>
 8082630:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8082634:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8082638:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 808263c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8082640:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8082644:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8082648:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 808264c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8082650:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8082654:	429d      	cmp	r5, r3
 8082656:	bf08      	it	eq
 8082658:	4296      	cmpeq	r6, r2
 808265a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 808265e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8082662:	d202      	bcs.n	808266a <__aeabi_ddiv+0x6e>
 8082664:	085b      	lsrs	r3, r3, #1
 8082666:	ea4f 0232 	mov.w	r2, r2, rrx
 808266a:	1ab6      	subs	r6, r6, r2
 808266c:	eb65 0503 	sbc.w	r5, r5, r3
 8082670:	085b      	lsrs	r3, r3, #1
 8082672:	ea4f 0232 	mov.w	r2, r2, rrx
 8082676:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 808267a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 808267e:	ebb6 0e02 	subs.w	lr, r6, r2
 8082682:	eb75 0e03 	sbcs.w	lr, r5, r3
 8082686:	bf22      	ittt	cs
 8082688:	1ab6      	subcs	r6, r6, r2
 808268a:	4675      	movcs	r5, lr
 808268c:	ea40 000c 	orrcs.w	r0, r0, ip
 8082690:	085b      	lsrs	r3, r3, #1
 8082692:	ea4f 0232 	mov.w	r2, r2, rrx
 8082696:	ebb6 0e02 	subs.w	lr, r6, r2
 808269a:	eb75 0e03 	sbcs.w	lr, r5, r3
 808269e:	bf22      	ittt	cs
 80826a0:	1ab6      	subcs	r6, r6, r2
 80826a2:	4675      	movcs	r5, lr
 80826a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80826a8:	085b      	lsrs	r3, r3, #1
 80826aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80826ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80826b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80826b6:	bf22      	ittt	cs
 80826b8:	1ab6      	subcs	r6, r6, r2
 80826ba:	4675      	movcs	r5, lr
 80826bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80826c0:	085b      	lsrs	r3, r3, #1
 80826c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80826c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80826ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80826ce:	bf22      	ittt	cs
 80826d0:	1ab6      	subcs	r6, r6, r2
 80826d2:	4675      	movcs	r5, lr
 80826d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80826d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80826dc:	d018      	beq.n	8082710 <__aeabi_ddiv+0x114>
 80826de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80826e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80826e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80826ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80826ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80826f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80826f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80826fa:	d1c0      	bne.n	808267e <__aeabi_ddiv+0x82>
 80826fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8082700:	d10b      	bne.n	808271a <__aeabi_ddiv+0x11e>
 8082702:	ea41 0100 	orr.w	r1, r1, r0
 8082706:	f04f 0000 	mov.w	r0, #0
 808270a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 808270e:	e7b6      	b.n	808267e <__aeabi_ddiv+0x82>
 8082710:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8082714:	bf04      	itt	eq
 8082716:	4301      	orreq	r1, r0
 8082718:	2000      	moveq	r0, #0
 808271a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 808271e:	bf88      	it	hi
 8082720:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8082724:	f63f aeaf 	bhi.w	8082486 <__aeabi_dmul+0xde>
 8082728:	ebb5 0c03 	subs.w	ip, r5, r3
 808272c:	bf04      	itt	eq
 808272e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8082732:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8082736:	f150 0000 	adcs.w	r0, r0, #0
 808273a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808273e:	bd70      	pop	{r4, r5, r6, pc}
 8082740:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8082744:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8082748:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 808274c:	bfc2      	ittt	gt
 808274e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8082752:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8082756:	bd70      	popgt	{r4, r5, r6, pc}
 8082758:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808275c:	f04f 0e00 	mov.w	lr, #0
 8082760:	3c01      	subs	r4, #1
 8082762:	e690      	b.n	8082486 <__aeabi_dmul+0xde>
 8082764:	ea45 0e06 	orr.w	lr, r5, r6
 8082768:	e68d      	b.n	8082486 <__aeabi_dmul+0xde>
 808276a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 808276e:	ea94 0f0c 	teq	r4, ip
 8082772:	bf08      	it	eq
 8082774:	ea95 0f0c 	teqeq	r5, ip
 8082778:	f43f af3b 	beq.w	80825f2 <__aeabi_dmul+0x24a>
 808277c:	ea94 0f0c 	teq	r4, ip
 8082780:	d10a      	bne.n	8082798 <__aeabi_ddiv+0x19c>
 8082782:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8082786:	f47f af34 	bne.w	80825f2 <__aeabi_dmul+0x24a>
 808278a:	ea95 0f0c 	teq	r5, ip
 808278e:	f47f af25 	bne.w	80825dc <__aeabi_dmul+0x234>
 8082792:	4610      	mov	r0, r2
 8082794:	4619      	mov	r1, r3
 8082796:	e72c      	b.n	80825f2 <__aeabi_dmul+0x24a>
 8082798:	ea95 0f0c 	teq	r5, ip
 808279c:	d106      	bne.n	80827ac <__aeabi_ddiv+0x1b0>
 808279e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80827a2:	f43f aefd 	beq.w	80825a0 <__aeabi_dmul+0x1f8>
 80827a6:	4610      	mov	r0, r2
 80827a8:	4619      	mov	r1, r3
 80827aa:	e722      	b.n	80825f2 <__aeabi_dmul+0x24a>
 80827ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80827b0:	bf18      	it	ne
 80827b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80827b6:	f47f aec5 	bne.w	8082544 <__aeabi_dmul+0x19c>
 80827ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80827be:	f47f af0d 	bne.w	80825dc <__aeabi_dmul+0x234>
 80827c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80827c6:	f47f aeeb 	bne.w	80825a0 <__aeabi_dmul+0x1f8>
 80827ca:	e712      	b.n	80825f2 <__aeabi_dmul+0x24a>

080827cc <__gedf2>:
 80827cc:	f04f 3cff 	mov.w	ip, #4294967295
 80827d0:	e006      	b.n	80827e0 <__cmpdf2+0x4>
 80827d2:	bf00      	nop

080827d4 <__ledf2>:
 80827d4:	f04f 0c01 	mov.w	ip, #1
 80827d8:	e002      	b.n	80827e0 <__cmpdf2+0x4>
 80827da:	bf00      	nop

080827dc <__cmpdf2>:
 80827dc:	f04f 0c01 	mov.w	ip, #1
 80827e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80827e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80827e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80827ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80827f0:	bf18      	it	ne
 80827f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80827f6:	d01b      	beq.n	8082830 <__cmpdf2+0x54>
 80827f8:	b001      	add	sp, #4
 80827fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80827fe:	bf0c      	ite	eq
 8082800:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8082804:	ea91 0f03 	teqne	r1, r3
 8082808:	bf02      	ittt	eq
 808280a:	ea90 0f02 	teqeq	r0, r2
 808280e:	2000      	moveq	r0, #0
 8082810:	4770      	bxeq	lr
 8082812:	f110 0f00 	cmn.w	r0, #0
 8082816:	ea91 0f03 	teq	r1, r3
 808281a:	bf58      	it	pl
 808281c:	4299      	cmppl	r1, r3
 808281e:	bf08      	it	eq
 8082820:	4290      	cmpeq	r0, r2
 8082822:	bf2c      	ite	cs
 8082824:	17d8      	asrcs	r0, r3, #31
 8082826:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 808282a:	f040 0001 	orr.w	r0, r0, #1
 808282e:	4770      	bx	lr
 8082830:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8082834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8082838:	d102      	bne.n	8082840 <__cmpdf2+0x64>
 808283a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 808283e:	d107      	bne.n	8082850 <__cmpdf2+0x74>
 8082840:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8082844:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8082848:	d1d6      	bne.n	80827f8 <__cmpdf2+0x1c>
 808284a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 808284e:	d0d3      	beq.n	80827f8 <__cmpdf2+0x1c>
 8082850:	f85d 0b04 	ldr.w	r0, [sp], #4
 8082854:	4770      	bx	lr
 8082856:	bf00      	nop

08082858 <__aeabi_cdrcmple>:
 8082858:	4684      	mov	ip, r0
 808285a:	4610      	mov	r0, r2
 808285c:	4662      	mov	r2, ip
 808285e:	468c      	mov	ip, r1
 8082860:	4619      	mov	r1, r3
 8082862:	4663      	mov	r3, ip
 8082864:	e000      	b.n	8082868 <__aeabi_cdcmpeq>
 8082866:	bf00      	nop

08082868 <__aeabi_cdcmpeq>:
 8082868:	b501      	push	{r0, lr}
 808286a:	f7ff ffb7 	bl	80827dc <__cmpdf2>
 808286e:	2800      	cmp	r0, #0
 8082870:	bf48      	it	mi
 8082872:	f110 0f00 	cmnmi.w	r0, #0
 8082876:	bd01      	pop	{r0, pc}

08082878 <__aeabi_dcmpeq>:
 8082878:	f84d ed08 	str.w	lr, [sp, #-8]!
 808287c:	f7ff fff4 	bl	8082868 <__aeabi_cdcmpeq>
 8082880:	bf0c      	ite	eq
 8082882:	2001      	moveq	r0, #1
 8082884:	2000      	movne	r0, #0
 8082886:	f85d fb08 	ldr.w	pc, [sp], #8
 808288a:	bf00      	nop

0808288c <__aeabi_dcmplt>:
 808288c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8082890:	f7ff ffea 	bl	8082868 <__aeabi_cdcmpeq>
 8082894:	bf34      	ite	cc
 8082896:	2001      	movcc	r0, #1
 8082898:	2000      	movcs	r0, #0
 808289a:	f85d fb08 	ldr.w	pc, [sp], #8
 808289e:	bf00      	nop

080828a0 <__aeabi_dcmple>:
 80828a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80828a4:	f7ff ffe0 	bl	8082868 <__aeabi_cdcmpeq>
 80828a8:	bf94      	ite	ls
 80828aa:	2001      	movls	r0, #1
 80828ac:	2000      	movhi	r0, #0
 80828ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80828b2:	bf00      	nop

080828b4 <__aeabi_dcmpge>:
 80828b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80828b8:	f7ff ffce 	bl	8082858 <__aeabi_cdrcmple>
 80828bc:	bf94      	ite	ls
 80828be:	2001      	movls	r0, #1
 80828c0:	2000      	movhi	r0, #0
 80828c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80828c6:	bf00      	nop

080828c8 <__aeabi_dcmpgt>:
 80828c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80828cc:	f7ff ffc4 	bl	8082858 <__aeabi_cdrcmple>
 80828d0:	bf34      	ite	cc
 80828d2:	2001      	movcc	r0, #1
 80828d4:	2000      	movcs	r0, #0
 80828d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80828da:	bf00      	nop

080828dc <__aeabi_dcmpun>:
 80828dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80828e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80828e4:	d102      	bne.n	80828ec <__aeabi_dcmpun+0x10>
 80828e6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80828ea:	d10a      	bne.n	8082902 <__aeabi_dcmpun+0x26>
 80828ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80828f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80828f4:	d102      	bne.n	80828fc <__aeabi_dcmpun+0x20>
 80828f6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80828fa:	d102      	bne.n	8082902 <__aeabi_dcmpun+0x26>
 80828fc:	f04f 0000 	mov.w	r0, #0
 8082900:	4770      	bx	lr
 8082902:	f04f 0001 	mov.w	r0, #1
 8082906:	4770      	bx	lr

08082908 <__aeabi_d2iz>:
 8082908:	ea4f 0241 	mov.w	r2, r1, lsl #1
 808290c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8082910:	d215      	bcs.n	808293e <__aeabi_d2iz+0x36>
 8082912:	d511      	bpl.n	8082938 <__aeabi_d2iz+0x30>
 8082914:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8082918:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 808291c:	d912      	bls.n	8082944 <__aeabi_d2iz+0x3c>
 808291e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8082922:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8082926:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 808292a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808292e:	fa23 f002 	lsr.w	r0, r3, r2
 8082932:	bf18      	it	ne
 8082934:	4240      	negne	r0, r0
 8082936:	4770      	bx	lr
 8082938:	f04f 0000 	mov.w	r0, #0
 808293c:	4770      	bx	lr
 808293e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8082942:	d105      	bne.n	8082950 <__aeabi_d2iz+0x48>
 8082944:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8082948:	bf08      	it	eq
 808294a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 808294e:	4770      	bx	lr
 8082950:	f04f 0000 	mov.w	r0, #0
 8082954:	4770      	bx	lr
 8082956:	bf00      	nop

08082958 <__aeabi_d2uiz>:
 8082958:	004a      	lsls	r2, r1, #1
 808295a:	d211      	bcs.n	8082980 <__aeabi_d2uiz+0x28>
 808295c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8082960:	d211      	bcs.n	8082986 <__aeabi_d2uiz+0x2e>
 8082962:	d50d      	bpl.n	8082980 <__aeabi_d2uiz+0x28>
 8082964:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8082968:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 808296c:	d40e      	bmi.n	808298c <__aeabi_d2uiz+0x34>
 808296e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8082972:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8082976:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 808297a:	fa23 f002 	lsr.w	r0, r3, r2
 808297e:	4770      	bx	lr
 8082980:	f04f 0000 	mov.w	r0, #0
 8082984:	4770      	bx	lr
 8082986:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 808298a:	d102      	bne.n	8082992 <__aeabi_d2uiz+0x3a>
 808298c:	f04f 30ff 	mov.w	r0, #4294967295
 8082990:	4770      	bx	lr
 8082992:	f04f 0000 	mov.w	r0, #0
 8082996:	4770      	bx	lr

08082998 <__aeabi_frsub>:
 8082998:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 808299c:	e002      	b.n	80829a4 <__addsf3>
 808299e:	bf00      	nop

080829a0 <__aeabi_fsub>:
 80829a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080829a4 <__addsf3>:
 80829a4:	0042      	lsls	r2, r0, #1
 80829a6:	bf1f      	itttt	ne
 80829a8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80829ac:	ea92 0f03 	teqne	r2, r3
 80829b0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80829b4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80829b8:	d06a      	beq.n	8082a90 <__addsf3+0xec>
 80829ba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80829be:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80829c2:	bfc1      	itttt	gt
 80829c4:	18d2      	addgt	r2, r2, r3
 80829c6:	4041      	eorgt	r1, r0
 80829c8:	4048      	eorgt	r0, r1
 80829ca:	4041      	eorgt	r1, r0
 80829cc:	bfb8      	it	lt
 80829ce:	425b      	neglt	r3, r3
 80829d0:	2b19      	cmp	r3, #25
 80829d2:	bf88      	it	hi
 80829d4:	4770      	bxhi	lr
 80829d6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80829da:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80829de:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80829e2:	bf18      	it	ne
 80829e4:	4240      	negne	r0, r0
 80829e6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80829ea:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80829ee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80829f2:	bf18      	it	ne
 80829f4:	4249      	negne	r1, r1
 80829f6:	ea92 0f03 	teq	r2, r3
 80829fa:	d03f      	beq.n	8082a7c <__addsf3+0xd8>
 80829fc:	f1a2 0201 	sub.w	r2, r2, #1
 8082a00:	fa41 fc03 	asr.w	ip, r1, r3
 8082a04:	eb10 000c 	adds.w	r0, r0, ip
 8082a08:	f1c3 0320 	rsb	r3, r3, #32
 8082a0c:	fa01 f103 	lsl.w	r1, r1, r3
 8082a10:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8082a14:	d502      	bpl.n	8082a1c <__addsf3+0x78>
 8082a16:	4249      	negs	r1, r1
 8082a18:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8082a1c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8082a20:	d313      	bcc.n	8082a4a <__addsf3+0xa6>
 8082a22:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8082a26:	d306      	bcc.n	8082a36 <__addsf3+0x92>
 8082a28:	0840      	lsrs	r0, r0, #1
 8082a2a:	ea4f 0131 	mov.w	r1, r1, rrx
 8082a2e:	f102 0201 	add.w	r2, r2, #1
 8082a32:	2afe      	cmp	r2, #254	; 0xfe
 8082a34:	d251      	bcs.n	8082ada <__addsf3+0x136>
 8082a36:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8082a3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8082a3e:	bf08      	it	eq
 8082a40:	f020 0001 	biceq.w	r0, r0, #1
 8082a44:	ea40 0003 	orr.w	r0, r0, r3
 8082a48:	4770      	bx	lr
 8082a4a:	0049      	lsls	r1, r1, #1
 8082a4c:	eb40 0000 	adc.w	r0, r0, r0
 8082a50:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8082a54:	f1a2 0201 	sub.w	r2, r2, #1
 8082a58:	d1ed      	bne.n	8082a36 <__addsf3+0x92>
 8082a5a:	fab0 fc80 	clz	ip, r0
 8082a5e:	f1ac 0c08 	sub.w	ip, ip, #8
 8082a62:	ebb2 020c 	subs.w	r2, r2, ip
 8082a66:	fa00 f00c 	lsl.w	r0, r0, ip
 8082a6a:	bfaa      	itet	ge
 8082a6c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8082a70:	4252      	neglt	r2, r2
 8082a72:	4318      	orrge	r0, r3
 8082a74:	bfbc      	itt	lt
 8082a76:	40d0      	lsrlt	r0, r2
 8082a78:	4318      	orrlt	r0, r3
 8082a7a:	4770      	bx	lr
 8082a7c:	f092 0f00 	teq	r2, #0
 8082a80:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8082a84:	bf06      	itte	eq
 8082a86:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8082a8a:	3201      	addeq	r2, #1
 8082a8c:	3b01      	subne	r3, #1
 8082a8e:	e7b5      	b.n	80829fc <__addsf3+0x58>
 8082a90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8082a94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8082a98:	bf18      	it	ne
 8082a9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8082a9e:	d021      	beq.n	8082ae4 <__addsf3+0x140>
 8082aa0:	ea92 0f03 	teq	r2, r3
 8082aa4:	d004      	beq.n	8082ab0 <__addsf3+0x10c>
 8082aa6:	f092 0f00 	teq	r2, #0
 8082aaa:	bf08      	it	eq
 8082aac:	4608      	moveq	r0, r1
 8082aae:	4770      	bx	lr
 8082ab0:	ea90 0f01 	teq	r0, r1
 8082ab4:	bf1c      	itt	ne
 8082ab6:	2000      	movne	r0, #0
 8082ab8:	4770      	bxne	lr
 8082aba:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8082abe:	d104      	bne.n	8082aca <__addsf3+0x126>
 8082ac0:	0040      	lsls	r0, r0, #1
 8082ac2:	bf28      	it	cs
 8082ac4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8082ac8:	4770      	bx	lr
 8082aca:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8082ace:	bf3c      	itt	cc
 8082ad0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8082ad4:	4770      	bxcc	lr
 8082ad6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8082ada:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8082ade:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8082ae2:	4770      	bx	lr
 8082ae4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8082ae8:	bf16      	itet	ne
 8082aea:	4608      	movne	r0, r1
 8082aec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8082af0:	4601      	movne	r1, r0
 8082af2:	0242      	lsls	r2, r0, #9
 8082af4:	bf06      	itte	eq
 8082af6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8082afa:	ea90 0f01 	teqeq	r0, r1
 8082afe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8082b02:	4770      	bx	lr

08082b04 <__aeabi_ui2f>:
 8082b04:	f04f 0300 	mov.w	r3, #0
 8082b08:	e004      	b.n	8082b14 <__aeabi_i2f+0x8>
 8082b0a:	bf00      	nop

08082b0c <__aeabi_i2f>:
 8082b0c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8082b10:	bf48      	it	mi
 8082b12:	4240      	negmi	r0, r0
 8082b14:	ea5f 0c00 	movs.w	ip, r0
 8082b18:	bf08      	it	eq
 8082b1a:	4770      	bxeq	lr
 8082b1c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8082b20:	4601      	mov	r1, r0
 8082b22:	f04f 0000 	mov.w	r0, #0
 8082b26:	e01c      	b.n	8082b62 <__aeabi_l2f+0x2a>

08082b28 <__aeabi_ul2f>:
 8082b28:	ea50 0201 	orrs.w	r2, r0, r1
 8082b2c:	bf08      	it	eq
 8082b2e:	4770      	bxeq	lr
 8082b30:	f04f 0300 	mov.w	r3, #0
 8082b34:	e00a      	b.n	8082b4c <__aeabi_l2f+0x14>
 8082b36:	bf00      	nop

08082b38 <__aeabi_l2f>:
 8082b38:	ea50 0201 	orrs.w	r2, r0, r1
 8082b3c:	bf08      	it	eq
 8082b3e:	4770      	bxeq	lr
 8082b40:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8082b44:	d502      	bpl.n	8082b4c <__aeabi_l2f+0x14>
 8082b46:	4240      	negs	r0, r0
 8082b48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8082b4c:	ea5f 0c01 	movs.w	ip, r1
 8082b50:	bf02      	ittt	eq
 8082b52:	4684      	moveq	ip, r0
 8082b54:	4601      	moveq	r1, r0
 8082b56:	2000      	moveq	r0, #0
 8082b58:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8082b5c:	bf08      	it	eq
 8082b5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8082b62:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8082b66:	fabc f28c 	clz	r2, ip
 8082b6a:	3a08      	subs	r2, #8
 8082b6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8082b70:	db10      	blt.n	8082b94 <__aeabi_l2f+0x5c>
 8082b72:	fa01 fc02 	lsl.w	ip, r1, r2
 8082b76:	4463      	add	r3, ip
 8082b78:	fa00 fc02 	lsl.w	ip, r0, r2
 8082b7c:	f1c2 0220 	rsb	r2, r2, #32
 8082b80:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8082b84:	fa20 f202 	lsr.w	r2, r0, r2
 8082b88:	eb43 0002 	adc.w	r0, r3, r2
 8082b8c:	bf08      	it	eq
 8082b8e:	f020 0001 	biceq.w	r0, r0, #1
 8082b92:	4770      	bx	lr
 8082b94:	f102 0220 	add.w	r2, r2, #32
 8082b98:	fa01 fc02 	lsl.w	ip, r1, r2
 8082b9c:	f1c2 0220 	rsb	r2, r2, #32
 8082ba0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8082ba4:	fa21 f202 	lsr.w	r2, r1, r2
 8082ba8:	eb43 0002 	adc.w	r0, r3, r2
 8082bac:	bf08      	it	eq
 8082bae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8082bb2:	4770      	bx	lr

08082bb4 <__gesf2>:
 8082bb4:	f04f 3cff 	mov.w	ip, #4294967295
 8082bb8:	e006      	b.n	8082bc8 <__cmpsf2+0x4>
 8082bba:	bf00      	nop

08082bbc <__lesf2>:
 8082bbc:	f04f 0c01 	mov.w	ip, #1
 8082bc0:	e002      	b.n	8082bc8 <__cmpsf2+0x4>
 8082bc2:	bf00      	nop

08082bc4 <__cmpsf2>:
 8082bc4:	f04f 0c01 	mov.w	ip, #1
 8082bc8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8082bcc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8082bd0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8082bd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8082bd8:	bf18      	it	ne
 8082bda:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8082bde:	d011      	beq.n	8082c04 <__cmpsf2+0x40>
 8082be0:	b001      	add	sp, #4
 8082be2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8082be6:	bf18      	it	ne
 8082be8:	ea90 0f01 	teqne	r0, r1
 8082bec:	bf58      	it	pl
 8082bee:	ebb2 0003 	subspl.w	r0, r2, r3
 8082bf2:	bf88      	it	hi
 8082bf4:	17c8      	asrhi	r0, r1, #31
 8082bf6:	bf38      	it	cc
 8082bf8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8082bfc:	bf18      	it	ne
 8082bfe:	f040 0001 	orrne.w	r0, r0, #1
 8082c02:	4770      	bx	lr
 8082c04:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8082c08:	d102      	bne.n	8082c10 <__cmpsf2+0x4c>
 8082c0a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8082c0e:	d105      	bne.n	8082c1c <__cmpsf2+0x58>
 8082c10:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8082c14:	d1e4      	bne.n	8082be0 <__cmpsf2+0x1c>
 8082c16:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8082c1a:	d0e1      	beq.n	8082be0 <__cmpsf2+0x1c>
 8082c1c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8082c20:	4770      	bx	lr
 8082c22:	bf00      	nop

08082c24 <__aeabi_cfrcmple>:
 8082c24:	4684      	mov	ip, r0
 8082c26:	4608      	mov	r0, r1
 8082c28:	4661      	mov	r1, ip
 8082c2a:	e7ff      	b.n	8082c2c <__aeabi_cfcmpeq>

08082c2c <__aeabi_cfcmpeq>:
 8082c2c:	b50f      	push	{r0, r1, r2, r3, lr}
 8082c2e:	f7ff ffc9 	bl	8082bc4 <__cmpsf2>
 8082c32:	2800      	cmp	r0, #0
 8082c34:	bf48      	it	mi
 8082c36:	f110 0f00 	cmnmi.w	r0, #0
 8082c3a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08082c3c <__aeabi_fcmpeq>:
 8082c3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8082c40:	f7ff fff4 	bl	8082c2c <__aeabi_cfcmpeq>
 8082c44:	bf0c      	ite	eq
 8082c46:	2001      	moveq	r0, #1
 8082c48:	2000      	movne	r0, #0
 8082c4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8082c4e:	bf00      	nop

08082c50 <__aeabi_fcmplt>:
 8082c50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8082c54:	f7ff ffea 	bl	8082c2c <__aeabi_cfcmpeq>
 8082c58:	bf34      	ite	cc
 8082c5a:	2001      	movcc	r0, #1
 8082c5c:	2000      	movcs	r0, #0
 8082c5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8082c62:	bf00      	nop

08082c64 <__aeabi_fcmple>:
 8082c64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8082c68:	f7ff ffe0 	bl	8082c2c <__aeabi_cfcmpeq>
 8082c6c:	bf94      	ite	ls
 8082c6e:	2001      	movls	r0, #1
 8082c70:	2000      	movhi	r0, #0
 8082c72:	f85d fb08 	ldr.w	pc, [sp], #8
 8082c76:	bf00      	nop

08082c78 <__aeabi_fcmpge>:
 8082c78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8082c7c:	f7ff ffd2 	bl	8082c24 <__aeabi_cfrcmple>
 8082c80:	bf94      	ite	ls
 8082c82:	2001      	movls	r0, #1
 8082c84:	2000      	movhi	r0, #0
 8082c86:	f85d fb08 	ldr.w	pc, [sp], #8
 8082c8a:	bf00      	nop

08082c8c <__aeabi_fcmpgt>:
 8082c8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8082c90:	f7ff ffc8 	bl	8082c24 <__aeabi_cfrcmple>
 8082c94:	bf34      	ite	cc
 8082c96:	2001      	movcc	r0, #1
 8082c98:	2000      	movcs	r0, #0
 8082c9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8082c9e:	bf00      	nop

08082ca0 <__aeabi_uldivmod>:
 8082ca0:	b953      	cbnz	r3, 8082cb8 <__aeabi_uldivmod+0x18>
 8082ca2:	b94a      	cbnz	r2, 8082cb8 <__aeabi_uldivmod+0x18>
 8082ca4:	2900      	cmp	r1, #0
 8082ca6:	bf08      	it	eq
 8082ca8:	2800      	cmpeq	r0, #0
 8082caa:	bf1c      	itt	ne
 8082cac:	f04f 31ff 	movne.w	r1, #4294967295
 8082cb0:	f04f 30ff 	movne.w	r0, #4294967295
 8082cb4:	f000 b9a6 	b.w	8083004 <__aeabi_idiv0>
 8082cb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8082cbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8082cc0:	f000 f82a 	bl	8082d18 <__udivmoddi4>
 8082cc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8082cc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8082ccc:	b004      	add	sp, #16
 8082cce:	4770      	bx	lr

08082cd0 <__aeabi_d2ulz>:
 8082cd0:	b5d0      	push	{r4, r6, r7, lr}
 8082cd2:	2200      	movs	r2, #0
 8082cd4:	4b0e      	ldr	r3, [pc, #56]	; (8082d10 <__aeabi_d2ulz+0x40>)
 8082cd6:	4606      	mov	r6, r0
 8082cd8:	460f      	mov	r7, r1
 8082cda:	f7ff fb65 	bl	80823a8 <__aeabi_dmul>
 8082cde:	f7ff fe3b 	bl	8082958 <__aeabi_d2uiz>
 8082ce2:	4604      	mov	r4, r0
 8082ce4:	f7ff faea 	bl	80822bc <__aeabi_ui2d>
 8082ce8:	2200      	movs	r2, #0
 8082cea:	4b0a      	ldr	r3, [pc, #40]	; (8082d14 <__aeabi_d2ulz+0x44>)
 8082cec:	f7ff fb5c 	bl	80823a8 <__aeabi_dmul>
 8082cf0:	4602      	mov	r2, r0
 8082cf2:	460b      	mov	r3, r1
 8082cf4:	4630      	mov	r0, r6
 8082cf6:	4639      	mov	r1, r7
 8082cf8:	f7ff f9a2 	bl	8082040 <__aeabi_dsub>
 8082cfc:	f7ff fe2c 	bl	8082958 <__aeabi_d2uiz>
 8082d00:	4623      	mov	r3, r4
 8082d02:	2200      	movs	r2, #0
 8082d04:	ea42 0200 	orr.w	r2, r2, r0
 8082d08:	4610      	mov	r0, r2
 8082d0a:	4619      	mov	r1, r3
 8082d0c:	bdd0      	pop	{r4, r6, r7, pc}
 8082d0e:	bf00      	nop
 8082d10:	3df00000 	.word	0x3df00000
 8082d14:	41f00000 	.word	0x41f00000

08082d18 <__udivmoddi4>:
 8082d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8082d1c:	468c      	mov	ip, r1
 8082d1e:	460c      	mov	r4, r1
 8082d20:	4605      	mov	r5, r0
 8082d22:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8082d24:	2b00      	cmp	r3, #0
 8082d26:	d14f      	bne.n	8082dc8 <__udivmoddi4+0xb0>
 8082d28:	428a      	cmp	r2, r1
 8082d2a:	4617      	mov	r7, r2
 8082d2c:	d96b      	bls.n	8082e06 <__udivmoddi4+0xee>
 8082d2e:	fab2 fe82 	clz	lr, r2
 8082d32:	f1be 0f00 	cmp.w	lr, #0
 8082d36:	d00b      	beq.n	8082d50 <__udivmoddi4+0x38>
 8082d38:	f1ce 0520 	rsb	r5, lr, #32
 8082d3c:	fa20 f505 	lsr.w	r5, r0, r5
 8082d40:	fa01 f30e 	lsl.w	r3, r1, lr
 8082d44:	ea45 0c03 	orr.w	ip, r5, r3
 8082d48:	fa02 f70e 	lsl.w	r7, r2, lr
 8082d4c:	fa00 f50e 	lsl.w	r5, r0, lr
 8082d50:	0c39      	lsrs	r1, r7, #16
 8082d52:	fbbc f0f1 	udiv	r0, ip, r1
 8082d56:	b2ba      	uxth	r2, r7
 8082d58:	fb01 c310 	mls	r3, r1, r0, ip
 8082d5c:	fb00 f802 	mul.w	r8, r0, r2
 8082d60:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 8082d64:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
 8082d68:	45a0      	cmp	r8, r4
 8082d6a:	d909      	bls.n	8082d80 <__udivmoddi4+0x68>
 8082d6c:	19e4      	adds	r4, r4, r7
 8082d6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8082d72:	f080 8128 	bcs.w	8082fc6 <__udivmoddi4+0x2ae>
 8082d76:	45a0      	cmp	r8, r4
 8082d78:	f240 8125 	bls.w	8082fc6 <__udivmoddi4+0x2ae>
 8082d7c:	3802      	subs	r0, #2
 8082d7e:	443c      	add	r4, r7
 8082d80:	ebc8 0404 	rsb	r4, r8, r4
 8082d84:	fbb4 f3f1 	udiv	r3, r4, r1
 8082d88:	fb01 4c13 	mls	ip, r1, r3, r4
 8082d8c:	fb03 f202 	mul.w	r2, r3, r2
 8082d90:	b2ac      	uxth	r4, r5
 8082d92:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
 8082d96:	428a      	cmp	r2, r1
 8082d98:	d909      	bls.n	8082dae <__udivmoddi4+0x96>
 8082d9a:	19c9      	adds	r1, r1, r7
 8082d9c:	f103 34ff 	add.w	r4, r3, #4294967295
 8082da0:	f080 810f 	bcs.w	8082fc2 <__udivmoddi4+0x2aa>
 8082da4:	428a      	cmp	r2, r1
 8082da6:	f240 810c 	bls.w	8082fc2 <__udivmoddi4+0x2aa>
 8082daa:	3b02      	subs	r3, #2
 8082dac:	4439      	add	r1, r7
 8082dae:	1a8a      	subs	r2, r1, r2
 8082db0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8082db4:	2100      	movs	r1, #0
 8082db6:	2e00      	cmp	r6, #0
 8082db8:	d063      	beq.n	8082e82 <__udivmoddi4+0x16a>
 8082dba:	fa22 f20e 	lsr.w	r2, r2, lr
 8082dbe:	2300      	movs	r3, #0
 8082dc0:	e886 000c 	stmia.w	r6, {r2, r3}
 8082dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8082dc8:	428b      	cmp	r3, r1
 8082dca:	d907      	bls.n	8082ddc <__udivmoddi4+0xc4>
 8082dcc:	2e00      	cmp	r6, #0
 8082dce:	d056      	beq.n	8082e7e <__udivmoddi4+0x166>
 8082dd0:	2100      	movs	r1, #0
 8082dd2:	e886 0011 	stmia.w	r6, {r0, r4}
 8082dd6:	4608      	mov	r0, r1
 8082dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8082ddc:	fab3 f183 	clz	r1, r3
 8082de0:	2900      	cmp	r1, #0
 8082de2:	f040 8093 	bne.w	8082f0c <__udivmoddi4+0x1f4>
 8082de6:	42a3      	cmp	r3, r4
 8082de8:	d302      	bcc.n	8082df0 <__udivmoddi4+0xd8>
 8082dea:	4282      	cmp	r2, r0
 8082dec:	f200 80fe 	bhi.w	8082fec <__udivmoddi4+0x2d4>
 8082df0:	1a85      	subs	r5, r0, r2
 8082df2:	eb64 0303 	sbc.w	r3, r4, r3
 8082df6:	469c      	mov	ip, r3
 8082df8:	2001      	movs	r0, #1
 8082dfa:	2e00      	cmp	r6, #0
 8082dfc:	d041      	beq.n	8082e82 <__udivmoddi4+0x16a>
 8082dfe:	e886 1020 	stmia.w	r6, {r5, ip}
 8082e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8082e06:	b912      	cbnz	r2, 8082e0e <__udivmoddi4+0xf6>
 8082e08:	2701      	movs	r7, #1
 8082e0a:	fbb7 f7f2 	udiv	r7, r7, r2
 8082e0e:	fab7 fe87 	clz	lr, r7
 8082e12:	f1be 0f00 	cmp.w	lr, #0
 8082e16:	d136      	bne.n	8082e86 <__udivmoddi4+0x16e>
 8082e18:	1be4      	subs	r4, r4, r7
 8082e1a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8082e1e:	fa1f f987 	uxth.w	r9, r7
 8082e22:	2101      	movs	r1, #1
 8082e24:	fbb4 f3f8 	udiv	r3, r4, r8
 8082e28:	fb08 4413 	mls	r4, r8, r3, r4
 8082e2c:	fb09 f203 	mul.w	r2, r9, r3
 8082e30:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 8082e34:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
 8082e38:	42a2      	cmp	r2, r4
 8082e3a:	d907      	bls.n	8082e4c <__udivmoddi4+0x134>
 8082e3c:	19e4      	adds	r4, r4, r7
 8082e3e:	f103 30ff 	add.w	r0, r3, #4294967295
 8082e42:	d202      	bcs.n	8082e4a <__udivmoddi4+0x132>
 8082e44:	42a2      	cmp	r2, r4
 8082e46:	f200 80d3 	bhi.w	8082ff0 <__udivmoddi4+0x2d8>
 8082e4a:	4603      	mov	r3, r0
 8082e4c:	1aa4      	subs	r4, r4, r2
 8082e4e:	fbb4 f0f8 	udiv	r0, r4, r8
 8082e52:	fb08 4810 	mls	r8, r8, r0, r4
 8082e56:	fb09 f900 	mul.w	r9, r9, r0
 8082e5a:	b2ac      	uxth	r4, r5
 8082e5c:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
 8082e60:	4591      	cmp	r9, r2
 8082e62:	d907      	bls.n	8082e74 <__udivmoddi4+0x15c>
 8082e64:	19d2      	adds	r2, r2, r7
 8082e66:	f100 34ff 	add.w	r4, r0, #4294967295
 8082e6a:	d202      	bcs.n	8082e72 <__udivmoddi4+0x15a>
 8082e6c:	4591      	cmp	r9, r2
 8082e6e:	f200 80ba 	bhi.w	8082fe6 <__udivmoddi4+0x2ce>
 8082e72:	4620      	mov	r0, r4
 8082e74:	ebc9 0202 	rsb	r2, r9, r2
 8082e78:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8082e7c:	e79b      	b.n	8082db6 <__udivmoddi4+0x9e>
 8082e7e:	4631      	mov	r1, r6
 8082e80:	4630      	mov	r0, r6
 8082e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8082e86:	fa07 f70e 	lsl.w	r7, r7, lr
 8082e8a:	f1ce 0c20 	rsb	ip, lr, #32
 8082e8e:	fa24 f30c 	lsr.w	r3, r4, ip
 8082e92:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8082e96:	fbb3 faf8 	udiv	sl, r3, r8
 8082e9a:	fa1f f987 	uxth.w	r9, r7
 8082e9e:	fb08 351a 	mls	r5, r8, sl, r3
 8082ea2:	fa20 fc0c 	lsr.w	ip, r0, ip
 8082ea6:	fa04 f40e 	lsl.w	r4, r4, lr
 8082eaa:	fb0a fb09 	mul.w	fp, sl, r9
 8082eae:	ea4c 0c04 	orr.w	ip, ip, r4
 8082eb2:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8082eb6:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
 8082eba:	459b      	cmp	fp, r3
 8082ebc:	fa00 f50e 	lsl.w	r5, r0, lr
 8082ec0:	d90a      	bls.n	8082ed8 <__udivmoddi4+0x1c0>
 8082ec2:	19db      	adds	r3, r3, r7
 8082ec4:	f10a 32ff 	add.w	r2, sl, #4294967295
 8082ec8:	f080 808b 	bcs.w	8082fe2 <__udivmoddi4+0x2ca>
 8082ecc:	459b      	cmp	fp, r3
 8082ece:	f240 8088 	bls.w	8082fe2 <__udivmoddi4+0x2ca>
 8082ed2:	f1aa 0a02 	sub.w	sl, sl, #2
 8082ed6:	443b      	add	r3, r7
 8082ed8:	ebcb 0303 	rsb	r3, fp, r3
 8082edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8082ee0:	fb08 3310 	mls	r3, r8, r0, r3
 8082ee4:	fb00 f409 	mul.w	r4, r0, r9
 8082ee8:	fa1f fc8c 	uxth.w	ip, ip
 8082eec:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 8082ef0:	429c      	cmp	r4, r3
 8082ef2:	d907      	bls.n	8082f04 <__udivmoddi4+0x1ec>
 8082ef4:	19db      	adds	r3, r3, r7
 8082ef6:	f100 32ff 	add.w	r2, r0, #4294967295
 8082efa:	d26e      	bcs.n	8082fda <__udivmoddi4+0x2c2>
 8082efc:	429c      	cmp	r4, r3
 8082efe:	d96c      	bls.n	8082fda <__udivmoddi4+0x2c2>
 8082f00:	3802      	subs	r0, #2
 8082f02:	443b      	add	r3, r7
 8082f04:	1b1c      	subs	r4, r3, r4
 8082f06:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
 8082f0a:	e78b      	b.n	8082e24 <__udivmoddi4+0x10c>
 8082f0c:	f1c1 0e20 	rsb	lr, r1, #32
 8082f10:	408b      	lsls	r3, r1
 8082f12:	fa22 fc0e 	lsr.w	ip, r2, lr
 8082f16:	ea4c 0c03 	orr.w	ip, ip, r3
 8082f1a:	fa24 f70e 	lsr.w	r7, r4, lr
 8082f1e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8082f22:	fbb7 faf9 	udiv	sl, r7, r9
 8082f26:	fa1f f38c 	uxth.w	r3, ip
 8082f2a:	fb09 771a 	mls	r7, r9, sl, r7
 8082f2e:	fa20 f80e 	lsr.w	r8, r0, lr
 8082f32:	408c      	lsls	r4, r1
 8082f34:	fb0a f503 	mul.w	r5, sl, r3
 8082f38:	ea48 0404 	orr.w	r4, r8, r4
 8082f3c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8082f40:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 8082f44:	42bd      	cmp	r5, r7
 8082f46:	fa02 f201 	lsl.w	r2, r2, r1
 8082f4a:	fa00 fb01 	lsl.w	fp, r0, r1
 8082f4e:	d909      	bls.n	8082f64 <__udivmoddi4+0x24c>
 8082f50:	eb17 070c 	adds.w	r7, r7, ip
 8082f54:	f10a 30ff 	add.w	r0, sl, #4294967295
 8082f58:	d241      	bcs.n	8082fde <__udivmoddi4+0x2c6>
 8082f5a:	42bd      	cmp	r5, r7
 8082f5c:	d93f      	bls.n	8082fde <__udivmoddi4+0x2c6>
 8082f5e:	f1aa 0a02 	sub.w	sl, sl, #2
 8082f62:	4467      	add	r7, ip
 8082f64:	1b7f      	subs	r7, r7, r5
 8082f66:	fbb7 f5f9 	udiv	r5, r7, r9
 8082f6a:	fb09 7715 	mls	r7, r9, r5, r7
 8082f6e:	fb05 f303 	mul.w	r3, r5, r3
 8082f72:	b2a4      	uxth	r4, r4
 8082f74:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8082f78:	42bb      	cmp	r3, r7
 8082f7a:	d908      	bls.n	8082f8e <__udivmoddi4+0x276>
 8082f7c:	eb17 070c 	adds.w	r7, r7, ip
 8082f80:	f105 30ff 	add.w	r0, r5, #4294967295
 8082f84:	d227      	bcs.n	8082fd6 <__udivmoddi4+0x2be>
 8082f86:	42bb      	cmp	r3, r7
 8082f88:	d925      	bls.n	8082fd6 <__udivmoddi4+0x2be>
 8082f8a:	3d02      	subs	r5, #2
 8082f8c:	4467      	add	r7, ip
 8082f8e:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
 8082f92:	fba0 8902 	umull	r8, r9, r0, r2
 8082f96:	1aff      	subs	r7, r7, r3
 8082f98:	454f      	cmp	r7, r9
 8082f9a:	4645      	mov	r5, r8
 8082f9c:	464c      	mov	r4, r9
 8082f9e:	d314      	bcc.n	8082fca <__udivmoddi4+0x2b2>
 8082fa0:	d029      	beq.n	8082ff6 <__udivmoddi4+0x2de>
 8082fa2:	b366      	cbz	r6, 8082ffe <__udivmoddi4+0x2e6>
 8082fa4:	ebbb 0305 	subs.w	r3, fp, r5
 8082fa8:	eb67 0704 	sbc.w	r7, r7, r4
 8082fac:	fa07 fe0e 	lsl.w	lr, r7, lr
 8082fb0:	40cb      	lsrs	r3, r1
 8082fb2:	40cf      	lsrs	r7, r1
 8082fb4:	ea4e 0303 	orr.w	r3, lr, r3
 8082fb8:	e886 0088 	stmia.w	r6, {r3, r7}
 8082fbc:	2100      	movs	r1, #0
 8082fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8082fc2:	4623      	mov	r3, r4
 8082fc4:	e6f3      	b.n	8082dae <__udivmoddi4+0x96>
 8082fc6:	4618      	mov	r0, r3
 8082fc8:	e6da      	b.n	8082d80 <__udivmoddi4+0x68>
 8082fca:	ebb8 0502 	subs.w	r5, r8, r2
 8082fce:	eb69 040c 	sbc.w	r4, r9, ip
 8082fd2:	3801      	subs	r0, #1
 8082fd4:	e7e5      	b.n	8082fa2 <__udivmoddi4+0x28a>
 8082fd6:	4605      	mov	r5, r0
 8082fd8:	e7d9      	b.n	8082f8e <__udivmoddi4+0x276>
 8082fda:	4610      	mov	r0, r2
 8082fdc:	e792      	b.n	8082f04 <__udivmoddi4+0x1ec>
 8082fde:	4682      	mov	sl, r0
 8082fe0:	e7c0      	b.n	8082f64 <__udivmoddi4+0x24c>
 8082fe2:	4692      	mov	sl, r2
 8082fe4:	e778      	b.n	8082ed8 <__udivmoddi4+0x1c0>
 8082fe6:	3802      	subs	r0, #2
 8082fe8:	443a      	add	r2, r7
 8082fea:	e743      	b.n	8082e74 <__udivmoddi4+0x15c>
 8082fec:	4608      	mov	r0, r1
 8082fee:	e704      	b.n	8082dfa <__udivmoddi4+0xe2>
 8082ff0:	3b02      	subs	r3, #2
 8082ff2:	443c      	add	r4, r7
 8082ff4:	e72a      	b.n	8082e4c <__udivmoddi4+0x134>
 8082ff6:	45c3      	cmp	fp, r8
 8082ff8:	d3e7      	bcc.n	8082fca <__udivmoddi4+0x2b2>
 8082ffa:	463c      	mov	r4, r7
 8082ffc:	e7d1      	b.n	8082fa2 <__udivmoddi4+0x28a>
 8082ffe:	4631      	mov	r1, r6
 8083000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08083004 <__aeabi_idiv0>:
 8083004:	4770      	bx	lr
 8083006:	bf00      	nop

08083008 <__cxa_atexit>:
 8083008:	b510      	push	{r4, lr}
 808300a:	4c05      	ldr	r4, [pc, #20]	; (8083020 <__cxa_atexit+0x18>)
 808300c:	4613      	mov	r3, r2
 808300e:	b12c      	cbz	r4, 808301c <__cxa_atexit+0x14>
 8083010:	460a      	mov	r2, r1
 8083012:	4601      	mov	r1, r0
 8083014:	2002      	movs	r0, #2
 8083016:	f3af 8000 	nop.w
 808301a:	bd10      	pop	{r4, pc}
 808301c:	4620      	mov	r0, r4
 808301e:	bd10      	pop	{r4, pc}
 8083020:	00000000 	.word	0x00000000

08083024 <memcpy>:
 8083024:	b510      	push	{r4, lr}
 8083026:	1e43      	subs	r3, r0, #1
 8083028:	440a      	add	r2, r1
 808302a:	4291      	cmp	r1, r2
 808302c:	d004      	beq.n	8083038 <memcpy+0x14>
 808302e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8083032:	f803 4f01 	strb.w	r4, [r3, #1]!
 8083036:	e7f8      	b.n	808302a <memcpy+0x6>
 8083038:	bd10      	pop	{r4, pc}

0808303a <memset>:
 808303a:	4603      	mov	r3, r0
 808303c:	4402      	add	r2, r0
 808303e:	4293      	cmp	r3, r2
 8083040:	d002      	beq.n	8083048 <memset+0xe>
 8083042:	f803 1b01 	strb.w	r1, [r3], #1
 8083046:	e7fa      	b.n	808303e <memset+0x4>
 8083048:	4770      	bx	lr
	...

0808304c <srand>:
 808304c:	b538      	push	{r3, r4, r5, lr}
 808304e:	4b12      	ldr	r3, [pc, #72]	; (8083098 <srand+0x4c>)
 8083050:	4605      	mov	r5, r0
 8083052:	681c      	ldr	r4, [r3, #0]
 8083054:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8083056:	b9d3      	cbnz	r3, 808308e <srand+0x42>
 8083058:	2018      	movs	r0, #24
 808305a:	f7fd fbf5 	bl	8080848 <malloc>
 808305e:	f243 330e 	movw	r3, #13070	; 0x330e
 8083062:	63a0      	str	r0, [r4, #56]	; 0x38
 8083064:	8003      	strh	r3, [r0, #0]
 8083066:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 808306a:	8043      	strh	r3, [r0, #2]
 808306c:	f241 2334 	movw	r3, #4660	; 0x1234
 8083070:	8083      	strh	r3, [r0, #4]
 8083072:	f24e 636d 	movw	r3, #58989	; 0xe66d
 8083076:	80c3      	strh	r3, [r0, #6]
 8083078:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 808307c:	8103      	strh	r3, [r0, #8]
 808307e:	2305      	movs	r3, #5
 8083080:	8143      	strh	r3, [r0, #10]
 8083082:	230b      	movs	r3, #11
 8083084:	8183      	strh	r3, [r0, #12]
 8083086:	2201      	movs	r2, #1
 8083088:	2300      	movs	r3, #0
 808308a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 808308e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8083090:	2200      	movs	r2, #0
 8083092:	611d      	str	r5, [r3, #16]
 8083094:	615a      	str	r2, [r3, #20]
 8083096:	bd38      	pop	{r3, r4, r5, pc}
 8083098:	20000068 	.word	0x20000068

0808309c <strcpy>:
 808309c:	4603      	mov	r3, r0
 808309e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80830a2:	f803 2b01 	strb.w	r2, [r3], #1
 80830a6:	2a00      	cmp	r2, #0
 80830a8:	d1f9      	bne.n	808309e <strcpy+0x2>
 80830aa:	4770      	bx	lr

080830ac <strdup>:
 80830ac:	4b02      	ldr	r3, [pc, #8]	; (80830b8 <strdup+0xc>)
 80830ae:	4601      	mov	r1, r0
 80830b0:	6818      	ldr	r0, [r3, #0]
 80830b2:	f000 b803 	b.w	80830bc <_strdup_r>
 80830b6:	bf00      	nop
 80830b8:	20000068 	.word	0x20000068

080830bc <_strdup_r>:
 80830bc:	b570      	push	{r4, r5, r6, lr}
 80830be:	4606      	mov	r6, r0
 80830c0:	4608      	mov	r0, r1
 80830c2:	460c      	mov	r4, r1
 80830c4:	f000 f80d 	bl	80830e2 <strlen>
 80830c8:	1c45      	adds	r5, r0, #1
 80830ca:	4629      	mov	r1, r5
 80830cc:	4630      	mov	r0, r6
 80830ce:	f7fd fbdb 	bl	8080888 <_malloc_r>
 80830d2:	4606      	mov	r6, r0
 80830d4:	b118      	cbz	r0, 80830de <_strdup_r+0x22>
 80830d6:	462a      	mov	r2, r5
 80830d8:	4621      	mov	r1, r4
 80830da:	f7ff ffa3 	bl	8083024 <memcpy>
 80830de:	4630      	mov	r0, r6
 80830e0:	bd70      	pop	{r4, r5, r6, pc}

080830e2 <strlen>:
 80830e2:	4603      	mov	r3, r0
 80830e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80830e8:	2a00      	cmp	r2, #0
 80830ea:	d1fb      	bne.n	80830e4 <strlen+0x2>
 80830ec:	1a18      	subs	r0, r3, r0
 80830ee:	3801      	subs	r0, #1
 80830f0:	4770      	bx	lr

080830f2 <link_code_end>:
	...

080830f4 <dynalib_user>:
 80830f4:	0021 0808 0061 0808 008d 0808 0091 0808     !...a...........
 8083104:	0000 0000 6944 7473 6e61 6563 4d20 6165     ....Distance Mea
 8083114:	7573 6572 3a64 0020 5635 5020 776f 7265     sured: .5V Power
 8083124:	4f20 006e 5635 5020 776f 7265 4f20 6666      On.5V Power Off
 8083134:	6400 7369 6174 636e 0065 6f63 6e75 0074     .distance.count.
 8083144:	6974 746c 4c00 676f 6967 676e 6120 646e     tilt.Logging and
 8083154:	7020 736f 6974 676e 6420 7461 2e61 002e      posting data...
 8083164:	6552 6573 2074 6176 756c 7365 7420 206f     Reset values to 
 8083174:	657a 6f72 2e2e 4c00 676f 6967 676e 6420     zero...Logging d
 8083184:	7461 2061 6e69 0009 4d20 6e69 7475 7365     ata in.. Minutes
 8083194:	093a 2000 6553 6f63 646e 0073 2e2e 7a2e     :.. Seconds....z
 80831a4:	7a7a 2e2e 002e 4154 504d 5245 4420 7465     zz....TAMPER Det
 80831b4:	6365 6574 3a64 0020 7254 7361 2068 6e69     ected: .Trash in
 80831c4:	6573 7472 6465 0021 6f43 6e75 2074 6e69     serted!.Count in
 80831d4:	7263 6165 6573 2064 6f6e 3a77 0020 0000     creased now: ...

080831e4 <_ZTV8SPIClass>:
	...
 80831ec:	0899 0808 089b 0808 616e 006e 766f 0066     ........nan.ovf.
 80831fc:	6e69 0066 6162 6475 5300 7265 6169 006c     inf.baud.Serial.
 808320c:	5355 5342 7265 6169 316c 7400 7079 0065     USBSerial1.type.
 808321c:	6170 6172 006d 6d63 0064 6469 6800 646e     param.cmd.id.hnd
 808322c:	7300 7274 006d 6966 746c 6c00 6c76 6100     .strm.filt.lvl.a
 808323c:	6464 6148 646e 656c 0072 6572 6f6d 6576     ddHandler.remove
 808324c:	6148 646e 656c 0072 6e65 6d75 6148 646e     Handler.enumHand
 808325c:	656c 7372 4a00 4f53 534e 7274 6165 4c6d     lers.JSONStreamL
 808326c:	676f 6148 646e 656c 0072 7061 0070 3025     ogHandler.app.%0
 808327c:	3031 2075 5d00 0020 6425 2c00 0020 2928     10u .] .%d., .()
 808328c:	203a 2000 005b 6f63 6564 3d20 0020 6925     : . [.code = .%i
 808329c:	6400 7465 6961 736c 3d20 0020 0a0d 6c00     .details = ....l
 80832ac:	006e 6e66 6300 646f 0065 6564 6174 6c69     n.fn.code.detail
 80832bc:	6e00 6e6f 0065 7274 6361 0065 6e69 6f66     .none.trace.info
 80832cc:	7700 7261 006e 7265 6f72 0072 6170 696e     .warn.error.pani
 80832dc:	0063 6c61 006c 005a 2b25 3330 3a64 3025     c.all.Z.%+03d:%0
 80832ec:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
 80832fc:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

0808330c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 8083314:	10bd 0808 10c3 0808 1107 0808 10d1 0808     ................
 8083324:	10bf 0808                                   ....

08083328 <_ZTV9IPAddress>:
	...
 8083330:	1655 0808 1645 0808 1647 0808               U...E...G...

0808333c <_ZTV9USBSerial>:
	...
 8083344:	16e9 0808 1739 0808 1747 0808 0c3d 0808     ....9...G...=...
 8083354:	1725 0808 16eb 0808 1701 0808 1733 0808     %...........3...
 8083364:	1717 0808 16e5 0808                         ........

0808336c <_ZTVN5spark13CellularClassE>:
	...
 8083374:	1923 0808 1919 0808 190f 0808 1881 0808     #...............
 8083384:	1903 0808 18f7 0808 18eb 0808 18e3 0808     ................
 8083394:	18d9 0808 18cf 0808 188b 0808               ............

080833a0 <_ZTV11USARTSerial>:
	...
 80833a8:	195d 0808 19ad 0808 19bb 0808 0c3d 0808     ]...........=...
 80833b8:	1971 0808 1993 0808 197f 0808 19a7 0808     q...............
 80833c8:	195f 0808 1963 0808                         _...c...

080833d0 <_ZTV7TwoWire>:
	...
 80833d8:	1a89 0808 1ad3 0808 1aab 0808 1a8b 0808     ................
 80833e8:	1ab3 0808 1abb 0808 1ac3 0808 1acb 0808     ................

080833f8 <_ZTVN5spark12NetworkClassE>:
	...
 8083400:	1b0d 0808 1b17 0808 1b21 0808 1b2b 0808     ........!...+...
 8083410:	1b35 0808 1b41 0808 1b4d 0808 1b59 0808     5...A...M...Y...
 8083420:	1b61 0808 1b6b 0808 1b75 0808               a...k...u...

0808342c <__sf_fake_stdin>:
	...

0808344c <__sf_fake_stdout>:
	...

0808346c <__sf_fake_stderr>:
	...
 808348c:	0043                                        C.

0808348e <link_const_variable_data_end>:
	...

08083490 <link_constructors_location>:
 8083490:	080804b1 	.word	0x080804b1
 8083494:	080808d9 	.word	0x080808d9
 8083498:	08080ee9 	.word	0x08080ee9
 808349c:	08080ef9 	.word	0x08080ef9
 80834a0:	08080f51 	.word	0x08080f51
 80834a4:	0808192d 	.word	0x0808192d
 80834a8:	08081bc1 	.word	0x08081bc1
 80834ac:	08081cc9 	.word	0x08081cc9
 80834b0:	08081d25 	.word	0x08081d25
 80834b4:	08081da9 	.word	0x08081da9
 80834b8:	08081e2d 	.word	0x08081e2d
 80834bc:	08081ef1 	.word	0x08081ef1
 80834c0:	08081fb5 	.word	0x08081fb5

080834c4 <link_constructors_end>:
	...
