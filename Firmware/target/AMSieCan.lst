
/Users/danielhowe/CodeDevelopmentFolder/TrashBinThnkg/AMSieCan/AMSieCan/target/AMSieCan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b68  08080018  08080018  00010018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.exidx    00000008  08082b80  08082b80  00012b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .backup       00000004  40024000  08082b88  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  20000400  08082b8c  00020400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000005dc  20000468  20000468  00030468  2**2
                  ALLOC
  6 .module_info_suffix 00000028  08082bf4  08082bf4  00022bf4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  08082c1c  08082c1c  00022c1c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00090f81  00000000  00000000  00022c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000dc3f  00000000  00000000  000b3ba1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00012407  00000000  00000000  000c17e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001c90  00000000  00000000  000d3be7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002f08  00000000  00000000  000d5877  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00022cd8  00000000  00000000  000d877f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001f4fc  00000000  00000000  000fb457  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00096001  00000000  00000000  0011a953  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000b304  00000000  00000000  001b0954  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080018 <user_part_module>:
 8080018:	80 28 08 08                                         .(..

0808001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 808001c:	4809      	ldr	r0, [pc, #36]	; (8080044 <module_user_pre_init+0x28>)
 808001e:	490a      	ldr	r1, [pc, #40]	; (8080048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 8080020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080022:	4288      	cmp	r0, r1
 8080024:	d005      	beq.n	8080032 <module_user_pre_init+0x16>
 8080026:	4a09      	ldr	r2, [pc, #36]	; (808004c <module_user_pre_init+0x30>)
 8080028:	4282      	cmp	r2, r0
 808002a:	d002      	beq.n	8080032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 808002c:	1a12      	subs	r2, r2, r0
 808002e:	f002 fbbf 	bl	80827b0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080032:	4807      	ldr	r0, [pc, #28]	; (8080050 <module_user_pre_init+0x34>)
 8080034:	4a07      	ldr	r2, [pc, #28]	; (8080054 <module_user_pre_init+0x38>)
 8080036:	2100      	movs	r1, #0
 8080038:	1a12      	subs	r2, r2, r0
 808003a:	f002 fbc4 	bl	80827c6 <memset>
    return &link_heap_start;
}
 808003e:	4806      	ldr	r0, [pc, #24]	; (8080058 <module_user_pre_init+0x3c>)
 8080040:	bd08      	pop	{r3, pc}
 8080042:	bf00      	nop
 8080044:	20000400 	.word	0x20000400
 8080048:	08082b8c 	.word	0x08082b8c
 808004c:	20000468 	.word	0x20000468
 8080050:	20000468 	.word	0x20000468
 8080054:	20000a44 	.word	0x20000a44
 8080058:	20000a44 	.word	0x20000a44

0808005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 808005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 808005e:	f001 fb03 	bl	8081668 <module_user_init_hook>
 8080062:	4b07      	ldr	r3, [pc, #28]	; (8080080 <module_user_init+0x24>)
 8080064:	4c07      	ldr	r4, [pc, #28]	; (8080084 <module_user_init+0x28>)
 8080066:	461e      	mov	r6, r3
 8080068:	1ae4      	subs	r4, r4, r3
 808006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808006c:	2500      	movs	r5, #0
 808006e:	42a5      	cmp	r5, r4
 8080070:	d004      	beq.n	808007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 8080072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8080076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080078:	3501      	adds	r5, #1
 808007a:	e7f8      	b.n	808006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 808007c:	bd70      	pop	{r4, r5, r6, pc}
 808007e:	bf00      	nop
 8080080:	08082b44 	.word	0x08082b44
 8080084:	08082b74 	.word	0x08082b74

08080088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 8080088:	f000 b860 	b.w	808014c <setup>

0808008c <module_user_loop>:
}

void module_user_loop() {
 808008c:	b508      	push	{r3, lr}
    loop();
 808008e:	f000 f8d1 	bl	8080234 <loop>
    _post_loop();
}
 8080092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 8080096:	f001 baa9 	b.w	80815ec <_post_loop>

0808009a <_Znwj>:
 808009a:	f000 ba87 	b.w	80805ac <malloc>

0808009e <_ZdlPv>:
 808009e:	f000 ba8d 	b.w	80805bc <free>

080800a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800a2:	7800      	ldrb	r0, [r0, #0]
 80800a4:	fab0 f080 	clz	r0, r0
 80800a8:	0940      	lsrs	r0, r0, #5
 80800aa:	4770      	bx	lr

080800ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800ac:	2301      	movs	r3, #1
 80800ae:	7003      	strb	r3, [r0, #0]
 80800b0:	4770      	bx	lr
 80800b2:	0000      	movs	r0, r0
 80800b4:	0000      	movs	r0, r0
	...

080800b8 <_Z6hcDistv>:
// Pin assignments for the HC-SR04
const int ECHO_PIN = D6;
const int TRIGGER_PIN = D2;

double hcDist()
{ // Returns:  negative value if no valid distance is found, or a positive value indicating the distance in inches
 80800b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Prepare sensor to get distance
  digitalWrite(TRIGGER_PIN, LOW);
 80800ba:	2100      	movs	r1, #0
 80800bc:	2002      	movs	r0, #2
 80800be:	f001 fb34 	bl	808172a <digitalWrite>
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80800c2:	2002      	movs	r0, #2
 80800c4:	f000 f936 	bl	8080334 <HAL_Delay_Microseconds>
  delayMicroseconds(2);
  //-- Send ultrasonic pulse trigger
  digitalWrite(TRIGGER_PIN,HIGH);
 80800c8:	2101      	movs	r1, #1
 80800ca:	2002      	movs	r0, #2
 80800cc:	f001 fb2d 	bl	808172a <digitalWrite>
 80800d0:	200a      	movs	r0, #10
 80800d2:	f000 f92f 	bl	8080334 <HAL_Delay_Microseconds>
  delayMicroseconds(10);
  digitalWrite(TRIGGER_PIN, LOW);
 80800d6:	2100      	movs	r1, #0
 80800d8:	2002      	movs	r0, #2
 80800da:	f001 fb26 	bl	808172a <digitalWrite>
  //-- Stop

  // Read distance
  double distance = pulseIn(ECHO_PIN, HIGH) * 0.0133 / 2;
 80800de:	2101      	movs	r1, #1
 80800e0:	2006      	movs	r0, #6
 80800e2:	f001 fb3b 	bl	808175c <pulseIn>
 80800e6:	f001 fe33 	bl	8081d50 <__aeabi_ui2d>
 80800ea:	a313      	add	r3, pc, #76	; (adr r3, 8080138 <_Z6hcDistv+0x80>)
 80800ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80800f0:	f001 fea4 	bl	8081e3c <__aeabi_dmul>
 80800f4:	2200      	movs	r2, #0
 80800f6:	4b12      	ldr	r3, [pc, #72]	; (8080140 <_Z6hcDistv+0x88>)
 80800f8:	f001 fea0 	bl	8081e3c <__aeabi_dmul>
 80800fc:	460d      	mov	r5, r1
 80800fe:	4604      	mov	r4, r0
  Serial.print("Distance Measured: ");
 8080100:	f001 f984 	bl	808140c <_Z16_fetch_usbserialv>
 8080104:	490f      	ldr	r1, [pc, #60]	; (8080144 <_Z6hcDistv+0x8c>)
 8080106:	f000 fdfd 	bl	8080d04 <_ZN5Print5printEPKc>
  Serial.println(distance);
 808010a:	f001 f97f 	bl	808140c <_Z16_fetch_usbserialv>
 808010e:	2302      	movs	r3, #2
 8080110:	9300      	str	r3, [sp, #0]
 8080112:	4622      	mov	r2, r4
 8080114:	462b      	mov	r3, r5
 8080116:	f000 ff0f 	bl	8080f38 <_ZN5Print7printlnEdi>
  if (distance <= 0) return -1.0; // Failed reading
 808011a:	2200      	movs	r2, #0
 808011c:	2300      	movs	r3, #0
 808011e:	4620      	mov	r0, r4
 8080120:	4629      	mov	r1, r5
 8080122:	f002 f907 	bl	8082334 <__aeabi_dcmple>
 8080126:	b910      	cbnz	r0, 808012e <_Z6hcDistv+0x76>
  else { return distance; } // Good reading
 8080128:	4620      	mov	r0, r4
 808012a:	4629      	mov	r1, r5
 808012c:	e001      	b.n	8080132 <_Z6hcDistv+0x7a>

  // Read distance
  double distance = pulseIn(ECHO_PIN, HIGH) * 0.0133 / 2;
  Serial.print("Distance Measured: ");
  Serial.println(distance);
  if (distance <= 0) return -1.0; // Failed reading
 808012e:	4906      	ldr	r1, [pc, #24]	; (8080148 <_Z6hcDistv+0x90>)
 8080130:	2000      	movs	r0, #0
  else { return distance; } // Good reading
}
 8080132:	b003      	add	sp, #12
 8080134:	bd30      	pop	{r4, r5, pc}
 8080136:	bf00      	nop
 8080138:	c84b5dcc 	.word	0xc84b5dcc
 808013c:	3f8b3d07 	.word	0x3f8b3d07
 8080140:	3fe00000 	.word	0x3fe00000
 8080144:	08082894 	.word	0x08082894
 8080148:	bff00000 	.word	0xbff00000

0808014c <setup>:
  Particle.publish("count", String(p_count), PRIVATE);
  Particle.publish("debug", String(p_debug), PRIVATE);
}

void setup()
{ // Input: None
 808014c:	b508      	push	{r3, lr}
  // Output: None
  // Description: 
  // Runs once to setup the device into operating mode and the main loop below
  // Make the pins for the ultrasonic and counter accept input, or send output (hz)
  pinMode(ECHO_PIN, INPUT);
 808014e:	2100      	movs	r1, #0
 8080150:	2006      	movs	r0, #6
 8080152:	f001 fad9 	bl	8081708 <pinMode>
  pinMode(TRIGGER_PIN, OUTPUT);
 8080156:	2101      	movs	r1, #1
 8080158:	2002      	movs	r0, #2
 808015a:	f001 fad5 	bl	8081708 <pinMode>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 808015e:	f000 f8f1 	bl	8080344 <HAL_Timer_Get_Milli_Seconds>

  // Initialize sampling time to now!
  nextLog = millis();
 8080162:	4b01      	ldr	r3, [pc, #4]	; (8080168 <setup+0x1c>)
 8080164:	6018      	str	r0, [r3, #0]
 8080166:	bd08      	pop	{r3, pc}
 8080168:	20000470 	.word	0x20000470

0808016c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 808016c:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 808016e:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 8080170:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 8080172:	b17c      	cbz	r4, 8080194 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 8080174:	6863      	ldr	r3, [r4, #4]
 8080176:	3b01      	subs	r3, #1
 8080178:	6063      	str	r3, [r4, #4]
 808017a:	b95b      	cbnz	r3, 8080194 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 808017c:	6823      	ldr	r3, [r4, #0]
 808017e:	4620      	mov	r0, r4
 8080180:	689b      	ldr	r3, [r3, #8]
 8080182:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8080184:	68a3      	ldr	r3, [r4, #8]
 8080186:	3b01      	subs	r3, #1
 8080188:	60a3      	str	r3, [r4, #8]
 808018a:	b91b      	cbnz	r3, 8080194 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 808018c:	6823      	ldr	r3, [r4, #0]
 808018e:	4620      	mov	r0, r4
 8080190:	68db      	ldr	r3, [r3, #12]
 8080192:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 8080194:	4628      	mov	r0, r5
 8080196:	bd38      	pop	{r3, r4, r5, pc}

08080198 <_Z7logDatadii>:
  if (distance <= 0) return -1.0; // Failed reading
  else { return distance; } // Good reading
}

void logData(double p_distanceInches, int p_count, int p_debug)
{
 8080198:	b570      	push	{r4, r5, r6, lr}
 808019a:	4616      	mov	r6, r2
 808019c:	461d      	mov	r5, r3
 808019e:	b088      	sub	sp, #32
 80801a0:	4c20      	ldr	r4, [pc, #128]	; (8080224 <_Z7logDatadii+0x8c>)
  Particle.publish("distance", String(p_distanceInches), PRIVATE);
 80801a2:	2306      	movs	r3, #6
 80801a4:	9300      	str	r3, [sp, #0]
 80801a6:	4602      	mov	r2, r0
 80801a8:	460b      	mov	r3, r1
 80801aa:	a804      	add	r0, sp, #16
 80801ac:	f000 fffa 	bl	80811a4 <_ZN6StringC1Edi>
 80801b0:	7823      	ldrb	r3, [r4, #0]
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80801b2:	9a04      	ldr	r2, [sp, #16]
 80801b4:	491c      	ldr	r1, [pc, #112]	; (8080228 <_Z7logDatadii+0x90>)
 80801b6:	f88d 3000 	strb.w	r3, [sp]
 80801ba:	a802      	add	r0, sp, #8
 80801bc:	233c      	movs	r3, #60	; 0x3c
 80801be:	f000 fb95 	bl	80808ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80801c2:	a803      	add	r0, sp, #12
 80801c4:	f7ff ffd2 	bl	808016c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80801c8:	a804      	add	r0, sp, #16
 80801ca:	f000 ff59 	bl	8081080 <_ZN6StringD1Ev>
  Particle.publish("count", String(p_count), PRIVATE);
 80801ce:	4631      	mov	r1, r6
 80801d0:	220a      	movs	r2, #10
 80801d2:	a804      	add	r0, sp, #16
 80801d4:	f000 ffbf 	bl	8081156 <_ZN6StringC1Eih>
 80801d8:	7823      	ldrb	r3, [r4, #0]
 80801da:	9a04      	ldr	r2, [sp, #16]
 80801dc:	4913      	ldr	r1, [pc, #76]	; (808022c <_Z7logDatadii+0x94>)
 80801de:	f88d 3000 	strb.w	r3, [sp]
 80801e2:	a802      	add	r0, sp, #8
 80801e4:	233c      	movs	r3, #60	; 0x3c
 80801e6:	f000 fb81 	bl	80808ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80801ea:	a803      	add	r0, sp, #12
 80801ec:	f7ff ffbe 	bl	808016c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80801f0:	a804      	add	r0, sp, #16
 80801f2:	f000 ff45 	bl	8081080 <_ZN6StringD1Ev>
  Particle.publish("debug", String(p_debug), PRIVATE);
 80801f6:	4629      	mov	r1, r5
 80801f8:	220a      	movs	r2, #10
 80801fa:	a804      	add	r0, sp, #16
 80801fc:	f000 ffab 	bl	8081156 <_ZN6StringC1Eih>
 8080200:	7823      	ldrb	r3, [r4, #0]
 8080202:	9a04      	ldr	r2, [sp, #16]
 8080204:	490a      	ldr	r1, [pc, #40]	; (8080230 <_Z7logDatadii+0x98>)
 8080206:	f88d 3000 	strb.w	r3, [sp]
 808020a:	a802      	add	r0, sp, #8
 808020c:	233c      	movs	r3, #60	; 0x3c
 808020e:	f000 fb6d 	bl	80808ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8080212:	a803      	add	r0, sp, #12
 8080214:	f7ff ffaa 	bl	808016c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080218:	a804      	add	r0, sp, #16
 808021a:	f000 ff31 	bl	8081080 <_ZN6StringD1Ev>
}
 808021e:	b008      	add	sp, #32
 8080220:	bd70      	pop	{r4, r5, r6, pc}
 8080222:	bf00      	nop
 8080224:	2000046c 	.word	0x2000046c
 8080228:	080828a8 	.word	0x080828a8
 808022c:	080828b1 	.word	0x080828b1
 8080230:	080828b7 	.word	0x080828b7

08080234 <loop>:
  // Initialize sampling time to now!
  nextLog = millis();
}

void loop()
{ // Input: None
 8080234:	b570      	push	{r4, r5, r6, lr}
 8080236:	b08c      	sub	sp, #48	; 0x30
 8080238:	f000 f884 	bl	8080344 <HAL_Timer_Get_Milli_Seconds>
  // Output: None
  // Description: Main loop and logic for the program

  

  if (nextLog < millis() ) // Check to see if the data needs to be logged according to the current time and nextLog value
 808023c:	4d29      	ldr	r5, [pc, #164]	; (80802e4 <loop+0xb0>)
 808023e:	682c      	ldr	r4, [r5, #0]
 8080240:	4284      	cmp	r4, r0
 8080242:	d212      	bcs.n	808026a <loop+0x36>
  {
    Serial.print("Logging and posting data..");
 8080244:	f001 f8e2 	bl	808140c <_Z16_fetch_usbserialv>
 8080248:	4927      	ldr	r1, [pc, #156]	; (80802e8 <loop+0xb4>)
 808024a:	f000 fd5b 	bl	8080d04 <_ZN5Print5printEPKc>
 808024e:	f000 f879 	bl	8080344 <HAL_Timer_Get_Milli_Seconds>
    // Setting the next time, right away
    nextLog = millis() + (SAMPLE_RATE_MINUTES * 60 * 1000);
 8080252:	f500 205b 	add.w	r0, r0, #897024	; 0xdb000
 8080256:	f500 603a 	add.w	r0, r0, #2976	; 0xba0
 808025a:	6028      	str	r0, [r5, #0]

    // Sampling the distance sensor
    double distanceInches = hcDist();
 808025c:	f7ff ff2c 	bl	80800b8 <_Z6hcDistv>
    // Logging other values
    int counter = 0; //Arbitrary for now
    bool debugState = true; //Arbitrary for now

    // Store Data
    logData(distanceInches, counter, debugState);
 8080260:	2301      	movs	r3, #1
 8080262:	2200      	movs	r2, #0
 8080264:	f7ff ff98 	bl	8080198 <_Z7logDatadii>
 8080268:	e037      	b.n	80802da <loop+0xa6>
 808026a:	f000 f86b 	bl	8080344 <HAL_Timer_Get_Milli_Seconds>
  }
  else
  {
    unsigned long actualTime = nextLog - millis();
 808026e:	1a24      	subs	r4, r4, r0
    unsigned long actualTimeSeconds = (actualTime / 1000); // Seconds
    Serial.println("Logging in (min:sec)" + String(actualTimeSeconds / 60) +":"+ String(actualTimeSeconds % 60));
 8080270:	f001 f8cc 	bl	808140c <_Z16_fetch_usbserialv>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 8080274:	491d      	ldr	r1, [pc, #116]	; (80802ec <loop+0xb8>)
 8080276:	4605      	mov	r5, r0
 8080278:	a804      	add	r0, sp, #16
 808027a:	f000 ff48 	bl	808110e <_ZN6StringC1EPK19__FlashStringHelper>
 808027e:	f64e 2160 	movw	r1, #60000	; 0xea60
 8080282:	220a      	movs	r2, #10
 8080284:	fbb4 f1f1 	udiv	r1, r4, r1
 8080288:	4668      	mov	r0, sp
 808028a:	f000 ff77 	bl	808117c <_ZN6StringC1Emh>
 808028e:	4669      	mov	r1, sp
 8080290:	a804      	add	r0, sp, #16
 8080292:	f000 ffb4 	bl	80811fe <_ZplRK15StringSumHelperRK6String>
 8080296:	4916      	ldr	r1, [pc, #88]	; (80802f0 <loop+0xbc>)
 8080298:	f000 ffbd 	bl	8081216 <_ZplRK15StringSumHelperPKc>
 808029c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80802a0:	fbb4 f4f1 	udiv	r4, r4, r1
 80802a4:	233c      	movs	r3, #60	; 0x3c
 80802a6:	fbb4 f1f3 	udiv	r1, r4, r3
 80802aa:	4606      	mov	r6, r0
 80802ac:	fb03 4111 	mls	r1, r3, r1, r4
 80802b0:	220a      	movs	r2, #10
 80802b2:	a808      	add	r0, sp, #32
 80802b4:	f000 ff62 	bl	808117c <_ZN6StringC1Emh>
 80802b8:	a908      	add	r1, sp, #32
 80802ba:	4630      	mov	r0, r6
 80802bc:	f000 ff9f 	bl	80811fe <_ZplRK15StringSumHelperRK6String>
 80802c0:	6801      	ldr	r1, [r0, #0]
 80802c2:	4628      	mov	r0, r5
 80802c4:	f000 fd31 	bl	8080d2a <_ZN5Print7printlnEPKc>
 80802c8:	a808      	add	r0, sp, #32
 80802ca:	f000 fed9 	bl	8081080 <_ZN6StringD1Ev>
 80802ce:	4668      	mov	r0, sp
 80802d0:	f000 fed6 	bl	8081080 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80802d4:	a804      	add	r0, sp, #16
 80802d6:	f000 fed3 	bl	8081080 <_ZN6StringD1Ev>
  }
  delay(100);
 80802da:	2064      	movs	r0, #100	; 0x64
 80802dc:	f000 f98e 	bl	80805fc <delay>
 80802e0:	b00c      	add	sp, #48	; 0x30
 80802e2:	bd70      	pop	{r4, r5, r6, pc}
 80802e4:	20000470 	.word	0x20000470
 80802e8:	080828bd 	.word	0x080828bd
 80802ec:	080828d8 	.word	0x080828d8
 80802f0:	080828ed 	.word	0x080828ed

080802f4 <_GLOBAL__sub_I_nextLog>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80802f4:	4b02      	ldr	r3, [pc, #8]	; (8080300 <_GLOBAL__sub_I_nextLog+0xc>)
 80802f6:	2201      	movs	r2, #1
 80802f8:	701a      	strb	r2, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80802fa:	f000 b82b 	b.w	8080354 <HAL_Pin_Map>
 80802fe:	bf00      	nop
 8080300:	2000046c 	.word	0x2000046c

08080304 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 8080304:	b508      	push	{r3, lr}
 8080306:	4b02      	ldr	r3, [pc, #8]	; (8080310 <os_mutex_create+0xc>)
 8080308:	681b      	ldr	r3, [r3, #0]
 808030a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808030c:	9301      	str	r3, [sp, #4]
 808030e:	bd08      	pop	{r3, pc}
 8080310:	080401d0 	.word	0x080401d0

08080314 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
 8080314:	b508      	push	{r3, lr}
 8080316:	4b02      	ldr	r3, [pc, #8]	; (8080320 <HAL_Core_Get_Last_Reset_Info+0xc>)
 8080318:	681b      	ldr	r3, [r3, #0]
 808031a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 808031c:	9301      	str	r3, [sp, #4]
 808031e:	bd08      	pop	{r3, pc}
 8080320:	080401b8 	.word	0x080401b8

08080324 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 8080324:	b508      	push	{r3, lr}
 8080326:	4b02      	ldr	r3, [pc, #8]	; (8080330 <HAL_RNG_GetRandomNumber+0xc>)
 8080328:	681b      	ldr	r3, [r3, #0]
 808032a:	685b      	ldr	r3, [r3, #4]
 808032c:	9301      	str	r3, [sp, #4]
 808032e:	bd08      	pop	{r3, pc}
 8080330:	0804019c 	.word	0x0804019c

08080334 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 8080334:	b508      	push	{r3, lr}
 8080336:	4b02      	ldr	r3, [pc, #8]	; (8080340 <HAL_Delay_Microseconds+0xc>)
 8080338:	681b      	ldr	r3, [r3, #0]
 808033a:	68db      	ldr	r3, [r3, #12]
 808033c:	9301      	str	r3, [sp, #4]
 808033e:	bd08      	pop	{r3, pc}
 8080340:	0804019c 	.word	0x0804019c

08080344 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 8080344:	b508      	push	{r3, lr}
 8080346:	4b02      	ldr	r3, [pc, #8]	; (8080350 <HAL_Timer_Get_Milli_Seconds+0xc>)
 8080348:	681b      	ldr	r3, [r3, #0]
 808034a:	695b      	ldr	r3, [r3, #20]
 808034c:	9301      	str	r3, [sp, #4]
 808034e:	bd08      	pop	{r3, pc}
 8080350:	0804019c 	.word	0x0804019c

08080354 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 8080354:	b508      	push	{r3, lr}
 8080356:	4b02      	ldr	r3, [pc, #8]	; (8080360 <HAL_Pin_Map+0xc>)
 8080358:	681b      	ldr	r3, [r3, #0]
 808035a:	681b      	ldr	r3, [r3, #0]
 808035c:	9301      	str	r3, [sp, #4]
 808035e:	bd08      	pop	{r3, pc}
 8080360:	080401b0 	.word	0x080401b0

08080364 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 8080364:	b508      	push	{r3, lr}
 8080366:	4b02      	ldr	r3, [pc, #8]	; (8080370 <HAL_Pin_Mode+0xc>)
 8080368:	681b      	ldr	r3, [r3, #0]
 808036a:	689b      	ldr	r3, [r3, #8]
 808036c:	9301      	str	r3, [sp, #4]
 808036e:	bd08      	pop	{r3, pc}
 8080370:	080401b0 	.word	0x080401b0

08080374 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 8080374:	b508      	push	{r3, lr}
 8080376:	4b02      	ldr	r3, [pc, #8]	; (8080380 <HAL_Get_Pin_Mode+0xc>)
 8080378:	681b      	ldr	r3, [r3, #0]
 808037a:	68db      	ldr	r3, [r3, #12]
 808037c:	9301      	str	r3, [sp, #4]
 808037e:	bd08      	pop	{r3, pc}
 8080380:	080401b0 	.word	0x080401b0

08080384 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 8080384:	b508      	push	{r3, lr}
 8080386:	4b02      	ldr	r3, [pc, #8]	; (8080390 <HAL_GPIO_Write+0xc>)
 8080388:	681b      	ldr	r3, [r3, #0]
 808038a:	691b      	ldr	r3, [r3, #16]
 808038c:	9301      	str	r3, [sp, #4]
 808038e:	bd08      	pop	{r3, pc}
 8080390:	080401b0 	.word	0x080401b0

08080394 <HAL_Pulse_In>:

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
DYNALIB_FN(17, hal_gpio, HAL_Get_System_Interrupt_Handler, uint8_t(hal_irq_t, HAL_InterruptCallback*, void*))
DYNALIB_FN(18, hal_gpio, HAL_System_Interrupt_Trigger, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, HAL_Pulse_In, uint32_t(pin_t, uint16_t))
 8080394:	b508      	push	{r3, lr}
 8080396:	4b02      	ldr	r3, [pc, #8]	; (80803a0 <HAL_Pulse_In+0xc>)
 8080398:	681b      	ldr	r3, [r3, #0]
 808039a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 808039c:	9301      	str	r3, [sp, #4]
 808039e:	bd08      	pop	{r3, pc}
 80803a0:	080401b0 	.word	0x080401b0

080803a4 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80803a4:	b508      	push	{r3, lr}
 80803a6:	4b02      	ldr	r3, [pc, #8]	; (80803b0 <HAL_I2C_Write_Data+0xc>)
 80803a8:	681b      	ldr	r3, [r3, #0]
 80803aa:	6a1b      	ldr	r3, [r3, #32]
 80803ac:	9301      	str	r3, [sp, #4]
 80803ae:	bd08      	pop	{r3, pc}
 80803b0:	080401ac 	.word	0x080401ac

080803b4 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80803b4:	b508      	push	{r3, lr}
 80803b6:	4b02      	ldr	r3, [pc, #8]	; (80803c0 <HAL_I2C_Available_Data+0xc>)
 80803b8:	681b      	ldr	r3, [r3, #0]
 80803ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80803bc:	9301      	str	r3, [sp, #4]
 80803be:	bd08      	pop	{r3, pc}
 80803c0:	080401ac 	.word	0x080401ac

080803c4 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80803c4:	b508      	push	{r3, lr}
 80803c6:	4b02      	ldr	r3, [pc, #8]	; (80803d0 <HAL_I2C_Read_Data+0xc>)
 80803c8:	681b      	ldr	r3, [r3, #0]
 80803ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80803cc:	9301      	str	r3, [sp, #4]
 80803ce:	bd08      	pop	{r3, pc}
 80803d0:	080401ac 	.word	0x080401ac

080803d4 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80803d4:	b508      	push	{r3, lr}
 80803d6:	4b02      	ldr	r3, [pc, #8]	; (80803e0 <HAL_I2C_Peek_Data+0xc>)
 80803d8:	681b      	ldr	r3, [r3, #0]
 80803da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80803dc:	9301      	str	r3, [sp, #4]
 80803de:	bd08      	pop	{r3, pc}
 80803e0:	080401ac 	.word	0x080401ac

080803e4 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80803e4:	b508      	push	{r3, lr}
 80803e6:	4b02      	ldr	r3, [pc, #8]	; (80803f0 <HAL_I2C_Flush_Data+0xc>)
 80803e8:	681b      	ldr	r3, [r3, #0]
 80803ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80803ec:	9301      	str	r3, [sp, #4]
 80803ee:	bd08      	pop	{r3, pc}
 80803f0:	080401ac 	.word	0x080401ac

080803f4 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80803f4:	b508      	push	{r3, lr}
 80803f6:	4b02      	ldr	r3, [pc, #8]	; (8080400 <HAL_I2C_Is_Enabled+0xc>)
 80803f8:	681b      	ldr	r3, [r3, #0]
 80803fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80803fc:	9301      	str	r3, [sp, #4]
 80803fe:	bd08      	pop	{r3, pc}
 8080400:	080401ac 	.word	0x080401ac

08080404 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 8080404:	b508      	push	{r3, lr}
 8080406:	4b02      	ldr	r3, [pc, #8]	; (8080410 <HAL_I2C_Init+0xc>)
 8080408:	681b      	ldr	r3, [r3, #0]
 808040a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808040c:	9301      	str	r3, [sp, #4]
 808040e:	bd08      	pop	{r3, pc}
 8080410:	080401ac 	.word	0x080401ac

08080414 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 8080414:	b508      	push	{r3, lr}
 8080416:	4b02      	ldr	r3, [pc, #8]	; (8080420 <HAL_SPI_Init+0xc>)
 8080418:	681b      	ldr	r3, [r3, #0]
 808041a:	69db      	ldr	r3, [r3, #28]
 808041c:	9301      	str	r3, [sp, #4]
 808041e:	bd08      	pop	{r3, pc}
 8080420:	080401b4 	.word	0x080401b4

08080424 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 8080424:	b508      	push	{r3, lr}
 8080426:	4b02      	ldr	r3, [pc, #8]	; (8080430 <HAL_SPI_Is_Enabled+0xc>)
 8080428:	681b      	ldr	r3, [r3, #0]
 808042a:	6a1b      	ldr	r3, [r3, #32]
 808042c:	9301      	str	r3, [sp, #4]
 808042e:	bd08      	pop	{r3, pc}
 8080430:	080401b4 	.word	0x080401b4

08080434 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 8080434:	b508      	push	{r3, lr}
 8080436:	4b02      	ldr	r3, [pc, #8]	; (8080440 <HAL_USART_Init+0xc>)
 8080438:	681b      	ldr	r3, [r3, #0]
 808043a:	699b      	ldr	r3, [r3, #24]
 808043c:	9301      	str	r3, [sp, #4]
 808043e:	bd08      	pop	{r3, pc}
 8080440:	080401c4 	.word	0x080401c4

08080444 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 8080444:	b508      	push	{r3, lr}
 8080446:	4b02      	ldr	r3, [pc, #8]	; (8080450 <HAL_USART_Write_Data+0xc>)
 8080448:	681b      	ldr	r3, [r3, #0]
 808044a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808044c:	9301      	str	r3, [sp, #4]
 808044e:	bd08      	pop	{r3, pc}
 8080450:	080401c4 	.word	0x080401c4

08080454 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 8080454:	b508      	push	{r3, lr}
 8080456:	4b02      	ldr	r3, [pc, #8]	; (8080460 <HAL_USART_Available_Data+0xc>)
 8080458:	681b      	ldr	r3, [r3, #0]
 808045a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808045c:	9301      	str	r3, [sp, #4]
 808045e:	bd08      	pop	{r3, pc}
 8080460:	080401c4 	.word	0x080401c4

08080464 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 8080464:	b508      	push	{r3, lr}
 8080466:	4b02      	ldr	r3, [pc, #8]	; (8080470 <HAL_USART_Read_Data+0xc>)
 8080468:	681b      	ldr	r3, [r3, #0]
 808046a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808046c:	9301      	str	r3, [sp, #4]
 808046e:	bd08      	pop	{r3, pc}
 8080470:	080401c4 	.word	0x080401c4

08080474 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 8080474:	b508      	push	{r3, lr}
 8080476:	4b02      	ldr	r3, [pc, #8]	; (8080480 <HAL_USART_Peek_Data+0xc>)
 8080478:	681b      	ldr	r3, [r3, #0]
 808047a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808047c:	9301      	str	r3, [sp, #4]
 808047e:	bd08      	pop	{r3, pc}
 8080480:	080401c4 	.word	0x080401c4

08080484 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 8080484:	b508      	push	{r3, lr}
 8080486:	4b02      	ldr	r3, [pc, #8]	; (8080490 <HAL_USART_Flush_Data+0xc>)
 8080488:	681b      	ldr	r3, [r3, #0]
 808048a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808048c:	9301      	str	r3, [sp, #4]
 808048e:	bd08      	pop	{r3, pc}
 8080490:	080401c4 	.word	0x080401c4

08080494 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 8080494:	b508      	push	{r3, lr}
 8080496:	4b02      	ldr	r3, [pc, #8]	; (80804a0 <HAL_USART_Is_Enabled+0xc>)
 8080498:	681b      	ldr	r3, [r3, #0]
 808049a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808049c:	9301      	str	r3, [sp, #4]
 808049e:	bd08      	pop	{r3, pc}
 80804a0:	080401c4 	.word	0x080401c4

080804a4 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80804a4:	b508      	push	{r3, lr}
 80804a6:	4b02      	ldr	r3, [pc, #8]	; (80804b0 <HAL_USART_Available_Data_For_Write+0xc>)
 80804a8:	681b      	ldr	r3, [r3, #0]
 80804aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80804ac:	9301      	str	r3, [sp, #4]
 80804ae:	bd08      	pop	{r3, pc}
 80804b0:	080401c4 	.word	0x080401c4

080804b4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80804b4:	b508      	push	{r3, lr}
 80804b6:	4b02      	ldr	r3, [pc, #8]	; (80804c0 <HAL_USB_USART_Init+0xc>)
 80804b8:	681b      	ldr	r3, [r3, #0]
 80804ba:	681b      	ldr	r3, [r3, #0]
 80804bc:	9301      	str	r3, [sp, #4]
 80804be:	bd08      	pop	{r3, pc}
 80804c0:	0806001c 	.word	0x0806001c

080804c4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80804c4:	b508      	push	{r3, lr}
 80804c6:	4b02      	ldr	r3, [pc, #8]	; (80804d0 <HAL_USB_USART_Available_Data+0xc>)
 80804c8:	681b      	ldr	r3, [r3, #0]
 80804ca:	691b      	ldr	r3, [r3, #16]
 80804cc:	9301      	str	r3, [sp, #4]
 80804ce:	bd08      	pop	{r3, pc}
 80804d0:	0806001c 	.word	0x0806001c

080804d4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80804d4:	b508      	push	{r3, lr}
 80804d6:	4b02      	ldr	r3, [pc, #8]	; (80804e0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80804d8:	681b      	ldr	r3, [r3, #0]
 80804da:	695b      	ldr	r3, [r3, #20]
 80804dc:	9301      	str	r3, [sp, #4]
 80804de:	bd08      	pop	{r3, pc}
 80804e0:	0806001c 	.word	0x0806001c

080804e4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80804e4:	b508      	push	{r3, lr}
 80804e6:	4b02      	ldr	r3, [pc, #8]	; (80804f0 <HAL_USB_USART_Receive_Data+0xc>)
 80804e8:	681b      	ldr	r3, [r3, #0]
 80804ea:	699b      	ldr	r3, [r3, #24]
 80804ec:	9301      	str	r3, [sp, #4]
 80804ee:	bd08      	pop	{r3, pc}
 80804f0:	0806001c 	.word	0x0806001c

080804f4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80804f4:	b508      	push	{r3, lr}
 80804f6:	4b02      	ldr	r3, [pc, #8]	; (8080500 <HAL_USB_USART_Send_Data+0xc>)
 80804f8:	681b      	ldr	r3, [r3, #0]
 80804fa:	69db      	ldr	r3, [r3, #28]
 80804fc:	9301      	str	r3, [sp, #4]
 80804fe:	bd08      	pop	{r3, pc}
 8080500:	0806001c 	.word	0x0806001c

08080504 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 8080504:	b508      	push	{r3, lr}
 8080506:	4b02      	ldr	r3, [pc, #8]	; (8080510 <HAL_USB_USART_Flush_Data+0xc>)
 8080508:	681b      	ldr	r3, [r3, #0]
 808050a:	6a1b      	ldr	r3, [r3, #32]
 808050c:	9301      	str	r3, [sp, #4]
 808050e:	bd08      	pop	{r3, pc}
 8080510:	0806001c 	.word	0x0806001c

08080514 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 8080514:	b508      	push	{r3, lr}
 8080516:	4b02      	ldr	r3, [pc, #8]	; (8080520 <set_system_mode+0xc>)
 8080518:	681b      	ldr	r3, [r3, #0]
 808051a:	685b      	ldr	r3, [r3, #4]
 808051c:	9301      	str	r3, [sp, #4]
 808051e:	bd08      	pop	{r3, pc}
 8080520:	080401a4 	.word	0x080401a4

08080524 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 8080524:	b508      	push	{r3, lr}
 8080526:	4b02      	ldr	r3, [pc, #8]	; (8080530 <system_delay_ms+0xc>)
 8080528:	681b      	ldr	r3, [r3, #0]
 808052a:	695b      	ldr	r3, [r3, #20]
 808052c:	9301      	str	r3, [sp, #4]
 808052e:	bd08      	pop	{r3, pc}
 8080530:	080401a4 	.word	0x080401a4

08080534 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 8080534:	b508      	push	{r3, lr}
 8080536:	4b02      	ldr	r3, [pc, #8]	; (8080540 <application_thread_current+0xc>)
 8080538:	681b      	ldr	r3, [r3, #0]
 808053a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 808053c:	9301      	str	r3, [sp, #4]
 808053e:	bd08      	pop	{r3, pc}
 8080540:	080401a4 	.word	0x080401a4

08080544 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 8080544:	b508      	push	{r3, lr}
 8080546:	4b02      	ldr	r3, [pc, #8]	; (8080550 <application_thread_invoke+0xc>)
 8080548:	681b      	ldr	r3, [r3, #0]
 808054a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 808054c:	9301      	str	r3, [sp, #4]
 808054e:	bd08      	pop	{r3, pc}
 8080550:	080401a4 	.word	0x080401a4

08080554 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 8080554:	b508      	push	{r3, lr}
 8080556:	4b03      	ldr	r3, [pc, #12]	; (8080564 <system_ctrl_set_app_request_handler+0x10>)
 8080558:	681b      	ldr	r3, [r3, #0]
 808055a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 808055e:	9301      	str	r3, [sp, #4]
 8080560:	bd08      	pop	{r3, pc}
 8080562:	0000      	.short	0x0000
 8080564:	080401a4 	.word	0x080401a4

08080568 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 8080568:	b508      	push	{r3, lr}
 808056a:	4b03      	ldr	r3, [pc, #12]	; (8080578 <system_ctrl_set_result+0x10>)
 808056c:	681b      	ldr	r3, [r3, #0]
 808056e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8080572:	9301      	str	r3, [sp, #4]
 8080574:	bd08      	pop	{r3, pc}
 8080576:	0000      	.short	0x0000
 8080578:	080401a4 	.word	0x080401a4

0808057c <spark_send_event>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 808057c:	b508      	push	{r3, lr}
 808057e:	4b02      	ldr	r3, [pc, #8]	; (8080588 <spark_send_event+0xc>)
 8080580:	681b      	ldr	r3, [r3, #0]
 8080582:	6a1b      	ldr	r3, [r3, #32]
 8080584:	9301      	str	r3, [sp, #4]
 8080586:	bd08      	pop	{r3, pc}
 8080588:	080401cc 	.word	0x080401cc

0808058c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 808058c:	b508      	push	{r3, lr}
 808058e:	4b02      	ldr	r3, [pc, #8]	; (8080598 <spark_set_random_seed_from_cloud_handler+0xc>)
 8080590:	681b      	ldr	r3, [r3, #0]
 8080592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8080594:	9301      	str	r3, [sp, #4]
 8080596:	bd08      	pop	{r3, pc}
 8080598:	080401cc 	.word	0x080401cc

0808059c <network_ready>:

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 808059c:	b508      	push	{r3, lr}
 808059e:	4b02      	ldr	r3, [pc, #8]	; (80805a8 <network_ready+0xc>)
 80805a0:	681b      	ldr	r3, [r3, #0]
 80805a2:	691b      	ldr	r3, [r3, #16]
 80805a4:	9301      	str	r3, [sp, #4]
 80805a6:	bd08      	pop	{r3, pc}
 80805a8:	080401c8 	.word	0x080401c8

080805ac <malloc>:

#include "dynalib.h"

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80805ac:	b508      	push	{r3, lr}
 80805ae:	4b02      	ldr	r3, [pc, #8]	; (80805b8 <malloc+0xc>)
 80805b0:	681b      	ldr	r3, [r3, #0]
 80805b2:	681b      	ldr	r3, [r3, #0]
 80805b4:	9301      	str	r3, [sp, #4]
 80805b6:	bd08      	pop	{r3, pc}
 80805b8:	080401a0 	.word	0x080401a0

080805bc <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80805bc:	b508      	push	{r3, lr}
 80805be:	4b02      	ldr	r3, [pc, #8]	; (80805c8 <free+0xc>)
 80805c0:	681b      	ldr	r3, [r3, #0]
 80805c2:	685b      	ldr	r3, [r3, #4]
 80805c4:	9301      	str	r3, [sp, #4]
 80805c6:	bd08      	pop	{r3, pc}
 80805c8:	080401a0 	.word	0x080401a0

080805cc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80805cc:	b508      	push	{r3, lr}
 80805ce:	4b02      	ldr	r3, [pc, #8]	; (80805d8 <realloc+0xc>)
 80805d0:	681b      	ldr	r3, [r3, #0]
 80805d2:	689b      	ldr	r3, [r3, #8]
 80805d4:	9301      	str	r3, [sp, #4]
 80805d6:	bd08      	pop	{r3, pc}
 80805d8:	080401a0 	.word	0x080401a0

080805dc <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80805dc:	b508      	push	{r3, lr}
 80805de:	4b02      	ldr	r3, [pc, #8]	; (80805e8 <abort+0xc>)
 80805e0:	681b      	ldr	r3, [r3, #0]
 80805e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80805e4:	9301      	str	r3, [sp, #4]
 80805e6:	bd08      	pop	{r3, pc}
 80805e8:	080401a0 	.word	0x080401a0

080805ec <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80805ec:	b508      	push	{r3, lr}
 80805ee:	4b02      	ldr	r3, [pc, #8]	; (80805f8 <_malloc_r+0xc>)
 80805f0:	681b      	ldr	r3, [r3, #0]
 80805f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80805f4:	9301      	str	r3, [sp, #4]
 80805f6:	bd08      	pop	{r3, pc}
 80805f8:	080401a0 	.word	0x080401a0

080805fc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80805fc:	2100      	movs	r1, #0
 80805fe:	f7ff bf91 	b.w	8080524 <system_delay_ms>

08080602 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 8080602:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8080604:	6883      	ldr	r3, [r0, #8]
 8080606:	4604      	mov	r4, r0
 8080608:	b90b      	cbnz	r3, 808060e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 808060a:	f001 f914 	bl	8081836 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808060e:	68c3      	ldr	r3, [r0, #12]
 8080610:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 8080612:	68a3      	ldr	r3, [r4, #8]
 8080614:	b11b      	cbz	r3, 808061e <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8080616:	2203      	movs	r2, #3
 8080618:	4621      	mov	r1, r4
 808061a:	4620      	mov	r0, r4
 808061c:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 808061e:	4620      	mov	r0, r4
}
 8080620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8080624:	f7ff bd3b 	b.w	808009e <_ZdlPv>

08080628 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 8080628:	2200      	movs	r2, #0
 808062a:	4611      	mov	r1, r2
 808062c:	4610      	mov	r0, r2
 808062e:	f7ff bfb5 	b.w	808059c <network_ready>
	...

08080634 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    NetworkClass& Network = Cellular;
}
 8080634:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 8080636:	4c0b      	ldr	r4, [pc, #44]	; (8080664 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x30>)
 8080638:	2528      	movs	r5, #40	; 0x28
 808063a:	462a      	mov	r2, r5
 808063c:	2100      	movs	r1, #0
 808063e:	4620      	mov	r0, r4
 8080640:	f002 f8c1 	bl	80827c6 <memset>
        cid = -1;
 8080644:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8080648:	6063      	str	r3, [r4, #4]
        size = sizeof(*this);
 808064a:	8025      	strh	r5, [r4, #0]
#include "inet_hal.h"
#include "spark_wiring_cellular_printable.h"

namespace spark {

class CellularClass : public NetworkClass
 808064c:	4c06      	ldr	r4, [pc, #24]	; (8080668 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x34>)
 808064e:	4b07      	ldr	r3, [pc, #28]	; (808066c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x38>)
 8080650:	4620      	mov	r0, r4
    char imei[16];
    int dev;

    CellularDevice()
    {
        memset(this, 0, sizeof(*this));
 8080652:	252c      	movs	r5, #44	; 0x2c
 8080654:	f840 3b04 	str.w	r3, [r0], #4
 8080658:	462a      	mov	r2, r5
 808065a:	2100      	movs	r1, #0
 808065c:	f002 f8b3 	bl	80827c6 <memset>
        size = sizeof(*this);
 8080660:	80a5      	strh	r5, [r4, #4]
 8080662:	bd38      	pop	{r3, r4, r5, pc}
 8080664:	200004a4 	.word	0x200004a4
 8080668:	20000474 	.word	0x20000474
 808066c:	080828f8 	.word	0x080828f8

08080670 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8080670:	4770      	bx	lr

08080672 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 8080672:	2000      	movs	r0, #0
 8080674:	4770      	bx	lr

08080676 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8080676:	b510      	push	{r4, lr}
 8080678:	4604      	mov	r4, r0
 808067a:	f7ff fd10 	bl	808009e <_ZdlPv>
 808067e:	4620      	mov	r0, r4
 8080680:	bd10      	pop	{r4, pc}

08080682 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 8080682:	b508      	push	{r3, lr}
      { delete this; }
 8080684:	b108      	cbz	r0, 808068a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 8080686:	f7ff fff6 	bl	8080676 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 808068a:	bd08      	pop	{r3, pc}

0808068c <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 808068c:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 808068e:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8080690:	4604      	mov	r4, r0
    {
      if (_M_manager)
 8080692:	b113      	cbz	r3, 808069a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8080694:	2203      	movs	r2, #3
 8080696:	4601      	mov	r1, r0
 8080698:	4798      	blx	r3
    }
 808069a:	4620      	mov	r0, r4
 808069c:	bd10      	pop	{r4, pc}

0808069e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 808069e:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80806a0:	68c4      	ldr	r4, [r0, #12]
 80806a2:	b1d4      	cbz	r4, 80806da <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x3c>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 80806a4:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80806a6:	2b02      	cmp	r3, #2
 80806a8:	d102      	bne.n	80806b0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80806aa:	68e0      	ldr	r0, [r4, #12]
 80806ac:	f7ff ff86 	bl	80805bc <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 80806b0:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 80806b2:	b12d      	cbz	r5, 80806c0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x22>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80806b4:	4628      	mov	r0, r5
 80806b6:	f7ff ffe9 	bl	808068c <_ZNSt14_Function_baseD1Ev>
 80806ba:	4628      	mov	r0, r5
 80806bc:	f7ff fcef 	bl	808009e <_ZdlPv>
 80806c0:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80806c2:	b12d      	cbz	r5, 80806d0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x32>
 80806c4:	4628      	mov	r0, r5
 80806c6:	f7ff ffe1 	bl	808068c <_ZNSt14_Function_baseD1Ev>
 80806ca:	4628      	mov	r0, r5
 80806cc:	f7ff fce7 	bl	808009e <_ZdlPv>
 80806d0:	4620      	mov	r0, r4
 80806d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80806d6:	f7ff bce2 	b.w	808009e <_ZdlPv>
 80806da:	bd38      	pop	{r3, r4, r5, pc}

080806dc <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 80806dc:	b513      	push	{r0, r1, r4, lr}
 80806de:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80806e0:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 80806e4:	2300      	movs	r3, #0
 80806e6:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80806e8:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80806ea:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80806ec:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80806ee:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80806f0:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80806f2:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80806f4:	f7ff fd3a 	bl	808016c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80806f8:	4620      	mov	r0, r4
 80806fa:	b002      	add	sp, #8
 80806fc:	bd10      	pop	{r4, pc}

080806fe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80806fe:	680b      	ldr	r3, [r1, #0]
 8080700:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 8080702:	b113      	cbz	r3, 808070a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 8080704:	685a      	ldr	r2, [r3, #4]
 8080706:	3201      	adds	r2, #1
 8080708:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 808070a:	4770      	bx	lr

0808070c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 808070c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 808070e:	460c      	mov	r4, r1
 8080710:	4606      	mov	r6, r0
 8080712:	460f      	mov	r7, r1
 8080714:	f854 3b04 	ldr.w	r3, [r4], #4
 8080718:	ad02      	add	r5, sp, #8
 808071a:	f845 3d08 	str.w	r3, [r5, #-8]!
 808071e:	4621      	mov	r1, r4
 8080720:	a801      	add	r0, sp, #4
 8080722:	f7ff ffec 	bl	80806fe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 8080726:	4629      	mov	r1, r5
 8080728:	4630      	mov	r0, r6
 808072a:	f7ff ffd7 	bl	80806dc <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 808072e:	a801      	add	r0, sp, #4
 8080730:	f7ff fd1c 	bl	808016c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080734:	4620      	mov	r0, r4
 8080736:	f7ff fd19 	bl	808016c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 808073a:	4638      	mov	r0, r7
 808073c:	f7ff fcaf 	bl	808009e <_ZdlPv>
        return p;
    }
 8080740:	4630      	mov	r0, r6
 8080742:	b003      	add	sp, #12
 8080744:	bdf0      	pop	{r4, r5, r6, r7, pc}

08080746 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 8080746:	b513      	push	{r0, r1, r4, lr}
 8080748:	460b      	mov	r3, r1
 808074a:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808074c:	c803      	ldmia	r0, {r0, r1}
 808074e:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8080752:	e893 0003 	ldmia.w	r3, {r0, r1}
 8080756:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 808075a:	e89d 0003 	ldmia.w	sp, {r0, r1}
 808075e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8080762:	b002      	add	sp, #8
 8080764:	bd10      	pop	{r4, pc}

08080766 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8080766:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8080768:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 808076a:	b90a      	cbnz	r2, 8080770 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 808076c:	f001 f863 	bl	8081836 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8080770:	68c3      	ldr	r3, [r0, #12]
    }
 8080772:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8080776:	4718      	bx	r3

08080778 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8080778:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 808077a:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 808077c:	f100 0110 	add.w	r1, r0, #16
 8080780:	f7ff fff1 	bl	8080766 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 8080784:	bd08      	pop	{r3, pc}

08080786 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8080786:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8080788:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 808078a:	b90a      	cbnz	r2, 8080790 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 808078c:	f001 f853 	bl	8081836 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8080790:	68c3      	ldr	r3, [r0, #12]
    }
 8080792:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8080796:	4718      	bx	r3

08080798 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8080798:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 808079a:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 808079c:	f100 0110 	add.w	r1, r0, #16
 80807a0:	f7ff fff1 	bl	8080786 <_ZNKSt8functionIFvRKbEEclES1_>
 80807a4:	bd08      	pop	{r3, pc}

080807a6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80807a6:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80807a8:	2300      	movs	r3, #0
 80807aa:	6083      	str	r3, [r0, #8]
 80807ac:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80807ae:	4604      	mov	r4, r0
 80807b0:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80807b2:	b12b      	cbz	r3, 80807c0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80807b4:	2202      	movs	r2, #2
 80807b6:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80807b8:	68eb      	ldr	r3, [r5, #12]
 80807ba:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80807bc:	68ab      	ldr	r3, [r5, #8]
 80807be:	60a3      	str	r3, [r4, #8]
	}
    }
 80807c0:	4620      	mov	r0, r4
 80807c2:	bd38      	pop	{r3, r4, r5, pc}

080807c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80807c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
 80807c8:	f64f 739c 	movw	r3, #65436	; 0xff9c
 80807cc:	6804      	ldr	r4, [r0, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80807ce:	f04f 0002 	mov.w	r0, #2
 80807d2:	b086      	sub	sp, #24
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80807d4:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80807d8:	808b      	strh	r3, [r1, #4]
 80807da:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80807dc:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80807de:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
 80807e2:	600b      	str	r3, [r1, #0]
 80807e4:	e8d4 1f4f 	ldrexb	r1, [r4]
 80807e8:	4299      	cmp	r1, r3
 80807ea:	d103      	bne.n	80807f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
 80807ec:	e8c4 0f45 	strexb	r5, r0, [r4]
 80807f0:	2d00      	cmp	r5, #0
 80807f2:	d1f7      	bne.n	80807e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80807f4:	d002      	beq.n	80807fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
 80807f6:	f88d 1000 	strb.w	r1, [sp]
 80807fa:	e06b      	b.n	80808d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 80807fc:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8080800:	bf1c      	itt	ne
 8080802:	60e7      	strne	r7, [r4, #12]
 8080804:	8222      	strhne	r2, [r4, #16]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 8080806:	f3bf 8f5f 	dmb	sy
      __b = _GLIBCXX_MOVE(__tmp);
 808080a:	bf18      	it	ne
 808080c:	461f      	movne	r7, r3
 808080e:	2301      	movs	r3, #1
 8080810:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 8080812:	f3bf 8f5f 	dmb	sy
 8080816:	f104 0308 	add.w	r3, r4, #8
 808081a:	2000      	movs	r0, #0
 808081c:	e853 6f00 	ldrex	r6, [r3]
 8080820:	e843 0200 	strex	r2, r0, [r3]
 8080824:	2a00      	cmp	r2, #0
 8080826:	d1f9      	bne.n	808081c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x58>
 8080828:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 808082c:	2e00      	cmp	r6, #0
 808082e:	d051      	beq.n	80808d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8080830:	f7ff fe80 	bl	8080534 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 8080834:	b120      	cbz	r0, 8080840 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7c>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8080836:	4629      	mov	r1, r5
 8080838:	4630      	mov	r0, r6
 808083a:	f7ff ff94 	bl	8080766 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 808083e:	e043      	b.n	80808c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8080840:	4631      	mov	r1, r6
 8080842:	4668      	mov	r0, sp
 8080844:	f7ff ffaf 	bl	80807a6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 8080848:	68e0      	ldr	r0, [r4, #12]
 808084a:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 808084e:	b108      	cbz	r0, 8080854 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x90>
 8080850:	f001 fff2 	bl	8082838 <strdup>
 8080854:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8080856:	2010      	movs	r0, #16
 8080858:	f8ad 5014 	strh.w	r5, [sp, #20]
 808085c:	f7ff fc1d 	bl	808009a <_Znwj>
 8080860:	4605      	mov	r5, r0
 8080862:	b330      	cbz	r0, 80808b2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xee>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8080864:	f04f 0800 	mov.w	r8, #0
 8080868:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808086c:	2018      	movs	r0, #24
 808086e:	f7ff fc14 	bl	808009a <_Znwj>
 8080872:	4604      	mov	r4, r0
 8080874:	b1c0      	cbz	r0, 80808a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe4>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8080876:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 808087a:	4601      	mov	r1, r0
 808087c:	4668      	mov	r0, sp
 808087e:	f7ff ff62 	bl	8080746 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8080882:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 8080884:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8080886:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8080888:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 808088a:	9202      	str	r2, [sp, #8]
 808088c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 808088e:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8080890:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8080894:	9203      	str	r2, [sp, #12]
 8080896:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
 8080898:	f64f 739c 	movw	r3, #65436	; 0xff9c
 808089c:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80808a0:	9b04      	ldr	r3, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 80808a2:	f8cd 8010 	str.w	r8, [sp, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80808a6:	6123      	str	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80808a8:	4b0d      	ldr	r3, [pc, #52]	; (80808e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80808aa:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80808ac:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80808ae:	4b0d      	ldr	r3, [pc, #52]	; (80808e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
 80808b0:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80808b2:	9804      	ldr	r0, [sp, #16]
 80808b4:	f7ff fe82 	bl	80805bc <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80808b8:	4668      	mov	r0, sp
 80808ba:	f7ff fee7 	bl	808068c <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80808be:	2200      	movs	r2, #0
 80808c0:	4629      	mov	r1, r5
 80808c2:	4809      	ldr	r0, [pc, #36]	; (80808e8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
 80808c4:	f7ff fe3e 	bl	8080544 <application_thread_invoke>
 80808c8:	4630      	mov	r0, r6
 80808ca:	f7ff fedf 	bl	808068c <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80808ce:	4630      	mov	r0, r6
 80808d0:	f7ff fbe5 	bl	808009e <_ZdlPv>
 80808d4:	4638      	mov	r0, r7
 80808d6:	f7ff fe71 	bl	80805bc <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
 80808da:	b006      	add	sp, #24
 80808dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80808e0:	08080779 	.word	0x08080779
 80808e4:	080809d5 	.word	0x080809d5
 80808e8:	08080603 	.word	0x08080603

080808ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80808ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80808f0:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80808f2:	ad07      	add	r5, sp, #28
 80808f4:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80808f8:	4606      	mov	r6, r0
 80808fa:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80808fc:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80808fe:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8080900:	460f      	mov	r7, r1
 8080902:	4690      	mov	r8, r2
 8080904:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 8080908:	f8c5 b004 	str.w	fp, [r5, #4]
 808090c:	f8c5 b008 	str.w	fp, [r5, #8]
 8080910:	9307      	str	r3, [sp, #28]
 8080912:	f7ff fbc2 	bl	808009a <_Znwj>
 8080916:	4604      	mov	r4, r0
 8080918:	b138      	cbz	r0, 808092a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 808091a:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 808091e:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8080922:	f8c0 b004 	str.w	fp, [r0, #4]
 8080926:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 808092a:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 808092c:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 808092e:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 8080930:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8080932:	f7ff fbb2 	bl	808009a <_Znwj>
 8080936:	b128      	cbz	r0, 8080944 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 8080938:	2301      	movs	r3, #1
 808093a:	6043      	str	r3, [r0, #4]
 808093c:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 808093e:	4b23      	ldr	r3, [pc, #140]	; (80809cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
 8080940:	60c4      	str	r4, [r0, #12]
 8080942:	6003      	str	r3, [r0, #0]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 8080944:	4b22      	ldr	r3, [pc, #136]	; (80809d0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8080946:	9004      	str	r0, [sp, #16]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 8080948:	2008      	movs	r0, #8
 808094a:	9308      	str	r3, [sp, #32]
 808094c:	f7ff fba5 	bl	808009a <_Znwj>
 8080950:	4604      	mov	r4, r0
 8080952:	b128      	cbz	r0, 8080960 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8080954:	9b03      	ldr	r3, [sp, #12]
 8080956:	a904      	add	r1, sp, #16
 8080958:	f840 3b04 	str.w	r3, [r0], #4
 808095c:	f7ff fecf 	bl	80806fe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8080960:	9500      	str	r5, [sp, #0]
 8080962:	fa5f f38a 	uxtb.w	r3, sl
 8080966:	464a      	mov	r2, r9
 8080968:	4641      	mov	r1, r8
 808096a:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 808096c:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 808096e:	f7ff fe05 	bl	808057c <spark_send_event>
 8080972:	b9b8      	cbnz	r0, 80809a4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 8080974:	9b03      	ldr	r3, [sp, #12]
 8080976:	785b      	ldrb	r3, [r3, #1]
 8080978:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 808097c:	b993      	cbnz	r3, 80809a4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 808097e:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 8080982:	a905      	add	r1, sp, #20
 8080984:	a803      	add	r0, sp, #12
 8080986:	9205      	str	r2, [sp, #20]
 8080988:	f8ad 3018 	strh.w	r3, [sp, #24]
 808098c:	f7ff ff1a 	bl	80807c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 8080990:	9805      	ldr	r0, [sp, #20]
 8080992:	f7ff fe13 	bl	80805bc <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 8080996:	a805      	add	r0, sp, #20
 8080998:	9909      	ldr	r1, [sp, #36]	; 0x24
 808099a:	f7ff feb7 	bl	808070c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 808099e:	a806      	add	r0, sp, #24
 80809a0:	f7ff fbe4 	bl	808016c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80809a4:	9b03      	ldr	r3, [sp, #12]
 80809a6:	a904      	add	r1, sp, #16
 80809a8:	a806      	add	r0, sp, #24
 80809aa:	9305      	str	r3, [sp, #20]
 80809ac:	f7ff fea7 	bl	80806fe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80809b0:	a905      	add	r1, sp, #20
 80809b2:	4630      	mov	r0, r6
 80809b4:	f7ff fe92 	bl	80806dc <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80809b8:	a806      	add	r0, sp, #24
 80809ba:	f7ff fbd7 	bl	808016c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80809be:	a804      	add	r0, sp, #16
 80809c0:	f7ff fbd4 	bl	808016c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 80809c4:	4630      	mov	r0, r6
 80809c6:	b00b      	add	sp, #44	; 0x2c
 80809c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80809cc:	08082904 	.word	0x08082904
 80809d0:	08080b3d 	.word	0x08080b3d

080809d4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80809d4:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80809d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80809d8:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80809da:	d006      	beq.n	80809ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 80809dc:	2a03      	cmp	r2, #3
 80809de:	d017      	beq.n	8080a10 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 80809e0:	2a01      	cmp	r2, #1
 80809e2:	d120      	bne.n	8080a26 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80809e4:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80809e6:	6003      	str	r3, [r0, #0]
	      break;
 80809e8:	e01d      	b.n	8080a26 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80809ea:	2018      	movs	r0, #24
 80809ec:	680e      	ldr	r6, [r1, #0]
 80809ee:	f7ff fb54 	bl	808009a <_Znwj>
 80809f2:	4605      	mov	r5, r0
 80809f4:	b150      	cbz	r0, 8080a0c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80809f6:	4631      	mov	r1, r6
 80809f8:	f7ff fed5 	bl	80807a6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80809fc:	6930      	ldr	r0, [r6, #16]
 80809fe:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 8080a02:	b108      	cbz	r0, 8080a08 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 8080a04:	f001 ff18 	bl	8082838 <strdup>
 8080a08:	6128      	str	r0, [r5, #16]
 8080a0a:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8080a0c:	6025      	str	r5, [r4, #0]
 8080a0e:	e00a      	b.n	8080a26 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8080a10:	6804      	ldr	r4, [r0, #0]
 8080a12:	b144      	cbz	r4, 8080a26 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 8080a14:	6920      	ldr	r0, [r4, #16]
 8080a16:	f7ff fdd1 	bl	80805bc <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8080a1a:	4620      	mov	r0, r4
 8080a1c:	f7ff fe36 	bl	808068c <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8080a20:	4620      	mov	r0, r4
 8080a22:	f7ff fb3c 	bl	808009e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8080a26:	2000      	movs	r0, #0
 8080a28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08080a2a <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8080a2a:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8080a2c:	2300      	movs	r3, #0
 8080a2e:	6083      	str	r3, [r0, #8]
 8080a30:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8080a32:	4604      	mov	r4, r0
 8080a34:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8080a36:	b12b      	cbz	r3, 8080a44 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8080a38:	2202      	movs	r2, #2
 8080a3a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8080a3c:	68eb      	ldr	r3, [r5, #12]
 8080a3e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8080a40:	68ab      	ldr	r3, [r5, #8]
 8080a42:	60a3      	str	r3, [r4, #8]
	}
    }
 8080a44:	4620      	mov	r0, r4
 8080a46:	bd38      	pop	{r3, r4, r5, pc}

08080a48 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8080a48:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8080a4a:	b570      	push	{r4, r5, r6, lr}
 8080a4c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 8080a4e:	d006      	beq.n	8080a5e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 8080a50:	2a03      	cmp	r2, #3
 8080a52:	d011      	beq.n	8080a78 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 8080a54:	2a01      	cmp	r2, #1
 8080a56:	d117      	bne.n	8080a88 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8080a58:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8080a5a:	6003      	str	r3, [r0, #0]
	      break;
 8080a5c:	e014      	b.n	8080a88 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8080a5e:	2014      	movs	r0, #20
 8080a60:	680e      	ldr	r6, [r1, #0]
 8080a62:	f7ff fb1a 	bl	808009a <_Znwj>
 8080a66:	4605      	mov	r5, r0
 8080a68:	b120      	cbz	r0, 8080a74 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 8080a6a:	4631      	mov	r1, r6
 8080a6c:	f7ff ffdd 	bl	8080a2a <_ZNSt8functionIFvRKbEEC1ERKS3_>
 8080a70:	7c33      	ldrb	r3, [r6, #16]
 8080a72:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8080a74:	6025      	str	r5, [r4, #0]
 8080a76:	e007      	b.n	8080a88 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8080a78:	6804      	ldr	r4, [r0, #0]
 8080a7a:	b12c      	cbz	r4, 8080a88 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8080a7c:	4620      	mov	r0, r4
 8080a7e:	f7ff fe05 	bl	808068c <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8080a82:	4620      	mov	r0, r4
 8080a84:	f7ff fb0b 	bl	808009e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8080a88:	2000      	movs	r0, #0
 8080a8a:	bd70      	pop	{r4, r5, r6, pc}

08080a8c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 8080a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8080a8e:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 8080a90:	f3bf 8f5f 	dmb	sy
 8080a94:	b087      	sub	sp, #28
 8080a96:	2300      	movs	r3, #0
 8080a98:	e850 6f00 	ldrex	r6, [r0]
 8080a9c:	e840 3200 	strex	r2, r3, [r0]
 8080aa0:	2a00      	cmp	r2, #0
 8080aa2:	d1f9      	bne.n	8080a98 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 8080aa4:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 8080aa8:	2e00      	cmp	r6, #0
 8080aaa:	d03e      	beq.n	8080b2a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x9e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8080aac:	4618      	mov	r0, r3
 8080aae:	f7ff fd41 	bl	8080534 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 8080ab2:	4607      	mov	r7, r0
 8080ab4:	b120      	cbz	r0, 8080ac0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8080ab6:	4621      	mov	r1, r4
 8080ab8:	4630      	mov	r0, r6
 8080aba:	f7ff fe64 	bl	8080786 <_ZNKSt8functionIFvRKbEEclES1_>
 8080abe:	e02e      	b.n	8080b1e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8080ac0:	4631      	mov	r1, r6
 8080ac2:	a801      	add	r0, sp, #4
 8080ac4:	f7ff ffb1 	bl	8080a2a <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8080ac8:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8080aca:	2010      	movs	r0, #16
 8080acc:	f88d 3014 	strb.w	r3, [sp, #20]
 8080ad0:	f7ff fae3 	bl	808009a <_Znwj>
 8080ad4:	4605      	mov	r5, r0
 8080ad6:	b1d0      	cbz	r0, 8080b0e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8080ad8:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8080ada:	2014      	movs	r0, #20
 8080adc:	f7ff fadd 	bl	808009a <_Znwj>
 8080ae0:	4604      	mov	r4, r0
 8080ae2:	b178      	cbz	r0, 8080b04 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8080ae4:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8080ae6:	4601      	mov	r1, r0
 8080ae8:	a801      	add	r0, sp, #4
 8080aea:	f7ff fe2c 	bl	8080746 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8080aee:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 8080af0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8080af2:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8080af4:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 8080af6:	9203      	str	r2, [sp, #12]
 8080af8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8080afa:	60e3      	str	r3, [r4, #12]
 8080afc:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8080b00:	9204      	str	r2, [sp, #16]
 8080b02:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8080b04:	4b0a      	ldr	r3, [pc, #40]	; (8080b30 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8080b06:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8080b08:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8080b0a:	4b0a      	ldr	r3, [pc, #40]	; (8080b34 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 8080b0c:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8080b0e:	a801      	add	r0, sp, #4
 8080b10:	f7ff fdbc 	bl	808068c <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8080b14:	2200      	movs	r2, #0
 8080b16:	4629      	mov	r1, r5
 8080b18:	4807      	ldr	r0, [pc, #28]	; (8080b38 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 8080b1a:	f7ff fd13 	bl	8080544 <application_thread_invoke>
 8080b1e:	4630      	mov	r0, r6
 8080b20:	f7ff fdb4 	bl	808068c <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 8080b24:	4630      	mov	r0, r6
 8080b26:	f7ff faba 	bl	808009e <_ZdlPv>
        }
    }
 8080b2a:	b007      	add	sp, #28
 8080b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8080b2e:	bf00      	nop
 8080b30:	08080799 	.word	0x08080799
 8080b34:	08080a49 	.word	0x08080a49
 8080b38:	08080603 	.word	0x08080603

08080b3c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 8080b3c:	b530      	push	{r4, r5, lr}
 8080b3e:	4604      	mov	r4, r0
 8080b40:	b085      	sub	sp, #20
 8080b42:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 8080b44:	4668      	mov	r0, sp
 8080b46:	4611      	mov	r1, r2
 8080b48:	f7ff fde0 	bl	808070c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 8080b4c:	b17c      	cbz	r4, 8080b6e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 8080b4e:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 8080b50:	4628      	mov	r0, r5
 8080b52:	b10d      	cbz	r5, 8080b58 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 8080b54:	f001 fe70 	bl	8082838 <strdup>
 8080b58:	9002      	str	r0, [sp, #8]
 8080b5a:	a902      	add	r1, sp, #8
 8080b5c:	4668      	mov	r0, sp
 8080b5e:	f8ad 400c 	strh.w	r4, [sp, #12]
 8080b62:	f7ff fe2f 	bl	80807c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 8080b66:	9802      	ldr	r0, [sp, #8]
 8080b68:	f7ff fd28 	bl	80805bc <free>
 8080b6c:	e01d      	b.n	8080baa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 8080b6e:	f04f 0201 	mov.w	r2, #1
 8080b72:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 8080b74:	f88d 4008 	strb.w	r4, [sp, #8]
 8080b78:	e8d0 3f4f 	ldrexb	r3, [r0]
 8080b7c:	42a3      	cmp	r3, r4
 8080b7e:	d103      	bne.n	8080b88 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 8080b80:	e8c0 2f41 	strexb	r1, r2, [r0]
 8080b84:	2900      	cmp	r1, #0
 8080b86:	d1f7      	bne.n	8080b78 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 8080b88:	d002      	beq.n	8080b90 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 8080b8a:	f88d 3008 	strb.w	r3, [sp, #8]
 8080b8e:	e00c      	b.n	8080baa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 8080b90:	f110 010c 	adds.w	r1, r0, #12
 8080b94:	f04f 0301 	mov.w	r3, #1
 8080b98:	bf18      	it	ne
 8080b9a:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 8080b9c:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 8080ba0:	3004      	adds	r0, #4
 8080ba2:	f800 3c03 	strb.w	r3, [r0, #-3]
 8080ba6:	f7ff ff71 	bl	8080a8c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 8080baa:	a801      	add	r0, sp, #4
 8080bac:	f7ff fade 	bl	808016c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 8080bb0:	b005      	add	sp, #20
 8080bb2:	bd30      	pop	{r4, r5, pc}

08080bb4 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 8080bb4:	4770      	bx	lr

08080bb6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 8080bb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8080bb8:	4606      	mov	r6, r0
 8080bba:	4615      	mov	r5, r2
 8080bbc:	460c      	mov	r4, r1
 8080bbe:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8080bc0:	42bc      	cmp	r4, r7
 8080bc2:	d006      	beq.n	8080bd2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 8080bc4:	6833      	ldr	r3, [r6, #0]
 8080bc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8080bca:	689b      	ldr	r3, [r3, #8]
 8080bcc:	4630      	mov	r0, r6
 8080bce:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8080bd0:	e7f6      	b.n	8080bc0 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 8080bd2:	4628      	mov	r0, r5
 8080bd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08080bd6 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 8080bd6:	2200      	movs	r2, #0
 8080bd8:	7c00      	ldrb	r0, [r0, #16]
 8080bda:	f7ff bbe3 	b.w	80803a4 <HAL_I2C_Write_Data>

08080bde <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 8080bde:	2100      	movs	r1, #0
 8080be0:	7c00      	ldrb	r0, [r0, #16]
 8080be2:	f7ff bbe7 	b.w	80803b4 <HAL_I2C_Available_Data>

08080be6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 8080be6:	2100      	movs	r1, #0
 8080be8:	7c00      	ldrb	r0, [r0, #16]
 8080bea:	f7ff bbeb 	b.w	80803c4 <HAL_I2C_Read_Data>

08080bee <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 8080bee:	2100      	movs	r1, #0
 8080bf0:	7c00      	ldrb	r0, [r0, #16]
 8080bf2:	f7ff bbef 	b.w	80803d4 <HAL_I2C_Peek_Data>

08080bf6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 8080bf6:	2100      	movs	r1, #0
 8080bf8:	7c00      	ldrb	r0, [r0, #16]
 8080bfa:	f7ff bbf3 	b.w	80803e4 <HAL_I2C_Flush_Data>

08080bfe <_ZN7TwoWireD0Ev>:
 8080bfe:	b510      	push	{r4, lr}
 8080c00:	4604      	mov	r4, r0
 8080c02:	f7ff fa4c 	bl	808009e <_ZdlPv>
 8080c06:	4620      	mov	r0, r4
 8080c08:	bd10      	pop	{r4, pc}
	...

08080c0c <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 8080c0c:	b510      	push	{r4, lr}
 8080c0e:	4604      	mov	r4, r0
 8080c10:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8080c12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8080c16:	60a3      	str	r3, [r4, #8]
 8080c18:	4b04      	ldr	r3, [pc, #16]	; (8080c2c <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8080c1a:	2100      	movs	r1, #0
{
  _i2c = i2c;
 8080c1c:	7420      	strb	r0, [r4, #16]
 8080c1e:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 8080c20:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 8080c22:	f7ff fbef 	bl	8080404 <HAL_I2C_Init>

}
 8080c26:	4620      	mov	r0, r4
 8080c28:	bd10      	pop	{r4, pc}
 8080c2a:	bf00      	nop
 8080c2c:	08082920 	.word	0x08082920

08080c30 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 8080c30:	2100      	movs	r1, #0
 8080c32:	7c00      	ldrb	r0, [r0, #16]
 8080c34:	f7ff bbde 	b.w	80803f4 <HAL_I2C_Is_Enabled>

08080c38 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 8080c38:	4770      	bx	lr

08080c3a <_ZN9IPAddressD0Ev>:
 8080c3a:	b510      	push	{r4, lr}
 8080c3c:	4604      	mov	r4, r0
 8080c3e:	f7ff fa2e 	bl	808009e <_ZdlPv>
 8080c42:	4620      	mov	r0, r4
 8080c44:	bd10      	pop	{r4, pc}

08080c46 <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 8080c46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8080c48:	460f      	mov	r7, r1
 8080c4a:	f100 0608 	add.w	r6, r0, #8
 8080c4e:	1d05      	adds	r5, r0, #4
 8080c50:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8080c52:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8080c56:	220a      	movs	r2, #10
 8080c58:	4638      	mov	r0, r7
 8080c5a:	f000 f89a 	bl	8080d92 <_ZN5Print5printEhi>
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8080c5e:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8080c60:	4404      	add	r4, r0
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8080c62:	d007      	beq.n	8080c74 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 8080c64:	2c00      	cmp	r4, #0
 8080c66:	d0f4      	beq.n	8080c52 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 8080c68:	212e      	movs	r1, #46	; 0x2e
 8080c6a:	4638      	mov	r0, r7
 8080c6c:	f000 f84e 	bl	8080d0c <_ZN5Print5printEc>
 8080c70:	4404      	add	r4, r0
 8080c72:	e7ee      	b.n	8080c52 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 8080c74:	4620      	mov	r0, r4
 8080c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08080c78 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 8080c78:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 8080c7a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8080c7e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 8080c82:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8080c86:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 8080c8a:	6041      	str	r1, [r0, #4]
 8080c8c:	bd10      	pop	{r4, pc}
	...

08080c90 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8080c90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8080c92:	4d04      	ldr	r5, [pc, #16]	; (8080ca4 <_ZN9IPAddressC1Ehhhh+0x14>)
 8080c94:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 8080c96:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8080c9a:	9500      	str	r5, [sp, #0]
 8080c9c:	f7ff ffec 	bl	8080c78 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 8080ca0:	b003      	add	sp, #12
 8080ca2:	bd30      	pop	{r4, r5, pc}
 8080ca4:	08082948 	.word	0x08082948

08080ca8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 8080ca8:	4a01      	ldr	r2, [pc, #4]	; (8080cb0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 8080caa:	4b02      	ldr	r3, [pc, #8]	; (8080cb4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 8080cac:	601a      	str	r2, [r3, #0]
 8080cae:	4770      	bx	lr
 8080cb0:	08082a0d 	.word	0x08082a0d
 8080cb4:	200004cc 	.word	0x200004cc

08080cb8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8080cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8080cba:	4606      	mov	r6, r0
 8080cbc:	460d      	mov	r5, r1
 8080cbe:	188f      	adds	r7, r1, r2
  size_t n = 0;
 8080cc0:	2400      	movs	r4, #0
  while (size--) {
 8080cc2:	42bd      	cmp	r5, r7
 8080cc4:	d00c      	beq.n	8080ce0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 8080cc6:	6833      	ldr	r3, [r6, #0]
 8080cc8:	f815 1b01 	ldrb.w	r1, [r5], #1
 8080ccc:	689b      	ldr	r3, [r3, #8]
 8080cce:	4630      	mov	r0, r6
 8080cd0:	4798      	blx	r3
     if (chunk>=0)
 8080cd2:	2800      	cmp	r0, #0
 8080cd4:	db01      	blt.n	8080cda <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 8080cd6:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 8080cd8:	e7f3      	b.n	8080cc2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 8080cda:	2c00      	cmp	r4, #0
 8080cdc:	bf08      	it	eq
 8080cde:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 8080ce0:	4620      	mov	r0, r4
 8080ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08080ce4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8080ce4:	b570      	push	{r4, r5, r6, lr}
 8080ce6:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 8080ce8:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 8080cea:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 8080cec:	b149      	cbz	r1, 8080d02 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 8080cee:	f001 fdbe 	bl	808286e <strlen>
 8080cf2:	682b      	ldr	r3, [r5, #0]
 8080cf4:	4602      	mov	r2, r0
 8080cf6:	4621      	mov	r1, r4
 8080cf8:	4628      	mov	r0, r5
    }
 8080cfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 8080cfe:	68db      	ldr	r3, [r3, #12]
 8080d00:	4718      	bx	r3
    }
 8080d02:	bd70      	pop	{r4, r5, r6, pc}

08080d04 <_ZN5Print5printEPKc>:
 8080d04:	b508      	push	{r3, lr}
 8080d06:	f7ff ffed 	bl	8080ce4 <_ZN5Print5writeEPKc>
 8080d0a:	bd08      	pop	{r3, pc}

08080d0c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 8080d0c:	6803      	ldr	r3, [r0, #0]
 8080d0e:	689b      	ldr	r3, [r3, #8]
 8080d10:	4718      	bx	r3

08080d12 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 8080d12:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 8080d14:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 8080d16:	4605      	mov	r5, r0
  size_t n = print('\r');
 8080d18:	f7ff fff8 	bl	8080d0c <_ZN5Print5printEc>
  n += print('\n');
 8080d1c:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 8080d1e:	4604      	mov	r4, r0
  n += print('\n');
 8080d20:	4628      	mov	r0, r5
 8080d22:	f7ff fff3 	bl	8080d0c <_ZN5Print5printEc>
  return n;
}
 8080d26:	4420      	add	r0, r4
 8080d28:	bd38      	pop	{r3, r4, r5, pc}

08080d2a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 8080d2a:	b538      	push	{r3, r4, r5, lr}
 8080d2c:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8080d2e:	f7ff ffd9 	bl	8080ce4 <_ZN5Print5writeEPKc>
 8080d32:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 8080d34:	4628      	mov	r0, r5
 8080d36:	f7ff ffec 	bl	8080d12 <_ZN5Print7printlnEv>
  return n;
}
 8080d3a:	4420      	add	r0, r4
 8080d3c:	bd38      	pop	{r3, r4, r5, pc}

08080d3e <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8080d3e:	2a01      	cmp	r2, #1
 8080d40:	bf98      	it	ls
 8080d42:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 8080d44:	b530      	push	{r4, r5, lr}
 8080d46:	460b      	mov	r3, r1
 8080d48:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 8080d4a:	2100      	movs	r1, #0
 8080d4c:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8080d50:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 8080d54:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 8080d58:	fb05 3312 	mls	r3, r5, r2, r3
 8080d5c:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8080d5e:	2b09      	cmp	r3, #9
 8080d60:	bf94      	ite	ls
 8080d62:	3330      	addls	r3, #48	; 0x30
 8080d64:	3337      	addhi	r3, #55	; 0x37
 8080d66:	b2db      	uxtb	r3, r3
 8080d68:	4621      	mov	r1, r4
 8080d6a:	f804 3901 	strb.w	r3, [r4], #-1
 8080d6e:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 8080d70:	2d00      	cmp	r5, #0
 8080d72:	d1ef      	bne.n	8080d54 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 8080d74:	f7ff ffb6 	bl	8080ce4 <_ZN5Print5writeEPKc>
}
 8080d78:	b00b      	add	sp, #44	; 0x2c
 8080d7a:	bd30      	pop	{r4, r5, pc}

08080d7c <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 8080d7c:	b410      	push	{r4}
  if (base == 0) return write(n);
 8080d7e:	b922      	cbnz	r2, 8080d8a <_ZN5Print5printEmi+0xe>
 8080d80:	6803      	ldr	r3, [r0, #0]
 8080d82:	b2c9      	uxtb	r1, r1
 8080d84:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 8080d86:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 8080d88:	4718      	bx	r3
  else return printNumber(n, base);
 8080d8a:	b2d2      	uxtb	r2, r2
}
 8080d8c:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 8080d8e:	f7ff bfd6 	b.w	8080d3e <_ZN5Print11printNumberEmh>

08080d92 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 8080d92:	f7ff bff3 	b.w	8080d7c <_ZN5Print5printEmi>

08080d96 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 8080d96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8080d9a:	4607      	mov	r7, r0
 8080d9c:	460e      	mov	r6, r1
  if (base == 0) {
 8080d9e:	4615      	mov	r5, r2
 8080da0:	b92a      	cbnz	r2, 8080dae <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 8080da2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 8080da6:	6803      	ldr	r3, [r0, #0]
 8080da8:	b2c9      	uxtb	r1, r1
 8080daa:	689b      	ldr	r3, [r3, #8]
 8080dac:	4718      	bx	r3
  } else if (base == 10) {
 8080dae:	2a0a      	cmp	r2, #10
 8080db0:	d102      	bne.n	8080db8 <_ZN5Print5printEli+0x22>
    if (n < 0) {
 8080db2:	2900      	cmp	r1, #0
 8080db4:	da01      	bge.n	8080dba <_ZN5Print5printEli+0x24>
 8080db6:	e004      	b.n	8080dc2 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 8080db8:	b2d2      	uxtb	r2, r2
  }
}
 8080dba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 8080dbe:	f7ff bfbe 	b.w	8080d3e <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 8080dc2:	212d      	movs	r1, #45	; 0x2d
 8080dc4:	f7ff ffa2 	bl	8080d0c <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 8080dc8:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 8080dca:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 8080dcc:	4271      	negs	r1, r6
 8080dce:	4638      	mov	r0, r7
 8080dd0:	f7ff ffb5 	bl	8080d3e <_ZN5Print11printNumberEmh>
 8080dd4:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 8080dd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08080ddc <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 8080ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  size_t n = 0;

  if (isnan(number)) return print("nan");
 8080de0:	4619      	mov	r1, r3

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 8080de2:	4680      	mov	r8, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 8080de4:	4610      	mov	r0, r2

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 8080de6:	4617      	mov	r7, r2
 8080de8:	461e      	mov	r6, r3
 8080dea:	f89d 5020 	ldrb.w	r5, [sp, #32]
  size_t n = 0;

  if (isnan(number)) return print("nan");
 8080dee:	f001 fabf 	bl	8082370 <__aeabi_dcmpun>
 8080df2:	b108      	cbz	r0, 8080df8 <_ZN5Print10printFloatEdh+0x1c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8080df4:	4947      	ldr	r1, [pc, #284]	; (8080f14 <_ZN5Print10printFloatEdh+0x138>)
 8080df6:	e012      	b.n	8080e1e <_ZN5Print10printFloatEdh+0x42>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 8080df8:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8080dfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8080e00:	4b45      	ldr	r3, [pc, #276]	; (8080f18 <_ZN5Print10printFloatEdh+0x13c>)
 8080e02:	4638      	mov	r0, r7
 8080e04:	4621      	mov	r1, r4
 8080e06:	f001 fab3 	bl	8082370 <__aeabi_dcmpun>
 8080e0a:	b968      	cbnz	r0, 8080e28 <_ZN5Print10printFloatEdh+0x4c>
 8080e0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8080e10:	4b41      	ldr	r3, [pc, #260]	; (8080f18 <_ZN5Print10printFloatEdh+0x13c>)
 8080e12:	4638      	mov	r0, r7
 8080e14:	4621      	mov	r1, r4
 8080e16:	f001 fa8d 	bl	8082334 <__aeabi_dcmple>
 8080e1a:	b928      	cbnz	r0, 8080e28 <_ZN5Print10printFloatEdh+0x4c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8080e1c:	493f      	ldr	r1, [pc, #252]	; (8080f1c <_ZN5Print10printFloatEdh+0x140>)
 8080e1e:	4640      	mov	r0, r8
 8080e20:	f7ff ff60 	bl	8080ce4 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 8080e24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 8080e28:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8080e2c:	4b3c      	ldr	r3, [pc, #240]	; (8080f20 <_ZN5Print10printFloatEdh+0x144>)
 8080e2e:	4638      	mov	r0, r7
 8080e30:	4631      	mov	r1, r6
 8080e32:	f001 fa93 	bl	808235c <__aeabi_dcmpgt>
 8080e36:	b108      	cbz	r0, 8080e3c <_ZN5Print10printFloatEdh+0x60>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8080e38:	493a      	ldr	r1, [pc, #232]	; (8080f24 <_ZN5Print10printFloatEdh+0x148>)
 8080e3a:	e7f0      	b.n	8080e1e <_ZN5Print10printFloatEdh+0x42>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 8080e3c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8080e40:	4b39      	ldr	r3, [pc, #228]	; (8080f28 <_ZN5Print10printFloatEdh+0x14c>)
 8080e42:	4638      	mov	r0, r7
 8080e44:	4631      	mov	r1, r6
 8080e46:	f001 fa6b 	bl	8082320 <__aeabi_dcmplt>
 8080e4a:	2800      	cmp	r0, #0
 8080e4c:	d1f4      	bne.n	8080e38 <_ZN5Print10printFloatEdh+0x5c>

  // Handle negative numbers
  if (number < 0.0)
 8080e4e:	2200      	movs	r2, #0
 8080e50:	2300      	movs	r3, #0
 8080e52:	4638      	mov	r0, r7
 8080e54:	4631      	mov	r1, r6
 8080e56:	f001 fa63 	bl	8082320 <__aeabi_dcmplt>
 8080e5a:	b138      	cbz	r0, 8080e6c <_ZN5Print10printFloatEdh+0x90>
  {
     n += print('-');
 8080e5c:	212d      	movs	r1, #45	; 0x2d
 8080e5e:	4640      	mov	r0, r8
 8080e60:	f7ff ff54 	bl	8080d0c <_ZN5Print5printEc>
     number = -number;
 8080e64:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
 8080e68:	4604      	mov	r4, r0
 8080e6a:	e000      	b.n	8080e6e <_ZN5Print10printFloatEdh+0x92>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 8080e6c:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 8080e6e:	492f      	ldr	r1, [pc, #188]	; (8080f2c <_ZN5Print10printFloatEdh+0x150>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 8080e70:	f04f 0900 	mov.w	r9, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 8080e74:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
 8080e76:	fa5f f389 	uxtb.w	r3, r9
 8080e7a:	429d      	cmp	r5, r3
 8080e7c:	d906      	bls.n	8080e8c <_ZN5Print10printFloatEdh+0xb0>
    rounding /= 10.0;
 8080e7e:	2200      	movs	r2, #0
 8080e80:	4b2b      	ldr	r3, [pc, #172]	; (8080f30 <_ZN5Print10printFloatEdh+0x154>)
 8080e82:	f001 f905 	bl	8082090 <__aeabi_ddiv>
 8080e86:	f109 0901 	add.w	r9, r9, #1
 8080e8a:	e7f4      	b.n	8080e76 <_ZN5Print10printFloatEdh+0x9a>

  number += rounding;
 8080e8c:	463a      	mov	r2, r7
 8080e8e:	4633      	mov	r3, r6
 8080e90:	f000 fe22 	bl	8081ad8 <__adddf3>
 8080e94:	460f      	mov	r7, r1
 8080e96:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 8080e98:	f001 faa8 	bl	80823ec <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 8080e9c:	220a      	movs	r2, #10
 8080e9e:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 8080ea0:	4681      	mov	r9, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 8080ea2:	4640      	mov	r0, r8
 8080ea4:	f7ff ff4b 	bl	8080d3e <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 8080ea8:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 8080eaa:	b37d      	cbz	r5, 8080f0c <_ZN5Print10printFloatEdh+0x130>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
 8080eac:	4648      	mov	r0, r9
 8080eae:	f000 ff4f 	bl	8081d50 <__aeabi_ui2d>
 8080eb2:	4602      	mov	r2, r0
 8080eb4:	460b      	mov	r3, r1
 8080eb6:	4630      	mov	r0, r6
 8080eb8:	4639      	mov	r1, r7
 8080eba:	f000 fe0b 	bl	8081ad4 <__aeabi_dsub>
 8080ebe:	4606      	mov	r6, r0
 8080ec0:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8080ec2:	4640      	mov	r0, r8
 8080ec4:	491b      	ldr	r1, [pc, #108]	; (8080f34 <_ZN5Print10printFloatEdh+0x158>)
 8080ec6:	f7ff ff0d 	bl	8080ce4 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
 8080eca:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 8080ecc:	4b18      	ldr	r3, [pc, #96]	; (8080f30 <_ZN5Print10printFloatEdh+0x154>)
 8080ece:	2200      	movs	r2, #0
 8080ed0:	4630      	mov	r0, r6
 8080ed2:	4639      	mov	r1, r7
 8080ed4:	f000 ffb2 	bl	8081e3c <__aeabi_dmul>
 8080ed8:	460f      	mov	r7, r1
 8080eda:	4606      	mov	r6, r0
    int toPrint = int(remainder);
 8080edc:	f001 fa5e 	bl	808239c <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 8080ee0:	220a      	movs	r2, #10
 8080ee2:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
 8080ee4:	4681      	mov	r9, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 8080ee6:	4640      	mov	r0, r8
 8080ee8:	f7ff ff55 	bl	8080d96 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
 8080eec:	4404      	add	r4, r0
    remainder -= toPrint;
 8080eee:	4648      	mov	r0, r9
 8080ef0:	f000 ff3e 	bl	8081d70 <__aeabi_i2d>
 8080ef4:	4602      	mov	r2, r0
 8080ef6:	460b      	mov	r3, r1
 8080ef8:	4630      	mov	r0, r6
 8080efa:	4639      	mov	r1, r7
 8080efc:	f000 fdea 	bl	8081ad4 <__aeabi_dsub>
 8080f00:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 8080f02:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
 8080f06:	4606      	mov	r6, r0
 8080f08:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 8080f0a:	d1df      	bne.n	8080ecc <_ZN5Print10printFloatEdh+0xf0>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 8080f0c:	4620      	mov	r0, r4
 8080f0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8080f12:	bf00      	nop
 8080f14:	08082a36 	.word	0x08082a36
 8080f18:	7fefffff 	.word	0x7fefffff
 8080f1c:	08082a3e 	.word	0x08082a3e
 8080f20:	41efffff 	.word	0x41efffff
 8080f24:	08082a3a 	.word	0x08082a3a
 8080f28:	c1efffff 	.word	0xc1efffff
 8080f2c:	3fe00000 	.word	0x3fe00000
 8080f30:	40240000 	.word	0x40240000
 8080f34:	080828d6 	.word	0x080828d6

08080f38 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 8080f38:	b537      	push	{r0, r1, r2, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 8080f3a:	f89d 1018 	ldrb.w	r1, [sp, #24]
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 8080f3e:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 8080f40:	9100      	str	r1, [sp, #0]
 8080f42:	f7ff ff4b 	bl	8080ddc <_ZN5Print10printFloatEdh>
 8080f46:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
 8080f48:	4628      	mov	r0, r5
 8080f4a:	f7ff fee2 	bl	8080d12 <_ZN5Print7printlnEv>
  return n;
}
 8080f4e:	4420      	add	r0, r4
 8080f50:	b003      	add	sp, #12
 8080f52:	bd30      	pop	{r4, r5, pc}

08080f54 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 8080f54:	b510      	push	{r4, lr}
 8080f56:	4604      	mov	r4, r0
 8080f58:	f7ff fb98 	bl	808068c <_ZNSt14_Function_baseD1Ev>
 8080f5c:	4620      	mov	r0, r4
 8080f5e:	bd10      	pop	{r4, pc}

08080f60 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8080f60:	4803      	ldr	r0, [pc, #12]	; (8080f70 <_GLOBAL__sub_I_RGB+0x10>)
 8080f62:	2300      	movs	r3, #0
 8080f64:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 8080f66:	4a03      	ldr	r2, [pc, #12]	; (8080f74 <_GLOBAL__sub_I_RGB+0x14>)
 8080f68:	4903      	ldr	r1, [pc, #12]	; (8080f78 <_GLOBAL__sub_I_RGB+0x18>)
 8080f6a:	f000 bc5f 	b.w	808182c <__aeabi_atexit>
 8080f6e:	bf00      	nop
 8080f70:	200004d0 	.word	0x200004d0
 8080f74:	20000468 	.word	0x20000468
 8080f78:	08080f55 	.word	0x08080f55

08080f7c <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 8080f7c:	4770      	bx	lr

08080f7e <_ZN8SPIClassD0Ev>:
 8080f7e:	b510      	push	{r4, lr}
 8080f80:	4604      	mov	r4, r0
 8080f82:	f7ff f88c 	bl	808009e <_ZdlPv>
 8080f86:	4620      	mov	r0, r4
 8080f88:	bd10      	pop	{r4, pc}
	...

08080f8c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 8080f8c:	b570      	push	{r4, r5, r6, lr}
 8080f8e:	4604      	mov	r4, r0
 8080f90:	460e      	mov	r6, r1
 8080f92:	4b07      	ldr	r3, [pc, #28]	; (8080fb0 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 8080f94:	2500      	movs	r5, #0
 8080f96:	6003      	str	r3, [r0, #0]
 8080f98:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 8080f9c:	f7ff f9b2 	bl	8080304 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 8080fa0:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 8080fa2:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 8080fa4:	f7ff fa36 	bl	8080414 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 8080fa8:	60a5      	str	r5, [r4, #8]
}
 8080faa:	4620      	mov	r0, r4
 8080fac:	bd70      	pop	{r4, r5, r6, pc}
 8080fae:	bf00      	nop
 8080fb0:	08082a4c 	.word	0x08082a4c

08080fb4 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 8080fb4:	7900      	ldrb	r0, [r0, #4]
 8080fb6:	f7ff ba35 	b.w	8080424 <HAL_SPI_Is_Enabled>
	...

08080fbc <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
 8080fbc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8080fc0:	4680      	mov	r8, r0
 8080fc2:	460d      	mov	r5, r1
 8080fc4:	4617      	mov	r7, r2
 8080fc6:	461e      	mov	r6, r3
    bool negative = val<0;
    if (negative) {
 8080fc8:	2200      	movs	r2, #0
 8080fca:	2300      	movs	r3, #0
 8080fcc:	4640      	mov	r0, r8
 8080fce:	4629      	mov	r1, r5
 8080fd0:	f001 f9a6 	bl	8082320 <__aeabi_dcmplt>
 8080fd4:	b120      	cbz	r0, 8080fe0 <_Z4dtoadhPc+0x24>
        val = -val;
        *sout++ = '-';
 8080fd6:	232d      	movs	r3, #45	; 0x2d
 8080fd8:	7033      	strb	r3, [r6, #0]
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
    bool negative = val<0;
    if (negative) {
        val = -val;
 8080fda:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
        *sout++ = '-';
 8080fde:	3601      	adds	r6, #1
 8080fe0:	2300      	movs	r3, #0
    }
    long scale = 1;
 8080fe2:	2401      	movs	r4, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
 8080fe4:	220a      	movs	r2, #10
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
 8080fe6:	b2d9      	uxtb	r1, r3
 8080fe8:	428f      	cmp	r7, r1
 8080fea:	d902      	bls.n	8080ff2 <_Z4dtoadhPc+0x36>
        scale *= 10;
 8080fec:	4354      	muls	r4, r2
 8080fee:	3301      	adds	r3, #1
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
 8080ff0:	e7f9      	b.n	8080fe6 <_Z4dtoadhPc+0x2a>
        scale *= 10;
    val *= scale;   // capture all the significant digits
 8080ff2:	4620      	mov	r0, r4
 8080ff4:	f000 febc 	bl	8081d70 <__aeabi_i2d>
 8080ff8:	4642      	mov	r2, r8
 8080ffa:	462b      	mov	r3, r5
 8080ffc:	f000 ff1e 	bl	8081e3c <__aeabi_dmul>
 8081000:	4682      	mov	sl, r0
 8081002:	468b      	mov	fp, r1
    uint64_t fixed = uint64_t(val);
 8081004:	f001 fa2a 	bl	808245c <__aeabi_d2ulz>
 8081008:	4680      	mov	r8, r0
 808100a:	4689      	mov	r9, r1
    if ((val-fixed)>=0.5)    // round last digit
 808100c:	f000 fee0 	bl	8081dd0 <__aeabi_ul2d>
 8081010:	4602      	mov	r2, r0
 8081012:	460b      	mov	r3, r1
 8081014:	4650      	mov	r0, sl
 8081016:	4659      	mov	r1, fp
 8081018:	f000 fd5c 	bl	8081ad4 <__aeabi_dsub>
 808101c:	2200      	movs	r2, #0
 808101e:	4b17      	ldr	r3, [pc, #92]	; (808107c <_Z4dtoadhPc+0xc0>)
 8081020:	f001 f992 	bl	8082348 <__aeabi_dcmpge>
 8081024:	b118      	cbz	r0, 808102e <_Z4dtoadhPc+0x72>
        fixed++;
 8081026:	f118 0801 	adds.w	r8, r8, #1
 808102a:	f149 0900 	adc.w	r9, r9, #0

    unsigned long first = (unsigned long)(fixed / scale);
 808102e:	17e5      	asrs	r5, r4, #31
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
 8081030:	4622      	mov	r2, r4
 8081032:	462b      	mov	r3, r5
 8081034:	4640      	mov	r0, r8
 8081036:	4649      	mov	r1, r9
 8081038:	f001 f9f8 	bl	808242c <__aeabi_uldivmod>
 808103c:	2301      	movs	r3, #1
 808103e:	220a      	movs	r2, #10
 8081040:	4631      	mov	r1, r6
 8081042:	f000 fa56 	bl	80814f2 <ultoa>
    if (prec) {
 8081046:	b1af      	cbz	r7, 8081074 <_Z4dtoadhPc+0xb8>
        sout += strlen(sout);
 8081048:	4630      	mov	r0, r6
 808104a:	f001 fc10 	bl	808286e <strlen>
        *sout++ = '.';
 808104e:	232e      	movs	r3, #46	; 0x2e
 8081050:	5433      	strb	r3, [r6, r0]
        ultoa(second, sout, 10, prec);
 8081052:	3001      	adds	r0, #1
 8081054:	4406      	add	r6, r0
 8081056:	4622      	mov	r2, r4
 8081058:	462b      	mov	r3, r5
 808105a:	4640      	mov	r0, r8
 808105c:	4649      	mov	r1, r9
 808105e:	f001 f9e5 	bl	808242c <__aeabi_uldivmod>
 8081062:	463b      	mov	r3, r7
 8081064:	4610      	mov	r0, r2
 8081066:	4631      	mov	r1, r6
 8081068:	220a      	movs	r2, #10
    }
}
 808106a:	b001      	add	sp, #4
 808106c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ultoa(first, sout, 10, 1);
    if (prec) {
        sout += strlen(sout);
        *sout++ = '.';
        ultoa(second, sout, 10, prec);
 8081070:	f000 ba3f 	b.w	80814f2 <ultoa>
    }
}
 8081074:	b001      	add	sp, #4
 8081076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808107a:	bf00      	nop
 808107c:	3fe00000 	.word	0x3fe00000

08081080 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 8081080:	b510      	push	{r4, lr}
 8081082:	4604      	mov	r4, r0
{
	free(buffer);
 8081084:	6800      	ldr	r0, [r0, #0]
 8081086:	f7ff fa99 	bl	80805bc <free>
}
 808108a:	4620      	mov	r0, r4
 808108c:	bd10      	pop	{r4, pc}

0808108e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 808108e:	b510      	push	{r4, lr}
 8081090:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 8081092:	6800      	ldr	r0, [r0, #0]
 8081094:	b108      	cbz	r0, 808109a <_ZN6String10invalidateEv+0xc>
 8081096:	f7ff fa91 	bl	80805bc <free>
	buffer = NULL;
 808109a:	2300      	movs	r3, #0
 808109c:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 808109e:	60a3      	str	r3, [r4, #8]
 80810a0:	6063      	str	r3, [r4, #4]
 80810a2:	bd10      	pop	{r4, pc}

080810a4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80810a4:	b538      	push	{r3, r4, r5, lr}
 80810a6:	4604      	mov	r4, r0
 80810a8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80810aa:	6800      	ldr	r0, [r0, #0]
 80810ac:	3101      	adds	r1, #1
 80810ae:	f7ff fa8d 	bl	80805cc <realloc>
	if (newbuffer) {
 80810b2:	b110      	cbz	r0, 80810ba <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80810b4:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80810b8:	2001      	movs	r0, #1
	}
	return 0;
}
 80810ba:	bd38      	pop	{r3, r4, r5, pc}

080810bc <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80810bc:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80810be:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80810c0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80810c2:	b113      	cbz	r3, 80810ca <_ZN6String7reserveEj+0xe>
 80810c4:	6843      	ldr	r3, [r0, #4]
 80810c6:	428b      	cmp	r3, r1
 80810c8:	d207      	bcs.n	80810da <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80810ca:	4620      	mov	r0, r4
 80810cc:	f7ff ffea 	bl	80810a4 <_ZN6String12changeBufferEj>
 80810d0:	b120      	cbz	r0, 80810dc <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80810d2:	68a3      	ldr	r3, [r4, #8]
 80810d4:	b90b      	cbnz	r3, 80810da <_ZN6String7reserveEj+0x1e>
 80810d6:	6822      	ldr	r2, [r4, #0]
 80810d8:	7013      	strb	r3, [r2, #0]
 80810da:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80810dc:	bd10      	pop	{r4, pc}

080810de <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80810de:	b570      	push	{r4, r5, r6, lr}
 80810e0:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80810e2:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80810e4:	4604      	mov	r4, r0
 80810e6:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80810e8:	f7ff ffe8 	bl	80810bc <_ZN6String7reserveEj>
 80810ec:	b918      	cbnz	r0, 80810f6 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80810ee:	4620      	mov	r0, r4
 80810f0:	f7ff ffcd 	bl	808108e <_ZN6String10invalidateEv>
		return *this;
 80810f4:	e009      	b.n	808110a <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80810f6:	462a      	mov	r2, r5
 80810f8:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80810fa:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80810fc:	6820      	ldr	r0, [r4, #0]
 80810fe:	f001 fb57 	bl	80827b0 <memcpy>
	buffer[len] = 0;
 8081102:	6822      	ldr	r2, [r4, #0]
 8081104:	68a3      	ldr	r3, [r4, #8]
 8081106:	2100      	movs	r1, #0
 8081108:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 808110a:	4620      	mov	r0, r4
 808110c:	bd70      	pop	{r4, r5, r6, pc}

0808110e <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 808110e:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8081110:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8081112:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8081114:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8081116:	6043      	str	r3, [r0, #4]
	len = 0;
 8081118:	6083      	str	r3, [r0, #8]
	flags = 0;
 808111a:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 808111c:	460d      	mov	r5, r1
 808111e:	b139      	cbz	r1, 8081130 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 8081120:	4608      	mov	r0, r1
 8081122:	f001 fba4 	bl	808286e <strlen>
 8081126:	4629      	mov	r1, r5
 8081128:	4602      	mov	r2, r0
 808112a:	4620      	mov	r0, r4
 808112c:	f7ff ffd7 	bl	80810de <_ZN6String4copyEPKcj>
}
 8081130:	4620      	mov	r0, r4
 8081132:	bd38      	pop	{r3, r4, r5, pc}

08081134 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 8081134:	b538      	push	{r3, r4, r5, lr}
 8081136:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 8081138:	460c      	mov	r4, r1
 808113a:	b141      	cbz	r1, 808114e <_ZN6StringaSEPKc+0x1a>
 808113c:	4608      	mov	r0, r1
 808113e:	f001 fb96 	bl	808286e <strlen>
 8081142:	4621      	mov	r1, r4
 8081144:	4602      	mov	r2, r0
 8081146:	4628      	mov	r0, r5
 8081148:	f7ff ffc9 	bl	80810de <_ZN6String4copyEPKcj>
 808114c:	e001      	b.n	8081152 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 808114e:	f7ff ff9e 	bl	808108e <_ZN6String10invalidateEv>

	return *this;
}
 8081152:	4628      	mov	r0, r5
 8081154:	bd38      	pop	{r3, r4, r5, pc}

08081156 <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 8081156:	b510      	push	{r4, lr}
 8081158:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808115a:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 808115c:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808115e:	6023      	str	r3, [r4, #0]
	capacity = 0;
 8081160:	6063      	str	r3, [r4, #4]
	len = 0;
 8081162:	60a3      	str	r3, [r4, #8]
	flags = 0;
 8081164:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 8081166:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
 8081168:	a901      	add	r1, sp, #4
 808116a:	f000 f9ea 	bl	8081542 <itoa>
	*this = buf;
 808116e:	a901      	add	r1, sp, #4
 8081170:	4620      	mov	r0, r4
 8081172:	f7ff ffdf 	bl	8081134 <_ZN6StringaSEPKc>
}
 8081176:	4620      	mov	r0, r4
 8081178:	b00a      	add	sp, #40	; 0x28
 808117a:	bd10      	pop	{r4, pc}

0808117c <_ZN6StringC1Emh>:
	char buf[34];
	ltoa(value, buf, base);
	*this = buf;
}

String::String(unsigned long value, unsigned char base)
 808117c:	b510      	push	{r4, lr}
 808117e:	4604      	mov	r4, r0
 8081180:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8081182:	2300      	movs	r3, #0
 8081184:	6023      	str	r3, [r4, #0]
	capacity = 0;
 8081186:	6063      	str	r3, [r4, #4]
	len = 0;
 8081188:	60a3      	str	r3, [r4, #8]
	flags = 0;
 808118a:	7323      	strb	r3, [r4, #12]
	char buf[34];
	ltoa(value, buf, base);
	*this = buf;
}

String::String(unsigned long value, unsigned char base)
 808118c:	4608      	mov	r0, r1
{
	init();
	char buf[33];
	ultoa(value, buf, base);
 808118e:	2301      	movs	r3, #1
 8081190:	a901      	add	r1, sp, #4
 8081192:	f000 f9ae 	bl	80814f2 <ultoa>
	*this = buf;
 8081196:	a901      	add	r1, sp, #4
 8081198:	4620      	mov	r0, r4
 808119a:	f7ff ffcb 	bl	8081134 <_ZN6StringaSEPKc>
}
 808119e:	4620      	mov	r0, r4
 80811a0:	b00a      	add	sp, #40	; 0x28
 80811a2:	bd10      	pop	{r4, pc}

080811a4 <_ZN6StringC1Edi>:
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}

String::String(double value, int decimalPlaces)
 80811a4:	b510      	push	{r4, lr}
 80811a6:	4604      	mov	r4, r0
 80811a8:	b08a      	sub	sp, #40	; 0x28
 80811aa:	4619      	mov	r1, r3
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80811ac:	2300      	movs	r3, #0
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}

String::String(double value, int decimalPlaces)
 80811ae:	4610      	mov	r0, r2
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80811b0:	6023      	str	r3, [r4, #0]
	capacity = 0;
 80811b2:	6063      	str	r3, [r4, #4]
	len = 0;
 80811b4:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80811b6:	7323      	strb	r3, [r4, #12]

String::String(double value, int decimalPlaces)
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
 80811b8:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 80811bc:	ab01      	add	r3, sp, #4
 80811be:	f7ff fefd 	bl	8080fbc <_Z4dtoadhPc>
        *this = buf;
 80811c2:	a901      	add	r1, sp, #4
 80811c4:	4620      	mov	r0, r4
 80811c6:	f7ff ffb5 	bl	8081134 <_ZN6StringaSEPKc>
}
 80811ca:	4620      	mov	r0, r4
 80811cc:	b00a      	add	sp, #40	; 0x28
 80811ce:	bd10      	pop	{r4, pc}

080811d0 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80811d0:	b570      	push	{r4, r5, r6, lr}
 80811d2:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80811d4:	460e      	mov	r6, r1
 80811d6:	b909      	cbnz	r1, 80811dc <_ZN6String6concatEPKcj+0xc>
 80811d8:	2000      	movs	r0, #0
 80811da:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80811dc:	b16a      	cbz	r2, 80811fa <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
 80811de:	6883      	ldr	r3, [r0, #8]
 80811e0:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
 80811e2:	4629      	mov	r1, r5
 80811e4:	f7ff ff6a 	bl	80810bc <_ZN6String7reserveEj>
 80811e8:	2800      	cmp	r0, #0
 80811ea:	d0f5      	beq.n	80811d8 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80811ec:	6820      	ldr	r0, [r4, #0]
 80811ee:	68a3      	ldr	r3, [r4, #8]
 80811f0:	4631      	mov	r1, r6
 80811f2:	4418      	add	r0, r3
 80811f4:	f001 fb18 	bl	8082828 <strcpy>
	len = newlen;
 80811f8:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
 80811fa:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80811fc:	bd70      	pop	{r4, r5, r6, pc}

080811fe <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80811fe:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 8081200:	688a      	ldr	r2, [r1, #8]
 8081202:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 8081204:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 8081206:	f7ff ffe3 	bl	80811d0 <_ZN6String6concatEPKcj>
 808120a:	b910      	cbnz	r0, 8081212 <_ZplRK15StringSumHelperRK6String+0x14>
 808120c:	4620      	mov	r0, r4
 808120e:	f7ff ff3e 	bl	808108e <_ZN6String10invalidateEv>
	return a;
}
 8081212:	4620      	mov	r0, r4
 8081214:	bd10      	pop	{r4, pc}

08081216 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 8081216:	b538      	push	{r3, r4, r5, lr}
 8081218:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 808121a:	460d      	mov	r5, r1
 808121c:	b141      	cbz	r1, 8081230 <_ZplRK15StringSumHelperPKc+0x1a>
 808121e:	4608      	mov	r0, r1
 8081220:	f001 fb25 	bl	808286e <strlen>
 8081224:	4629      	mov	r1, r5
 8081226:	4602      	mov	r2, r0
 8081228:	4620      	mov	r0, r4
 808122a:	f7ff ffd1 	bl	80811d0 <_ZN6String6concatEPKcj>
 808122e:	b910      	cbnz	r0, 8081236 <_ZplRK15StringSumHelperPKc+0x20>
 8081230:	4620      	mov	r0, r4
 8081232:	f7ff ff2c 	bl	808108e <_ZN6String10invalidateEv>
	return a;
}
 8081236:	4620      	mov	r0, r4
 8081238:	bd38      	pop	{r3, r4, r5, pc}
	...

0808123c <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 808123c:	f64f 739c 	movw	r3, #65436	; 0xff9c
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
}
 8081240:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8081242:	4c0d      	ldr	r4, [pc, #52]	; (8081278 <_GLOBAL__sub_I_System+0x3c>)
 8081244:	2500      	movs	r5, #0
 8081246:	8063      	strh	r3, [r4, #2]
 8081248:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 808124c:	4628      	mov	r0, r5
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 808124e:	80a3      	strh	r3, [r4, #4]
 8081250:	7025      	strb	r5, [r4, #0]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8081252:	f7ff f95f 	bl	8080514 <set_system_mode>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 8081256:	a802      	add	r0, sp, #8
 8081258:	f840 5d04 	str.w	r5, [r0, #-4]!
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 808125c:	462a      	mov	r2, r5
 808125e:	4629      	mov	r1, r5
 8081260:	f7ff f858 	bl	8080314 <HAL_Core_Get_Last_Reset_Info>
        return reason;
 8081264:	9b01      	ldr	r3, [sp, #4]
class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
        if (resetReason() == RESET_REASON_POWER_MANAGEMENT) {
 8081266:	2b1e      	cmp	r3, #30
 8081268:	d104      	bne.n	8081274 <_GLOBAL__sub_I_System+0x38>
            // Woken up from standby mode
            sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
 808126a:	2303      	movs	r3, #3
 808126c:	7023      	strb	r3, [r4, #0]
 808126e:	2311      	movs	r3, #17
 8081270:	8065      	strh	r5, [r4, #2]
 8081272:	80a3      	strh	r3, [r4, #4]
 8081274:	b003      	add	sp, #12
 8081276:	bd30      	pop	{r4, r5, pc}
 8081278:	200004e0 	.word	0x200004e0

0808127c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 808127c:	4b02      	ldr	r3, [pc, #8]	; (8081288 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 808127e:	681a      	ldr	r2, [r3, #0]
 8081280:	4b02      	ldr	r3, [pc, #8]	; (808128c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 8081282:	601a      	str	r2, [r3, #0]
 8081284:	4770      	bx	lr
 8081286:	bf00      	nop
 8081288:	20000400 	.word	0x20000400
 808128c:	200004e8 	.word	0x200004e8

08081290 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 8081290:	4770      	bx	lr

08081292 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8081292:	7441      	strb	r1, [r0, #17]
 8081294:	4770      	bx	lr

08081296 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 8081296:	7c00      	ldrb	r0, [r0, #16]
 8081298:	f7ff b904 	b.w	80804a4 <HAL_USART_Available_Data_For_Write>

0808129c <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 808129c:	7c00      	ldrb	r0, [r0, #16]
 808129e:	f7ff b8d9 	b.w	8080454 <HAL_USART_Available_Data>

080812a2 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 80812a2:	7c00      	ldrb	r0, [r0, #16]
 80812a4:	f7ff b8e6 	b.w	8080474 <HAL_USART_Peek_Data>

080812a8 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 80812a8:	7c00      	ldrb	r0, [r0, #16]
 80812aa:	f7ff b8db 	b.w	8080464 <HAL_USART_Read_Data>

080812ae <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80812ae:	7c00      	ldrb	r0, [r0, #16]
 80812b0:	f7ff b8e8 	b.w	8080484 <HAL_USART_Flush_Data>

080812b4 <_ZN11USARTSerialD0Ev>:
 80812b4:	b510      	push	{r4, lr}
 80812b6:	4604      	mov	r4, r0
 80812b8:	f7fe fef1 	bl	808009e <_ZdlPv>
 80812bc:	4620      	mov	r0, r4
 80812be:	bd10      	pop	{r4, pc}

080812c0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80812c0:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80812c2:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80812c4:	4604      	mov	r4, r0
 80812c6:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80812c8:	b925      	cbnz	r5, 80812d4 <_ZN11USARTSerial5writeEh+0x14>
 80812ca:	7c00      	ldrb	r0, [r0, #16]
 80812cc:	f7ff f8ea 	bl	80804a4 <HAL_USART_Available_Data_For_Write>
 80812d0:	2800      	cmp	r0, #0
 80812d2:	dd05      	ble.n	80812e0 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80812d4:	4631      	mov	r1, r6
 80812d6:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80812d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80812dc:	f7ff b8b2 	b.w	8080444 <HAL_USART_Write_Data>
  }
  return 0;
}
 80812e0:	4628      	mov	r0, r5
 80812e2:	bd70      	pop	{r4, r5, r6, pc}

080812e4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80812e4:	b510      	push	{r4, lr}
 80812e6:	4604      	mov	r4, r0
 80812e8:	4608      	mov	r0, r1
 80812ea:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80812ec:	2200      	movs	r2, #0
 80812ee:	6062      	str	r2, [r4, #4]
 80812f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80812f4:	60a2      	str	r2, [r4, #8]
 80812f6:	4a05      	ldr	r2, [pc, #20]	; (808130c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80812f8:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80812fa:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80812fc:	2201      	movs	r2, #1
 80812fe:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 8081300:	461a      	mov	r2, r3
 8081302:	f7ff f897 	bl	8080434 <HAL_USART_Init>
}
 8081306:	4620      	mov	r0, r4
 8081308:	bd10      	pop	{r4, pc}
 808130a:	bf00      	nop
 808130c:	08082a88 	.word	0x08082a88

08081310 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 8081310:	7c00      	ldrb	r0, [r0, #16]
 8081312:	f7ff b8bf 	b.w	8080494 <HAL_USART_Is_Enabled>
	...

08081318 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 8081318:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 808131a:	4d0c      	ldr	r5, [pc, #48]	; (808134c <_Z22__fetch_global_Serial1v+0x34>)
 808131c:	6829      	ldr	r1, [r5, #0]
 808131e:	f011 0401 	ands.w	r4, r1, #1
 8081322:	d111      	bne.n	8081348 <_Z22__fetch_global_Serial1v+0x30>
 8081324:	4628      	mov	r0, r5
 8081326:	f7fe febc 	bl	80800a2 <__cxa_guard_acquire>
 808132a:	b168      	cbz	r0, 8081348 <_Z22__fetch_global_Serial1v+0x30>
 808132c:	4a08      	ldr	r2, [pc, #32]	; (8081350 <_Z22__fetch_global_Serial1v+0x38>)
 808132e:	4621      	mov	r1, r4
 8081330:	4b08      	ldr	r3, [pc, #32]	; (8081354 <_Z22__fetch_global_Serial1v+0x3c>)
 8081332:	4809      	ldr	r0, [pc, #36]	; (8081358 <_Z22__fetch_global_Serial1v+0x40>)
 8081334:	f7ff ffd6 	bl	80812e4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 8081338:	4628      	mov	r0, r5
 808133a:	f7fe feb7 	bl	80800ac <__cxa_guard_release>
 808133e:	4a07      	ldr	r2, [pc, #28]	; (808135c <_Z22__fetch_global_Serial1v+0x44>)
 8081340:	4907      	ldr	r1, [pc, #28]	; (8081360 <_Z22__fetch_global_Serial1v+0x48>)
 8081342:	4805      	ldr	r0, [pc, #20]	; (8081358 <_Z22__fetch_global_Serial1v+0x40>)
 8081344:	f000 fa72 	bl	808182c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 8081348:	4803      	ldr	r0, [pc, #12]	; (8081358 <_Z22__fetch_global_Serial1v+0x40>)
 808134a:	bd38      	pop	{r3, r4, r5, pc}
 808134c:	20000584 	.word	0x20000584
 8081350:	20000588 	.word	0x20000588
 8081354:	20000500 	.word	0x20000500
 8081358:	200004ec 	.word	0x200004ec
 808135c:	20000468 	.word	0x20000468
 8081360:	08081291 	.word	0x08081291

08081364 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8081364:	7441      	strb	r1, [r0, #17]
 8081366:	4770      	bx	lr

08081368 <_ZN9USBSerialD1Ev>:
#include "spark_wiring_platform.h"
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"

class USBSerial : public Stream
 8081368:	4770      	bx	lr

0808136a <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 808136a:	2100      	movs	r1, #0
 808136c:	7c00      	ldrb	r0, [r0, #16]
 808136e:	f7ff b8b9 	b.w	80804e4 <HAL_USB_USART_Receive_Data>

08081372 <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 8081372:	2101      	movs	r1, #1
 8081374:	7c00      	ldrb	r0, [r0, #16]
 8081376:	f7ff b8b5 	b.w	80804e4 <HAL_USB_USART_Receive_Data>

0808137a <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 808137a:	7c00      	ldrb	r0, [r0, #16]
 808137c:	f7ff b8aa 	b.w	80804d4 <HAL_USB_USART_Available_Data_For_Write>

08081380 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 8081380:	7c00      	ldrb	r0, [r0, #16]
 8081382:	f7ff b89f 	b.w	80804c4 <HAL_USB_USART_Available_Data>

08081386 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 8081386:	b538      	push	{r3, r4, r5, lr}
 8081388:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 808138a:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 808138c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 808138e:	f7ff f8a1 	bl	80804d4 <HAL_USB_USART_Available_Data_For_Write>
 8081392:	2800      	cmp	r0, #0
 8081394:	dc01      	bgt.n	808139a <_ZN9USBSerial5writeEh+0x14>
 8081396:	7c60      	ldrb	r0, [r4, #17]
 8081398:	b120      	cbz	r0, 80813a4 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 808139a:	4629      	mov	r1, r5
 808139c:	7c20      	ldrb	r0, [r4, #16]
 808139e:	f7ff f8a9 	bl	80804f4 <HAL_USB_USART_Send_Data>
    return 1;
 80813a2:	2001      	movs	r0, #1
  }
  return 0;
}
 80813a4:	bd38      	pop	{r3, r4, r5, pc}

080813a6 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80813a6:	7c00      	ldrb	r0, [r0, #16]
 80813a8:	f7ff b8ac 	b.w	8080504 <HAL_USB_USART_Flush_Data>

080813ac <_ZN9USBSerialD0Ev>:
 80813ac:	b510      	push	{r4, lr}
 80813ae:	4604      	mov	r4, r0
 80813b0:	f7fe fe75 	bl	808009e <_ZdlPv>
 80813b4:	4620      	mov	r0, r4
 80813b6:	bd10      	pop	{r4, pc}

080813b8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80813b8:	b510      	push	{r4, lr}
 80813ba:	4604      	mov	r4, r0
 80813bc:	2300      	movs	r3, #0
 80813be:	6063      	str	r3, [r4, #4]
 80813c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80813c4:	60a3      	str	r3, [r4, #8]
 80813c6:	4b05      	ldr	r3, [pc, #20]	; (80813dc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80813c8:	4608      	mov	r0, r1
 80813ca:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80813cc:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80813ce:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80813d0:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80813d2:	4611      	mov	r1, r2
 80813d4:	f7ff f86e 	bl	80804b4 <HAL_USB_USART_Init>
}
 80813d8:	4620      	mov	r0, r4
 80813da:	bd10      	pop	{r4, pc}
 80813dc:	08082ab8 	.word	0x08082ab8

080813e0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80813e0:	b510      	push	{r4, lr}
 80813e2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80813e4:	2214      	movs	r2, #20
 80813e6:	2100      	movs	r1, #0
 80813e8:	f001 f9ed 	bl	80827c6 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80813ec:	4b05      	ldr	r3, [pc, #20]	; (8081404 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80813ee:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80813f0:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80813f2:	4b05      	ldr	r3, [pc, #20]	; (8081408 <_Z19acquireSerialBufferv+0x28>)
 80813f4:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80813f6:	f240 1301 	movw	r3, #257	; 0x101
 80813fa:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80813fc:	2381      	movs	r3, #129	; 0x81
 80813fe:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 8081400:	bd10      	pop	{r4, pc}
 8081402:	bf00      	nop
 8081404:	20000691 	.word	0x20000691
 8081408:	20000610 	.word	0x20000610

0808140c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 808140c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 808140e:	4d0e      	ldr	r5, [pc, #56]	; (8081448 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 8081410:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 8081412:	a801      	add	r0, sp, #4
 8081414:	f7ff ffe4 	bl	80813e0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8081418:	6829      	ldr	r1, [r5, #0]
 808141a:	f011 0401 	ands.w	r4, r1, #1
 808141e:	d110      	bne.n	8081442 <_Z16_fetch_usbserialv+0x36>
 8081420:	4628      	mov	r0, r5
 8081422:	f7fe fe3e 	bl	80800a2 <__cxa_guard_acquire>
 8081426:	b160      	cbz	r0, 8081442 <_Z16_fetch_usbserialv+0x36>
 8081428:	aa01      	add	r2, sp, #4
 808142a:	4621      	mov	r1, r4
 808142c:	4807      	ldr	r0, [pc, #28]	; (808144c <_Z16_fetch_usbserialv+0x40>)
 808142e:	f7ff ffc3 	bl	80813b8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8081432:	4628      	mov	r0, r5
 8081434:	f7fe fe3a 	bl	80800ac <__cxa_guard_release>
 8081438:	4a05      	ldr	r2, [pc, #20]	; (8081450 <_Z16_fetch_usbserialv+0x44>)
 808143a:	4906      	ldr	r1, [pc, #24]	; (8081454 <_Z16_fetch_usbserialv+0x48>)
 808143c:	4803      	ldr	r0, [pc, #12]	; (808144c <_Z16_fetch_usbserialv+0x40>)
 808143e:	f000 f9f5 	bl	808182c <__aeabi_atexit>
	return _usbserial;
}
 8081442:	4802      	ldr	r0, [pc, #8]	; (808144c <_Z16_fetch_usbserialv+0x40>)
 8081444:	b007      	add	sp, #28
 8081446:	bd30      	pop	{r4, r5, pc}
 8081448:	2000060c 	.word	0x2000060c
 808144c:	20000794 	.word	0x20000794
 8081450:	20000468 	.word	0x20000468
 8081454:	08081369 	.word	0x08081369

08081458 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 8081458:	b510      	push	{r4, lr}
 808145a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 808145c:	2214      	movs	r2, #20
 808145e:	2100      	movs	r1, #0
 8081460:	f001 f9b1 	bl	80827c6 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8081464:	4b05      	ldr	r3, [pc, #20]	; (808147c <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8081466:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8081468:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 808146a:	4b05      	ldr	r3, [pc, #20]	; (8081480 <_Z23acquireUSBSerial1Bufferv+0x28>)
 808146c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 808146e:	f240 1301 	movw	r3, #257	; 0x101
 8081472:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8081474:	2381      	movs	r3, #129	; 0x81
 8081476:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 8081478:	bd10      	pop	{r4, pc}
 808147a:	bf00      	nop
 808147c:	20000844 	.word	0x20000844
 8081480:	200007ac 	.word	0x200007ac

08081484 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 8081484:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8081486:	4c0e      	ldr	r4, [pc, #56]	; (80814c0 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 8081488:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 808148a:	a801      	add	r0, sp, #4
 808148c:	f7ff ffe4 	bl	8081458 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8081490:	6823      	ldr	r3, [r4, #0]
 8081492:	07db      	lsls	r3, r3, #31
 8081494:	d410      	bmi.n	80814b8 <_Z17_fetch_usbserial1v+0x34>
 8081496:	4620      	mov	r0, r4
 8081498:	f7fe fe03 	bl	80800a2 <__cxa_guard_acquire>
 808149c:	b160      	cbz	r0, 80814b8 <_Z17_fetch_usbserial1v+0x34>
 808149e:	aa01      	add	r2, sp, #4
 80814a0:	2101      	movs	r1, #1
 80814a2:	4808      	ldr	r0, [pc, #32]	; (80814c4 <_Z17_fetch_usbserial1v+0x40>)
 80814a4:	f7ff ff88 	bl	80813b8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80814a8:	4620      	mov	r0, r4
 80814aa:	f7fe fdff 	bl	80800ac <__cxa_guard_release>
 80814ae:	4a06      	ldr	r2, [pc, #24]	; (80814c8 <_Z17_fetch_usbserial1v+0x44>)
 80814b0:	4906      	ldr	r1, [pc, #24]	; (80814cc <_Z17_fetch_usbserial1v+0x48>)
 80814b2:	4804      	ldr	r0, [pc, #16]	; (80814c4 <_Z17_fetch_usbserial1v+0x40>)
 80814b4:	f000 f9ba 	bl	808182c <__aeabi_atexit>
  return _usbserial1;
}
 80814b8:	4802      	ldr	r0, [pc, #8]	; (80814c4 <_Z17_fetch_usbserial1v+0x40>)
 80814ba:	b006      	add	sp, #24
 80814bc:	bd10      	pop	{r4, pc}
 80814be:	bf00      	nop
 80814c0:	200007a8 	.word	0x200007a8
 80814c4:	20000830 	.word	0x20000830
 80814c8:	20000468 	.word	0x20000468
 80814cc:	08081369 	.word	0x08081369

080814d0 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 80814d0:	b510      	push	{r4, lr}
 80814d2:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 80814d4:	f001 f9cb 	bl	808286e <strlen>
 80814d8:	3801      	subs	r0, #1
 80814da:	1823      	adds	r3, r4, r0
 80814dc:	4620      	mov	r0, r4
	while(i<j){
 80814de:	4298      	cmp	r0, r3
 80814e0:	d206      	bcs.n	80814f0 <_Z11str_reversePc+0x20>
		c = *i;
 80814e2:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 80814e4:	7819      	ldrb	r1, [r3, #0]
 80814e6:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 80814ea:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
 80814ee:	e7f6      	b.n	80814de <_Z11str_reversePc+0xe>
 80814f0:	bd10      	pop	{r4, pc}

080814f2 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 80814f2:	b570      	push	{r4, r5, r6, lr}
 80814f4:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 80814f6:	1e91      	subs	r1, r2, #2
 80814f8:	2922      	cmp	r1, #34	; 0x22
 80814fa:	d820      	bhi.n	808153e <ultoa+0x4c>
 80814fc:	4625      	mov	r5, r4
 80814fe:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 8081500:	b910      	cbnz	r0, 8081508 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 8081502:	4423      	add	r3, r4
            *ptr++ = '0';
 8081504:	2230      	movs	r2, #48	; 0x30
 8081506:	e00e      	b.n	8081526 <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 8081508:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 808150c:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 8081510:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 8081512:	2809      	cmp	r0, #9
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
            result.rem = a%radix;
            *ptr = result.rem;
 8081514:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
                *ptr += '0';
 8081518:	bf94      	ite	ls
 808151a:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 808151c:	3157      	addhi	r1, #87	; 0x57
 808151e:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
 8081522:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 8081524:	e7eb      	b.n	80814fe <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 8081526:	4299      	cmp	r1, r3
 8081528:	d202      	bcs.n	8081530 <ultoa+0x3e>
            *ptr++ = '0';
 808152a:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 808152e:	e7fa      	b.n	8081526 <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
 8081530:	2300      	movs	r3, #0
	str_reverse(buffer);
 8081532:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
 8081534:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
 8081536:	f7ff ffcb 	bl	80814d0 <_Z11str_reversePc>
	return buffer;
 808153a:	4620      	mov	r0, r4
 808153c:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
 808153e:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
 8081540:	bd70      	pop	{r4, r5, r6, pc}

08081542 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 8081542:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 8081544:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 8081546:	460c      	mov	r4, r1
 8081548:	4615      	mov	r5, r2
	if(a<0){
 808154a:	da0b      	bge.n	8081564 <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 808154c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 8081550:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 8081554:	bf14      	ite	ne
 8081556:	4258      	negne	r0, r3
 8081558:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 808155a:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 808155c:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
 808155e:	462a      	mov	r2, r5
 8081560:	4419      	add	r1, r3
 8081562:	e000      	b.n	8081566 <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
 8081564:	2301      	movs	r3, #1
 8081566:	f7ff ffc4 	bl	80814f2 <ultoa>
	}
	return buffer;
}
 808156a:	4620      	mov	r0, r4
 808156c:	bd38      	pop	{r3, r4, r5, pc}
	...

08081570 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 8081570:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 8081572:	4b18      	ldr	r3, [pc, #96]	; (80815d4 <serialEventRun+0x64>)
 8081574:	b133      	cbz	r3, 8081584 <serialEventRun+0x14>
 8081576:	f7ff ff49 	bl	808140c <_Z16_fetch_usbserialv>
 808157a:	6803      	ldr	r3, [r0, #0]
 808157c:	691b      	ldr	r3, [r3, #16]
 808157e:	4798      	blx	r3
 8081580:	2800      	cmp	r0, #0
 8081582:	dc1e      	bgt.n	80815c2 <serialEventRun+0x52>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 8081584:	4b14      	ldr	r3, [pc, #80]	; (80815d8 <serialEventRun+0x68>)
 8081586:	b133      	cbz	r3, 8081596 <serialEventRun+0x26>
 8081588:	f7ff fec6 	bl	8081318 <_Z22__fetch_global_Serial1v>
 808158c:	6803      	ldr	r3, [r0, #0]
 808158e:	691b      	ldr	r3, [r3, #16]
 8081590:	4798      	blx	r3
 8081592:	2800      	cmp	r0, #0
 8081594:	dc18      	bgt.n	80815c8 <serialEventRun+0x58>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 8081596:	4b11      	ldr	r3, [pc, #68]	; (80815dc <serialEventRun+0x6c>)
 8081598:	b10b      	cbz	r3, 808159e <serialEventRun+0x2e>
 808159a:	f3af 8000 	nop.w
#if Wiring_Serial3
    if (serialEventRun3) serialEventRun3();
#endif

#if Wiring_Serial4
    if (serialEventRun4) serialEventRun4();
 808159e:	4b10      	ldr	r3, [pc, #64]	; (80815e0 <serialEventRun+0x70>)
 80815a0:	b10b      	cbz	r3, 80815a6 <serialEventRun+0x36>
 80815a2:	f3af 8000 	nop.w
#endif

#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
 80815a6:	4b0f      	ldr	r3, [pc, #60]	; (80815e4 <serialEventRun+0x74>)
 80815a8:	b10b      	cbz	r3, 80815ae <serialEventRun+0x3e>
 80815aa:	f3af 8000 	nop.w
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80815ae:	4b0e      	ldr	r3, [pc, #56]	; (80815e8 <serialEventRun+0x78>)
 80815b0:	b17b      	cbz	r3, 80815d2 <serialEventRun+0x62>
 80815b2:	f7ff ff67 	bl	8081484 <_Z17_fetch_usbserial1v>
 80815b6:	6803      	ldr	r3, [r0, #0]
 80815b8:	691b      	ldr	r3, [r3, #16]
 80815ba:	4798      	blx	r3
 80815bc:	2800      	cmp	r0, #0
 80815be:	dc06      	bgt.n	80815ce <serialEventRun+0x5e>
 80815c0:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80815c2:	f3af 8000 	nop.w
 80815c6:	e7dd      	b.n	8081584 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80815c8:	f3af 8000 	nop.w
 80815cc:	e7e3      	b.n	8081596 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80815ce:	f3af 8000 	nop.w
 80815d2:	bd08      	pop	{r3, pc}
	...

080815ec <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80815ec:	b508      	push	{r3, lr}
	serialEventRun();
 80815ee:	f7ff ffbf 	bl	8081570 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80815f2:	f7fe fea7 	bl	8080344 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80815f6:	4b01      	ldr	r3, [pc, #4]	; (80815fc <_post_loop+0x10>)
 80815f8:	6018      	str	r0, [r3, #0]
 80815fa:	bd08      	pop	{r3, pc}
 80815fc:	20000950 	.word	0x20000950

08081600 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8081600:	4802      	ldr	r0, [pc, #8]	; (808160c <_Z33system_initialize_user_backup_ramv+0xc>)
 8081602:	4a03      	ldr	r2, [pc, #12]	; (8081610 <_Z33system_initialize_user_backup_ramv+0x10>)
 8081604:	4903      	ldr	r1, [pc, #12]	; (8081614 <_Z33system_initialize_user_backup_ramv+0x14>)
 8081606:	1a12      	subs	r2, r2, r0
 8081608:	f001 b8d2 	b.w	80827b0 <memcpy>
 808160c:	40024000 	.word	0x40024000
 8081610:	40024004 	.word	0x40024004
 8081614:	08082b88 	.word	0x08082b88

08081618 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 8081618:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 808161a:	2300      	movs	r3, #0
 808161c:	9300      	str	r3, [sp, #0]
 808161e:	461a      	mov	r2, r3
 8081620:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8081624:	f7fe ffa0 	bl	8080568 <system_ctrl_set_result>
}
 8081628:	b003      	add	sp, #12
 808162a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08081630 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 8081630:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 8081632:	8843      	ldrh	r3, [r0, #2]
 8081634:	2b0a      	cmp	r3, #10
 8081636:	d008      	beq.n	808164a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 8081638:	2b50      	cmp	r3, #80	; 0x50
 808163a:	d109      	bne.n	8081650 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 808163c:	4b09      	ldr	r3, [pc, #36]	; (8081664 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 808163e:	681b      	ldr	r3, [r3, #0]
 8081640:	b13b      	cbz	r3, 8081652 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 8081642:	b003      	add	sp, #12
 8081644:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 8081648:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 808164a:	f7ff ffe5 	bl	8081618 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 808164e:	e006      	b.n	808165e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8081650:	2300      	movs	r3, #0
 8081652:	9300      	str	r3, [sp, #0]
 8081654:	461a      	mov	r2, r3
 8081656:	f06f 0177 	mvn.w	r1, #119	; 0x77
 808165a:	f7fe ff85 	bl	8080568 <system_ctrl_set_result>
        break;
    }
}
 808165e:	b003      	add	sp, #12
 8081660:	f85d fb04 	ldr.w	pc, [sp], #4
 8081664:	20000948 	.word	0x20000948

08081668 <module_user_init_hook>:

void module_user_init_hook()
{
 8081668:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 808166a:	4c10      	ldr	r4, [pc, #64]	; (80816ac <module_user_init_hook+0x44>)
 808166c:	4d10      	ldr	r5, [pc, #64]	; (80816b0 <module_user_init_hook+0x48>)
 808166e:	6823      	ldr	r3, [r4, #0]
 8081670:	42ab      	cmp	r3, r5
 8081672:	4b10      	ldr	r3, [pc, #64]	; (80816b4 <module_user_init_hook+0x4c>)
 8081674:	bf0c      	ite	eq
 8081676:	2201      	moveq	r2, #1
 8081678:	2200      	movne	r2, #0
 808167a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 808167c:	d002      	beq.n	8081684 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 808167e:	f7ff ffbf 	bl	8081600 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 8081682:	6025      	str	r5, [r4, #0]
#endif

    // todo - add a RNG define for that capability
#if defined(STM32F2XX)
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    srand(HAL_RNG_GetRandomNumber());
 8081684:	f7fe fe4e 	bl	8080324 <HAL_RNG_GetRandomNumber>
 8081688:	f001 f8a6 	bl	80827d8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 808168c:	4b0a      	ldr	r3, [pc, #40]	; (80816b8 <module_user_init_hook+0x50>)
 808168e:	b11b      	cbz	r3, 8081698 <module_user_init_hook+0x30>
        uint32_t seed = HAL_RNG_GetRandomNumber();
 8081690:	f7fe fe48 	bl	8080324 <HAL_RNG_GetRandomNumber>
        random_seed_from_cloud(seed);
 8081694:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 8081698:	2100      	movs	r1, #0
 808169a:	4807      	ldr	r0, [pc, #28]	; (80816b8 <module_user_init_hook+0x50>)
 808169c:	f7fe ff76 	bl	808058c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80816a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80816a4:	2100      	movs	r1, #0
 80816a6:	4805      	ldr	r0, [pc, #20]	; (80816bc <module_user_init_hook+0x54>)
 80816a8:	f7fe bf54 	b.w	8080554 <system_ctrl_set_app_request_handler>
 80816ac:	40024000 	.word	0x40024000
 80816b0:	9a271c1e 	.word	0x9a271c1e
 80816b4:	2000094c 	.word	0x2000094c
 80816b8:	00000000 	.word	0x00000000
 80816bc:	08081631 	.word	0x08081631

080816c0 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80816c0:	b510      	push	{r4, lr}
 80816c2:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80816c4:	480f      	ldr	r0, [pc, #60]	; (8081704 <pinAvailable+0x44>)
 80816c6:	f7ff fc75 	bl	8080fb4 <_ZN8SPIClass9isEnabledEv>
 80816ca:	b128      	cbz	r0, 80816d8 <pinAvailable+0x18>
 80816cc:	f1a4 030d 	sub.w	r3, r4, #13
 80816d0:	2b02      	cmp	r3, #2
 80816d2:	d801      	bhi.n	80816d8 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80816d4:	2000      	movs	r0, #0
 80816d6:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80816d8:	f000 f842 	bl	8081760 <_Z19__fetch_global_Wirev>
 80816dc:	f7ff faa8 	bl	8080c30 <_ZN7TwoWire9isEnabledEv>
 80816e0:	b108      	cbz	r0, 80816e6 <pinAvailable+0x26>
 80816e2:	2c01      	cmp	r4, #1
 80816e4:	d9f6      	bls.n	80816d4 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80816e6:	f7ff fe17 	bl	8081318 <_Z22__fetch_global_Serial1v>
 80816ea:	f7ff fe11 	bl	8081310 <_ZN11USARTSerial9isEnabledEv>
 80816ee:	b118      	cbz	r0, 80816f8 <pinAvailable+0x38>
 80816f0:	f1a4 0312 	sub.w	r3, r4, #18
 80816f4:	2b01      	cmp	r3, #1
 80816f6:	d9ed      	bls.n	80816d4 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80816f8:	2c2e      	cmp	r4, #46	; 0x2e
 80816fa:	bf8c      	ite	hi
 80816fc:	2000      	movhi	r0, #0
 80816fe:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 8081700:	bd10      	pop	{r4, pc}
 8081702:	bf00      	nop
 8081704:	20000974 	.word	0x20000974

08081708 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8081708:	282e      	cmp	r0, #46	; 0x2e
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 808170a:	b538      	push	{r3, r4, r5, lr}
 808170c:	4604      	mov	r4, r0
 808170e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8081710:	d80a      	bhi.n	8081728 <pinMode+0x20>
 8081712:	29ff      	cmp	r1, #255	; 0xff
 8081714:	d008      	beq.n	8081728 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 8081716:	f7ff ffd3 	bl	80816c0 <pinAvailable>
 808171a:	b128      	cbz	r0, 8081728 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 808171c:	4629      	mov	r1, r5
 808171e:	4620      	mov	r0, r4
}
 8081720:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 8081724:	f7fe be1e 	b.w	8080364 <HAL_Pin_Mode>
 8081728:	bd38      	pop	{r3, r4, r5, pc}

0808172a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 808172a:	b538      	push	{r3, r4, r5, lr}
 808172c:	4604      	mov	r4, r0
 808172e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 8081730:	f7fe fe20 	bl	8080374 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 8081734:	28ff      	cmp	r0, #255	; 0xff
 8081736:	d010      	beq.n	808175a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 8081738:	2806      	cmp	r0, #6
 808173a:	d804      	bhi.n	8081746 <digitalWrite+0x1c>
 808173c:	234d      	movs	r3, #77	; 0x4d
 808173e:	fa23 f000 	lsr.w	r0, r3, r0
 8081742:	07c3      	lsls	r3, r0, #31
 8081744:	d409      	bmi.n	808175a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 8081746:	4620      	mov	r0, r4
 8081748:	f7ff ffba 	bl	80816c0 <pinAvailable>
 808174c:	b128      	cbz	r0, 808175a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 808174e:	4629      	mov	r1, r5
 8081750:	4620      	mov	r0, r4
}
 8081752:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 8081756:	f7fe be15 	b.w	8080384 <HAL_GPIO_Write>
 808175a:	bd38      	pop	{r3, r4, r5, pc}

0808175c <pulseIn>:
 */
uint32_t pulseIn(pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return HAL_Pulse_In(pin, value);
 808175c:	f7fe be1a 	b.w	8080394 <HAL_Pulse_In>

08081760 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 8081760:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 8081762:	4d0b      	ldr	r5, [pc, #44]	; (8081790 <_Z19__fetch_global_Wirev+0x30>)
 8081764:	6829      	ldr	r1, [r5, #0]
 8081766:	f011 0401 	ands.w	r4, r1, #1
 808176a:	d10f      	bne.n	808178c <_Z19__fetch_global_Wirev+0x2c>
 808176c:	4628      	mov	r0, r5
 808176e:	f7fe fc98 	bl	80800a2 <__cxa_guard_acquire>
 8081772:	b158      	cbz	r0, 808178c <_Z19__fetch_global_Wirev+0x2c>
 8081774:	4621      	mov	r1, r4
 8081776:	4807      	ldr	r0, [pc, #28]	; (8081794 <_Z19__fetch_global_Wirev+0x34>)
 8081778:	f7ff fa48 	bl	8080c0c <_ZN7TwoWireC1E17HAL_I2C_Interface>
 808177c:	4628      	mov	r0, r5
 808177e:	f7fe fc95 	bl	80800ac <__cxa_guard_release>
 8081782:	4a05      	ldr	r2, [pc, #20]	; (8081798 <_Z19__fetch_global_Wirev+0x38>)
 8081784:	4905      	ldr	r1, [pc, #20]	; (808179c <_Z19__fetch_global_Wirev+0x3c>)
 8081786:	4803      	ldr	r0, [pc, #12]	; (8081794 <_Z19__fetch_global_Wirev+0x34>)
 8081788:	f000 f850 	bl	808182c <__aeabi_atexit>
	return wire;
}
 808178c:	4801      	ldr	r0, [pc, #4]	; (8081794 <_Z19__fetch_global_Wirev+0x34>)
 808178e:	bd38      	pop	{r3, r4, r5, pc}
 8081790:	20000954 	.word	0x20000954
 8081794:	20000958 	.word	0x20000958
 8081798:	20000468 	.word	0x20000468
 808179c:	08080bb5 	.word	0x08080bb5

080817a0 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

const IPAddress INADDR_NONE(0, 0, 0, 0);
 80817a0:	b513      	push	{r0, r1, r4, lr}
 80817a2:	4c08      	ldr	r4, [pc, #32]	; (80817c4 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80817a4:	2300      	movs	r3, #0
 80817a6:	461a      	mov	r2, r3
 80817a8:	4619      	mov	r1, r3
 80817aa:	9300      	str	r3, [sp, #0]
 80817ac:	4620      	mov	r0, r4
 80817ae:	f7ff fa6f 	bl	8080c90 <_ZN9IPAddressC1Ehhhh>
 80817b2:	4620      	mov	r0, r4
 80817b4:	4a04      	ldr	r2, [pc, #16]	; (80817c8 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80817b6:	4905      	ldr	r1, [pc, #20]	; (80817cc <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80817b8:	b002      	add	sp, #8
 80817ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80817be:	f000 b835 	b.w	808182c <__aeabi_atexit>
 80817c2:	bf00      	nop
 80817c4:	2000096c 	.word	0x2000096c
 80817c8:	20000468 	.word	0x20000468
 80817cc:	08080c39 	.word	0x08080c39

080817d0 <_GLOBAL__sub_I_SPI>:
#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 80817d0:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80817d2:	4e11      	ldr	r6, [pc, #68]	; (8081818 <_GLOBAL__sub_I_SPI+0x48>)
 80817d4:	4d11      	ldr	r5, [pc, #68]	; (808181c <_GLOBAL__sub_I_SPI+0x4c>)
 80817d6:	4c12      	ldr	r4, [pc, #72]	; (8081820 <_GLOBAL__sub_I_SPI+0x50>)
 80817d8:	2100      	movs	r1, #0
 80817da:	4630      	mov	r0, r6
 80817dc:	f7ff fbd6 	bl	8080f8c <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80817e0:	4630      	mov	r0, r6

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80817e2:	4e10      	ldr	r6, [pc, #64]	; (8081824 <_GLOBAL__sub_I_SPI+0x54>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80817e4:	462a      	mov	r2, r5
 80817e6:	4621      	mov	r1, r4
 80817e8:	f000 f820 	bl	808182c <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80817ec:	2101      	movs	r1, #1
 80817ee:	4630      	mov	r0, r6
 80817f0:	f7ff fbcc 	bl	8080f8c <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80817f4:	4630      	mov	r0, r6
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 80817f6:	4e0c      	ldr	r6, [pc, #48]	; (8081828 <_GLOBAL__sub_I_SPI+0x58>)
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80817f8:	462a      	mov	r2, r5
 80817fa:	4621      	mov	r1, r4
 80817fc:	f000 f816 	bl	808182c <__aeabi_atexit>
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 8081800:	2102      	movs	r1, #2
 8081802:	4630      	mov	r0, r6
 8081804:	f7ff fbc2 	bl	8080f8c <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8081808:	462a      	mov	r2, r5
 808180a:	4621      	mov	r1, r4
 808180c:	4630      	mov	r0, r6
 808180e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8081812:	f000 b80b 	b.w	808182c <__aeabi_atexit>
 8081816:	bf00      	nop
 8081818:	20000974 	.word	0x20000974
 808181c:	20000468 	.word	0x20000468
 8081820:	08080f7d 	.word	0x08080f7d
 8081824:	20000984 	.word	0x20000984
 8081828:	20000994 	.word	0x20000994

0808182c <__aeabi_atexit>:
 808182c:	460b      	mov	r3, r1
 808182e:	4601      	mov	r1, r0
 8081830:	4618      	mov	r0, r3
 8081832:	f000 bfaf 	b.w	8082794 <__cxa_atexit>

08081836 <_ZSt25__throw_bad_function_callv>:
 8081836:	b508      	push	{r3, lr}
 8081838:	f7fe fed0 	bl	80805dc <abort>

0808183c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 808183c:	4b24      	ldr	r3, [pc, #144]	; (80818d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 808183e:	681a      	ldr	r2, [r3, #0]
 8081840:	07d0      	lsls	r0, r2, #31
 8081842:	bf5c      	itt	pl
 8081844:	2201      	movpl	r2, #1
 8081846:	601a      	strpl	r2, [r3, #0]
 8081848:	4b22      	ldr	r3, [pc, #136]	; (80818d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 808184a:	681a      	ldr	r2, [r3, #0]
 808184c:	07d1      	lsls	r1, r2, #31
 808184e:	bf5c      	itt	pl
 8081850:	2201      	movpl	r2, #1
 8081852:	601a      	strpl	r2, [r3, #0]
 8081854:	4b20      	ldr	r3, [pc, #128]	; (80818d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 8081856:	681a      	ldr	r2, [r3, #0]
 8081858:	07d2      	lsls	r2, r2, #31
 808185a:	bf5c      	itt	pl
 808185c:	2201      	movpl	r2, #1
 808185e:	601a      	strpl	r2, [r3, #0]
 8081860:	4b1e      	ldr	r3, [pc, #120]	; (80818dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 8081862:	681a      	ldr	r2, [r3, #0]
 8081864:	07d0      	lsls	r0, r2, #31
 8081866:	bf5c      	itt	pl
 8081868:	2201      	movpl	r2, #1
 808186a:	601a      	strpl	r2, [r3, #0]
 808186c:	4b1c      	ldr	r3, [pc, #112]	; (80818e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 808186e:	681a      	ldr	r2, [r3, #0]
 8081870:	07d1      	lsls	r1, r2, #31
 8081872:	bf5c      	itt	pl
 8081874:	2201      	movpl	r2, #1
 8081876:	601a      	strpl	r2, [r3, #0]
 8081878:	4b1a      	ldr	r3, [pc, #104]	; (80818e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 808187a:	681a      	ldr	r2, [r3, #0]
 808187c:	07d2      	lsls	r2, r2, #31
 808187e:	bf5c      	itt	pl
 8081880:	2201      	movpl	r2, #1
 8081882:	601a      	strpl	r2, [r3, #0]
 8081884:	4b18      	ldr	r3, [pc, #96]	; (80818e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 8081886:	681a      	ldr	r2, [r3, #0]
 8081888:	07d0      	lsls	r0, r2, #31
 808188a:	bf5c      	itt	pl
 808188c:	2201      	movpl	r2, #1
 808188e:	601a      	strpl	r2, [r3, #0]
 8081890:	4b16      	ldr	r3, [pc, #88]	; (80818ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 8081892:	681a      	ldr	r2, [r3, #0]
 8081894:	07d1      	lsls	r1, r2, #31
 8081896:	bf5c      	itt	pl
 8081898:	2201      	movpl	r2, #1
 808189a:	601a      	strpl	r2, [r3, #0]
 808189c:	4b14      	ldr	r3, [pc, #80]	; (80818f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 808189e:	681a      	ldr	r2, [r3, #0]
 80818a0:	07d2      	lsls	r2, r2, #31
 80818a2:	bf5c      	itt	pl
 80818a4:	2201      	movpl	r2, #1
 80818a6:	601a      	strpl	r2, [r3, #0]
 80818a8:	4b12      	ldr	r3, [pc, #72]	; (80818f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80818aa:	681a      	ldr	r2, [r3, #0]
 80818ac:	07d0      	lsls	r0, r2, #31
 80818ae:	bf5c      	itt	pl
 80818b0:	2201      	movpl	r2, #1
 80818b2:	601a      	strpl	r2, [r3, #0]
 80818b4:	4b10      	ldr	r3, [pc, #64]	; (80818f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80818b6:	681a      	ldr	r2, [r3, #0]
 80818b8:	07d1      	lsls	r1, r2, #31
 80818ba:	bf5c      	itt	pl
 80818bc:	2201      	movpl	r2, #1
 80818be:	601a      	strpl	r2, [r3, #0]
 80818c0:	4b0e      	ldr	r3, [pc, #56]	; (80818fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80818c2:	681a      	ldr	r2, [r3, #0]
 80818c4:	07d2      	lsls	r2, r2, #31
 80818c6:	bf5c      	itt	pl
 80818c8:	2201      	movpl	r2, #1
 80818ca:	601a      	strpl	r2, [r3, #0]
 80818cc:	4770      	bx	lr
 80818ce:	bf00      	nop
 80818d0:	200009d0 	.word	0x200009d0
 80818d4:	200009cc 	.word	0x200009cc
 80818d8:	200009c8 	.word	0x200009c8
 80818dc:	200009c4 	.word	0x200009c4
 80818e0:	200009c0 	.word	0x200009c0
 80818e4:	200009bc 	.word	0x200009bc
 80818e8:	200009b8 	.word	0x200009b8
 80818ec:	200009b4 	.word	0x200009b4
 80818f0:	200009b0 	.word	0x200009b0
 80818f4:	200009ac 	.word	0x200009ac
 80818f8:	200009a8 	.word	0x200009a8
 80818fc:	200009a4 	.word	0x200009a4

08081900 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8081900:	4b18      	ldr	r3, [pc, #96]	; (8081964 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8081902:	681a      	ldr	r2, [r3, #0]
 8081904:	07d1      	lsls	r1, r2, #31
 8081906:	bf5c      	itt	pl
 8081908:	2201      	movpl	r2, #1
 808190a:	601a      	strpl	r2, [r3, #0]
 808190c:	4b16      	ldr	r3, [pc, #88]	; (8081968 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 808190e:	681a      	ldr	r2, [r3, #0]
 8081910:	07d2      	lsls	r2, r2, #31
 8081912:	bf5c      	itt	pl
 8081914:	2201      	movpl	r2, #1
 8081916:	601a      	strpl	r2, [r3, #0]
 8081918:	4b14      	ldr	r3, [pc, #80]	; (808196c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 808191a:	681a      	ldr	r2, [r3, #0]
 808191c:	07d0      	lsls	r0, r2, #31
 808191e:	bf5c      	itt	pl
 8081920:	2201      	movpl	r2, #1
 8081922:	601a      	strpl	r2, [r3, #0]
 8081924:	4b12      	ldr	r3, [pc, #72]	; (8081970 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8081926:	681a      	ldr	r2, [r3, #0]
 8081928:	07d1      	lsls	r1, r2, #31
 808192a:	bf5c      	itt	pl
 808192c:	2201      	movpl	r2, #1
 808192e:	601a      	strpl	r2, [r3, #0]
 8081930:	4b10      	ldr	r3, [pc, #64]	; (8081974 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8081932:	681a      	ldr	r2, [r3, #0]
 8081934:	07d2      	lsls	r2, r2, #31
 8081936:	bf5c      	itt	pl
 8081938:	2201      	movpl	r2, #1
 808193a:	601a      	strpl	r2, [r3, #0]
 808193c:	4b0e      	ldr	r3, [pc, #56]	; (8081978 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 808193e:	681a      	ldr	r2, [r3, #0]
 8081940:	07d0      	lsls	r0, r2, #31
 8081942:	bf5c      	itt	pl
 8081944:	2201      	movpl	r2, #1
 8081946:	601a      	strpl	r2, [r3, #0]
 8081948:	4b0c      	ldr	r3, [pc, #48]	; (808197c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 808194a:	681a      	ldr	r2, [r3, #0]
 808194c:	07d1      	lsls	r1, r2, #31
 808194e:	bf5c      	itt	pl
 8081950:	2201      	movpl	r2, #1
 8081952:	601a      	strpl	r2, [r3, #0]
 8081954:	4b0a      	ldr	r3, [pc, #40]	; (8081980 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8081956:	681a      	ldr	r2, [r3, #0]
 8081958:	07d2      	lsls	r2, r2, #31
 808195a:	bf5c      	itt	pl
 808195c:	2201      	movpl	r2, #1
 808195e:	601a      	strpl	r2, [r3, #0]
 8081960:	4770      	bx	lr
 8081962:	bf00      	nop
 8081964:	200009f0 	.word	0x200009f0
 8081968:	200009ec 	.word	0x200009ec
 808196c:	200009e8 	.word	0x200009e8
 8081970:	200009e4 	.word	0x200009e4
 8081974:	200009e0 	.word	0x200009e0
 8081978:	200009dc 	.word	0x200009dc
 808197c:	200009d8 	.word	0x200009d8
 8081980:	200009d4 	.word	0x200009d4

08081984 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8081984:	4b18      	ldr	r3, [pc, #96]	; (80819e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8081986:	681a      	ldr	r2, [r3, #0]
 8081988:	07d1      	lsls	r1, r2, #31
 808198a:	bf5c      	itt	pl
 808198c:	2201      	movpl	r2, #1
 808198e:	601a      	strpl	r2, [r3, #0]
 8081990:	4b16      	ldr	r3, [pc, #88]	; (80819ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8081992:	681a      	ldr	r2, [r3, #0]
 8081994:	07d2      	lsls	r2, r2, #31
 8081996:	bf5c      	itt	pl
 8081998:	2201      	movpl	r2, #1
 808199a:	601a      	strpl	r2, [r3, #0]
 808199c:	4b14      	ldr	r3, [pc, #80]	; (80819f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 808199e:	681a      	ldr	r2, [r3, #0]
 80819a0:	07d0      	lsls	r0, r2, #31
 80819a2:	bf5c      	itt	pl
 80819a4:	2201      	movpl	r2, #1
 80819a6:	601a      	strpl	r2, [r3, #0]
 80819a8:	4b12      	ldr	r3, [pc, #72]	; (80819f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80819aa:	681a      	ldr	r2, [r3, #0]
 80819ac:	07d1      	lsls	r1, r2, #31
 80819ae:	bf5c      	itt	pl
 80819b0:	2201      	movpl	r2, #1
 80819b2:	601a      	strpl	r2, [r3, #0]
 80819b4:	4b10      	ldr	r3, [pc, #64]	; (80819f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80819b6:	681a      	ldr	r2, [r3, #0]
 80819b8:	07d2      	lsls	r2, r2, #31
 80819ba:	bf5c      	itt	pl
 80819bc:	2201      	movpl	r2, #1
 80819be:	601a      	strpl	r2, [r3, #0]
 80819c0:	4b0e      	ldr	r3, [pc, #56]	; (80819fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80819c2:	681a      	ldr	r2, [r3, #0]
 80819c4:	07d0      	lsls	r0, r2, #31
 80819c6:	bf5c      	itt	pl
 80819c8:	2201      	movpl	r2, #1
 80819ca:	601a      	strpl	r2, [r3, #0]
 80819cc:	4b0c      	ldr	r3, [pc, #48]	; (8081a00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80819ce:	681a      	ldr	r2, [r3, #0]
 80819d0:	07d1      	lsls	r1, r2, #31
 80819d2:	bf5c      	itt	pl
 80819d4:	2201      	movpl	r2, #1
 80819d6:	601a      	strpl	r2, [r3, #0]
 80819d8:	4b0a      	ldr	r3, [pc, #40]	; (8081a04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80819da:	681a      	ldr	r2, [r3, #0]
 80819dc:	07d2      	lsls	r2, r2, #31
 80819de:	bf5c      	itt	pl
 80819e0:	2201      	movpl	r2, #1
 80819e2:	601a      	strpl	r2, [r3, #0]
 80819e4:	4770      	bx	lr
 80819e6:	bf00      	nop
 80819e8:	20000a10 	.word	0x20000a10
 80819ec:	20000a0c 	.word	0x20000a0c
 80819f0:	20000a08 	.word	0x20000a08
 80819f4:	20000a04 	.word	0x20000a04
 80819f8:	20000a00 	.word	0x20000a00
 80819fc:	200009fc 	.word	0x200009fc
 8081a00:	200009f8 	.word	0x200009f8
 8081a04:	200009f4 	.word	0x200009f4

08081a08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 8081a08:	4b24      	ldr	r3, [pc, #144]	; (8081a9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 8081a0a:	681a      	ldr	r2, [r3, #0]
 8081a0c:	07d0      	lsls	r0, r2, #31
 8081a0e:	bf5c      	itt	pl
 8081a10:	2201      	movpl	r2, #1
 8081a12:	601a      	strpl	r2, [r3, #0]
 8081a14:	4b22      	ldr	r3, [pc, #136]	; (8081aa0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 8081a16:	681a      	ldr	r2, [r3, #0]
 8081a18:	07d1      	lsls	r1, r2, #31
 8081a1a:	bf5c      	itt	pl
 8081a1c:	2201      	movpl	r2, #1
 8081a1e:	601a      	strpl	r2, [r3, #0]
 8081a20:	4b20      	ldr	r3, [pc, #128]	; (8081aa4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 8081a22:	681a      	ldr	r2, [r3, #0]
 8081a24:	07d2      	lsls	r2, r2, #31
 8081a26:	bf5c      	itt	pl
 8081a28:	2201      	movpl	r2, #1
 8081a2a:	601a      	strpl	r2, [r3, #0]
 8081a2c:	4b1e      	ldr	r3, [pc, #120]	; (8081aa8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 8081a2e:	681a      	ldr	r2, [r3, #0]
 8081a30:	07d0      	lsls	r0, r2, #31
 8081a32:	bf5c      	itt	pl
 8081a34:	2201      	movpl	r2, #1
 8081a36:	601a      	strpl	r2, [r3, #0]
 8081a38:	4b1c      	ldr	r3, [pc, #112]	; (8081aac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 8081a3a:	681a      	ldr	r2, [r3, #0]
 8081a3c:	07d1      	lsls	r1, r2, #31
 8081a3e:	bf5c      	itt	pl
 8081a40:	2201      	movpl	r2, #1
 8081a42:	601a      	strpl	r2, [r3, #0]
 8081a44:	4b1a      	ldr	r3, [pc, #104]	; (8081ab0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 8081a46:	681a      	ldr	r2, [r3, #0]
 8081a48:	07d2      	lsls	r2, r2, #31
 8081a4a:	bf5c      	itt	pl
 8081a4c:	2201      	movpl	r2, #1
 8081a4e:	601a      	strpl	r2, [r3, #0]
 8081a50:	4b18      	ldr	r3, [pc, #96]	; (8081ab4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 8081a52:	681a      	ldr	r2, [r3, #0]
 8081a54:	07d0      	lsls	r0, r2, #31
 8081a56:	bf5c      	itt	pl
 8081a58:	2201      	movpl	r2, #1
 8081a5a:	601a      	strpl	r2, [r3, #0]
 8081a5c:	4b16      	ldr	r3, [pc, #88]	; (8081ab8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 8081a5e:	681a      	ldr	r2, [r3, #0]
 8081a60:	07d1      	lsls	r1, r2, #31
 8081a62:	bf5c      	itt	pl
 8081a64:	2201      	movpl	r2, #1
 8081a66:	601a      	strpl	r2, [r3, #0]
 8081a68:	4b14      	ldr	r3, [pc, #80]	; (8081abc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 8081a6a:	681a      	ldr	r2, [r3, #0]
 8081a6c:	07d2      	lsls	r2, r2, #31
 8081a6e:	bf5c      	itt	pl
 8081a70:	2201      	movpl	r2, #1
 8081a72:	601a      	strpl	r2, [r3, #0]
 8081a74:	4b12      	ldr	r3, [pc, #72]	; (8081ac0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 8081a76:	681a      	ldr	r2, [r3, #0]
 8081a78:	07d0      	lsls	r0, r2, #31
 8081a7a:	bf5c      	itt	pl
 8081a7c:	2201      	movpl	r2, #1
 8081a7e:	601a      	strpl	r2, [r3, #0]
 8081a80:	4b10      	ldr	r3, [pc, #64]	; (8081ac4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 8081a82:	681a      	ldr	r2, [r3, #0]
 8081a84:	07d1      	lsls	r1, r2, #31
 8081a86:	bf5c      	itt	pl
 8081a88:	2201      	movpl	r2, #1
 8081a8a:	601a      	strpl	r2, [r3, #0]
 8081a8c:	4b0e      	ldr	r3, [pc, #56]	; (8081ac8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 8081a8e:	681a      	ldr	r2, [r3, #0]
 8081a90:	07d2      	lsls	r2, r2, #31
 8081a92:	bf5c      	itt	pl
 8081a94:	2201      	movpl	r2, #1
 8081a96:	601a      	strpl	r2, [r3, #0]
 8081a98:	4770      	bx	lr
 8081a9a:	bf00      	nop
 8081a9c:	20000a40 	.word	0x20000a40
 8081aa0:	20000a3c 	.word	0x20000a3c
 8081aa4:	20000a38 	.word	0x20000a38
 8081aa8:	20000a34 	.word	0x20000a34
 8081aac:	20000a30 	.word	0x20000a30
 8081ab0:	20000a2c 	.word	0x20000a2c
 8081ab4:	20000a28 	.word	0x20000a28
 8081ab8:	20000a24 	.word	0x20000a24
 8081abc:	20000a20 	.word	0x20000a20
 8081ac0:	20000a1c 	.word	0x20000a1c
 8081ac4:	20000a18 	.word	0x20000a18
 8081ac8:	20000a14 	.word	0x20000a14

08081acc <__aeabi_drsub>:
 8081acc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8081ad0:	e002      	b.n	8081ad8 <__adddf3>
 8081ad2:	bf00      	nop

08081ad4 <__aeabi_dsub>:
 8081ad4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08081ad8 <__adddf3>:
 8081ad8:	b530      	push	{r4, r5, lr}
 8081ada:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8081ade:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8081ae2:	ea94 0f05 	teq	r4, r5
 8081ae6:	bf08      	it	eq
 8081ae8:	ea90 0f02 	teqeq	r0, r2
 8081aec:	bf1f      	itttt	ne
 8081aee:	ea54 0c00 	orrsne.w	ip, r4, r0
 8081af2:	ea55 0c02 	orrsne.w	ip, r5, r2
 8081af6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8081afa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8081afe:	f000 80e2 	beq.w	8081cc6 <__adddf3+0x1ee>
 8081b02:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8081b06:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8081b0a:	bfb8      	it	lt
 8081b0c:	426d      	neglt	r5, r5
 8081b0e:	dd0c      	ble.n	8081b2a <__adddf3+0x52>
 8081b10:	442c      	add	r4, r5
 8081b12:	ea80 0202 	eor.w	r2, r0, r2
 8081b16:	ea81 0303 	eor.w	r3, r1, r3
 8081b1a:	ea82 0000 	eor.w	r0, r2, r0
 8081b1e:	ea83 0101 	eor.w	r1, r3, r1
 8081b22:	ea80 0202 	eor.w	r2, r0, r2
 8081b26:	ea81 0303 	eor.w	r3, r1, r3
 8081b2a:	2d36      	cmp	r5, #54	; 0x36
 8081b2c:	bf88      	it	hi
 8081b2e:	bd30      	pophi	{r4, r5, pc}
 8081b30:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8081b34:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8081b38:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8081b3c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8081b40:	d002      	beq.n	8081b48 <__adddf3+0x70>
 8081b42:	4240      	negs	r0, r0
 8081b44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8081b48:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8081b4c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8081b50:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8081b54:	d002      	beq.n	8081b5c <__adddf3+0x84>
 8081b56:	4252      	negs	r2, r2
 8081b58:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8081b5c:	ea94 0f05 	teq	r4, r5
 8081b60:	f000 80a7 	beq.w	8081cb2 <__adddf3+0x1da>
 8081b64:	f1a4 0401 	sub.w	r4, r4, #1
 8081b68:	f1d5 0e20 	rsbs	lr, r5, #32
 8081b6c:	db0d      	blt.n	8081b8a <__adddf3+0xb2>
 8081b6e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8081b72:	fa22 f205 	lsr.w	r2, r2, r5
 8081b76:	1880      	adds	r0, r0, r2
 8081b78:	f141 0100 	adc.w	r1, r1, #0
 8081b7c:	fa03 f20e 	lsl.w	r2, r3, lr
 8081b80:	1880      	adds	r0, r0, r2
 8081b82:	fa43 f305 	asr.w	r3, r3, r5
 8081b86:	4159      	adcs	r1, r3
 8081b88:	e00e      	b.n	8081ba8 <__adddf3+0xd0>
 8081b8a:	f1a5 0520 	sub.w	r5, r5, #32
 8081b8e:	f10e 0e20 	add.w	lr, lr, #32
 8081b92:	2a01      	cmp	r2, #1
 8081b94:	fa03 fc0e 	lsl.w	ip, r3, lr
 8081b98:	bf28      	it	cs
 8081b9a:	f04c 0c02 	orrcs.w	ip, ip, #2
 8081b9e:	fa43 f305 	asr.w	r3, r3, r5
 8081ba2:	18c0      	adds	r0, r0, r3
 8081ba4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8081ba8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8081bac:	d507      	bpl.n	8081bbe <__adddf3+0xe6>
 8081bae:	f04f 0e00 	mov.w	lr, #0
 8081bb2:	f1dc 0c00 	rsbs	ip, ip, #0
 8081bb6:	eb7e 0000 	sbcs.w	r0, lr, r0
 8081bba:	eb6e 0101 	sbc.w	r1, lr, r1
 8081bbe:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8081bc2:	d31b      	bcc.n	8081bfc <__adddf3+0x124>
 8081bc4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8081bc8:	d30c      	bcc.n	8081be4 <__adddf3+0x10c>
 8081bca:	0849      	lsrs	r1, r1, #1
 8081bcc:	ea5f 0030 	movs.w	r0, r0, rrx
 8081bd0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8081bd4:	f104 0401 	add.w	r4, r4, #1
 8081bd8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8081bdc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8081be0:	f080 809a 	bcs.w	8081d18 <__adddf3+0x240>
 8081be4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8081be8:	bf08      	it	eq
 8081bea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8081bee:	f150 0000 	adcs.w	r0, r0, #0
 8081bf2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8081bf6:	ea41 0105 	orr.w	r1, r1, r5
 8081bfa:	bd30      	pop	{r4, r5, pc}
 8081bfc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8081c00:	4140      	adcs	r0, r0
 8081c02:	eb41 0101 	adc.w	r1, r1, r1
 8081c06:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8081c0a:	f1a4 0401 	sub.w	r4, r4, #1
 8081c0e:	d1e9      	bne.n	8081be4 <__adddf3+0x10c>
 8081c10:	f091 0f00 	teq	r1, #0
 8081c14:	bf04      	itt	eq
 8081c16:	4601      	moveq	r1, r0
 8081c18:	2000      	moveq	r0, #0
 8081c1a:	fab1 f381 	clz	r3, r1
 8081c1e:	bf08      	it	eq
 8081c20:	3320      	addeq	r3, #32
 8081c22:	f1a3 030b 	sub.w	r3, r3, #11
 8081c26:	f1b3 0220 	subs.w	r2, r3, #32
 8081c2a:	da0c      	bge.n	8081c46 <__adddf3+0x16e>
 8081c2c:	320c      	adds	r2, #12
 8081c2e:	dd08      	ble.n	8081c42 <__adddf3+0x16a>
 8081c30:	f102 0c14 	add.w	ip, r2, #20
 8081c34:	f1c2 020c 	rsb	r2, r2, #12
 8081c38:	fa01 f00c 	lsl.w	r0, r1, ip
 8081c3c:	fa21 f102 	lsr.w	r1, r1, r2
 8081c40:	e00c      	b.n	8081c5c <__adddf3+0x184>
 8081c42:	f102 0214 	add.w	r2, r2, #20
 8081c46:	bfd8      	it	le
 8081c48:	f1c2 0c20 	rsble	ip, r2, #32
 8081c4c:	fa01 f102 	lsl.w	r1, r1, r2
 8081c50:	fa20 fc0c 	lsr.w	ip, r0, ip
 8081c54:	bfdc      	itt	le
 8081c56:	ea41 010c 	orrle.w	r1, r1, ip
 8081c5a:	4090      	lslle	r0, r2
 8081c5c:	1ae4      	subs	r4, r4, r3
 8081c5e:	bfa2      	ittt	ge
 8081c60:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8081c64:	4329      	orrge	r1, r5
 8081c66:	bd30      	popge	{r4, r5, pc}
 8081c68:	ea6f 0404 	mvn.w	r4, r4
 8081c6c:	3c1f      	subs	r4, #31
 8081c6e:	da1c      	bge.n	8081caa <__adddf3+0x1d2>
 8081c70:	340c      	adds	r4, #12
 8081c72:	dc0e      	bgt.n	8081c92 <__adddf3+0x1ba>
 8081c74:	f104 0414 	add.w	r4, r4, #20
 8081c78:	f1c4 0220 	rsb	r2, r4, #32
 8081c7c:	fa20 f004 	lsr.w	r0, r0, r4
 8081c80:	fa01 f302 	lsl.w	r3, r1, r2
 8081c84:	ea40 0003 	orr.w	r0, r0, r3
 8081c88:	fa21 f304 	lsr.w	r3, r1, r4
 8081c8c:	ea45 0103 	orr.w	r1, r5, r3
 8081c90:	bd30      	pop	{r4, r5, pc}
 8081c92:	f1c4 040c 	rsb	r4, r4, #12
 8081c96:	f1c4 0220 	rsb	r2, r4, #32
 8081c9a:	fa20 f002 	lsr.w	r0, r0, r2
 8081c9e:	fa01 f304 	lsl.w	r3, r1, r4
 8081ca2:	ea40 0003 	orr.w	r0, r0, r3
 8081ca6:	4629      	mov	r1, r5
 8081ca8:	bd30      	pop	{r4, r5, pc}
 8081caa:	fa21 f004 	lsr.w	r0, r1, r4
 8081cae:	4629      	mov	r1, r5
 8081cb0:	bd30      	pop	{r4, r5, pc}
 8081cb2:	f094 0f00 	teq	r4, #0
 8081cb6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8081cba:	bf06      	itte	eq
 8081cbc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8081cc0:	3401      	addeq	r4, #1
 8081cc2:	3d01      	subne	r5, #1
 8081cc4:	e74e      	b.n	8081b64 <__adddf3+0x8c>
 8081cc6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8081cca:	bf18      	it	ne
 8081ccc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8081cd0:	d029      	beq.n	8081d26 <__adddf3+0x24e>
 8081cd2:	ea94 0f05 	teq	r4, r5
 8081cd6:	bf08      	it	eq
 8081cd8:	ea90 0f02 	teqeq	r0, r2
 8081cdc:	d005      	beq.n	8081cea <__adddf3+0x212>
 8081cde:	ea54 0c00 	orrs.w	ip, r4, r0
 8081ce2:	bf04      	itt	eq
 8081ce4:	4619      	moveq	r1, r3
 8081ce6:	4610      	moveq	r0, r2
 8081ce8:	bd30      	pop	{r4, r5, pc}
 8081cea:	ea91 0f03 	teq	r1, r3
 8081cee:	bf1e      	ittt	ne
 8081cf0:	2100      	movne	r1, #0
 8081cf2:	2000      	movne	r0, #0
 8081cf4:	bd30      	popne	{r4, r5, pc}
 8081cf6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8081cfa:	d105      	bne.n	8081d08 <__adddf3+0x230>
 8081cfc:	0040      	lsls	r0, r0, #1
 8081cfe:	4149      	adcs	r1, r1
 8081d00:	bf28      	it	cs
 8081d02:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8081d06:	bd30      	pop	{r4, r5, pc}
 8081d08:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8081d0c:	bf3c      	itt	cc
 8081d0e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8081d12:	bd30      	popcc	{r4, r5, pc}
 8081d14:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8081d18:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8081d1c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8081d20:	f04f 0000 	mov.w	r0, #0
 8081d24:	bd30      	pop	{r4, r5, pc}
 8081d26:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8081d2a:	bf1a      	itte	ne
 8081d2c:	4619      	movne	r1, r3
 8081d2e:	4610      	movne	r0, r2
 8081d30:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8081d34:	bf1c      	itt	ne
 8081d36:	460b      	movne	r3, r1
 8081d38:	4602      	movne	r2, r0
 8081d3a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8081d3e:	bf06      	itte	eq
 8081d40:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8081d44:	ea91 0f03 	teqeq	r1, r3
 8081d48:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8081d4c:	bd30      	pop	{r4, r5, pc}
 8081d4e:	bf00      	nop

08081d50 <__aeabi_ui2d>:
 8081d50:	f090 0f00 	teq	r0, #0
 8081d54:	bf04      	itt	eq
 8081d56:	2100      	moveq	r1, #0
 8081d58:	4770      	bxeq	lr
 8081d5a:	b530      	push	{r4, r5, lr}
 8081d5c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8081d60:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8081d64:	f04f 0500 	mov.w	r5, #0
 8081d68:	f04f 0100 	mov.w	r1, #0
 8081d6c:	e750      	b.n	8081c10 <__adddf3+0x138>
 8081d6e:	bf00      	nop

08081d70 <__aeabi_i2d>:
 8081d70:	f090 0f00 	teq	r0, #0
 8081d74:	bf04      	itt	eq
 8081d76:	2100      	moveq	r1, #0
 8081d78:	4770      	bxeq	lr
 8081d7a:	b530      	push	{r4, r5, lr}
 8081d7c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8081d80:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8081d84:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8081d88:	bf48      	it	mi
 8081d8a:	4240      	negmi	r0, r0
 8081d8c:	f04f 0100 	mov.w	r1, #0
 8081d90:	e73e      	b.n	8081c10 <__adddf3+0x138>
 8081d92:	bf00      	nop

08081d94 <__aeabi_f2d>:
 8081d94:	0042      	lsls	r2, r0, #1
 8081d96:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8081d9a:	ea4f 0131 	mov.w	r1, r1, rrx
 8081d9e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8081da2:	bf1f      	itttt	ne
 8081da4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8081da8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8081dac:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8081db0:	4770      	bxne	lr
 8081db2:	f092 0f00 	teq	r2, #0
 8081db6:	bf14      	ite	ne
 8081db8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8081dbc:	4770      	bxeq	lr
 8081dbe:	b530      	push	{r4, r5, lr}
 8081dc0:	f44f 7460 	mov.w	r4, #896	; 0x380
 8081dc4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8081dc8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8081dcc:	e720      	b.n	8081c10 <__adddf3+0x138>
 8081dce:	bf00      	nop

08081dd0 <__aeabi_ul2d>:
 8081dd0:	ea50 0201 	orrs.w	r2, r0, r1
 8081dd4:	bf08      	it	eq
 8081dd6:	4770      	bxeq	lr
 8081dd8:	b530      	push	{r4, r5, lr}
 8081dda:	f04f 0500 	mov.w	r5, #0
 8081dde:	e00a      	b.n	8081df6 <__aeabi_l2d+0x16>

08081de0 <__aeabi_l2d>:
 8081de0:	ea50 0201 	orrs.w	r2, r0, r1
 8081de4:	bf08      	it	eq
 8081de6:	4770      	bxeq	lr
 8081de8:	b530      	push	{r4, r5, lr}
 8081dea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8081dee:	d502      	bpl.n	8081df6 <__aeabi_l2d+0x16>
 8081df0:	4240      	negs	r0, r0
 8081df2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8081df6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8081dfa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8081dfe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8081e02:	f43f aedc 	beq.w	8081bbe <__adddf3+0xe6>
 8081e06:	f04f 0203 	mov.w	r2, #3
 8081e0a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8081e0e:	bf18      	it	ne
 8081e10:	3203      	addne	r2, #3
 8081e12:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8081e16:	bf18      	it	ne
 8081e18:	3203      	addne	r2, #3
 8081e1a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8081e1e:	f1c2 0320 	rsb	r3, r2, #32
 8081e22:	fa00 fc03 	lsl.w	ip, r0, r3
 8081e26:	fa20 f002 	lsr.w	r0, r0, r2
 8081e2a:	fa01 fe03 	lsl.w	lr, r1, r3
 8081e2e:	ea40 000e 	orr.w	r0, r0, lr
 8081e32:	fa21 f102 	lsr.w	r1, r1, r2
 8081e36:	4414      	add	r4, r2
 8081e38:	e6c1      	b.n	8081bbe <__adddf3+0xe6>
 8081e3a:	bf00      	nop

08081e3c <__aeabi_dmul>:
 8081e3c:	b570      	push	{r4, r5, r6, lr}
 8081e3e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8081e42:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8081e46:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8081e4a:	bf1d      	ittte	ne
 8081e4c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8081e50:	ea94 0f0c 	teqne	r4, ip
 8081e54:	ea95 0f0c 	teqne	r5, ip
 8081e58:	f000 f8de 	bleq	8082018 <__aeabi_dmul+0x1dc>
 8081e5c:	442c      	add	r4, r5
 8081e5e:	ea81 0603 	eor.w	r6, r1, r3
 8081e62:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8081e66:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8081e6a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8081e6e:	bf18      	it	ne
 8081e70:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8081e74:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8081e78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8081e7c:	d038      	beq.n	8081ef0 <__aeabi_dmul+0xb4>
 8081e7e:	fba0 ce02 	umull	ip, lr, r0, r2
 8081e82:	f04f 0500 	mov.w	r5, #0
 8081e86:	fbe1 e502 	umlal	lr, r5, r1, r2
 8081e8a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8081e8e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8081e92:	f04f 0600 	mov.w	r6, #0
 8081e96:	fbe1 5603 	umlal	r5, r6, r1, r3
 8081e9a:	f09c 0f00 	teq	ip, #0
 8081e9e:	bf18      	it	ne
 8081ea0:	f04e 0e01 	orrne.w	lr, lr, #1
 8081ea4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8081ea8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8081eac:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8081eb0:	d204      	bcs.n	8081ebc <__aeabi_dmul+0x80>
 8081eb2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8081eb6:	416d      	adcs	r5, r5
 8081eb8:	eb46 0606 	adc.w	r6, r6, r6
 8081ebc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8081ec0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8081ec4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8081ec8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8081ecc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8081ed0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8081ed4:	bf88      	it	hi
 8081ed6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8081eda:	d81e      	bhi.n	8081f1a <__aeabi_dmul+0xde>
 8081edc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8081ee0:	bf08      	it	eq
 8081ee2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8081ee6:	f150 0000 	adcs.w	r0, r0, #0
 8081eea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8081eee:	bd70      	pop	{r4, r5, r6, pc}
 8081ef0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8081ef4:	ea46 0101 	orr.w	r1, r6, r1
 8081ef8:	ea40 0002 	orr.w	r0, r0, r2
 8081efc:	ea81 0103 	eor.w	r1, r1, r3
 8081f00:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8081f04:	bfc2      	ittt	gt
 8081f06:	ebd4 050c 	rsbsgt	r5, r4, ip
 8081f0a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8081f0e:	bd70      	popgt	{r4, r5, r6, pc}
 8081f10:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8081f14:	f04f 0e00 	mov.w	lr, #0
 8081f18:	3c01      	subs	r4, #1
 8081f1a:	f300 80ab 	bgt.w	8082074 <__aeabi_dmul+0x238>
 8081f1e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8081f22:	bfde      	ittt	le
 8081f24:	2000      	movle	r0, #0
 8081f26:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8081f2a:	bd70      	pople	{r4, r5, r6, pc}
 8081f2c:	f1c4 0400 	rsb	r4, r4, #0
 8081f30:	3c20      	subs	r4, #32
 8081f32:	da35      	bge.n	8081fa0 <__aeabi_dmul+0x164>
 8081f34:	340c      	adds	r4, #12
 8081f36:	dc1b      	bgt.n	8081f70 <__aeabi_dmul+0x134>
 8081f38:	f104 0414 	add.w	r4, r4, #20
 8081f3c:	f1c4 0520 	rsb	r5, r4, #32
 8081f40:	fa00 f305 	lsl.w	r3, r0, r5
 8081f44:	fa20 f004 	lsr.w	r0, r0, r4
 8081f48:	fa01 f205 	lsl.w	r2, r1, r5
 8081f4c:	ea40 0002 	orr.w	r0, r0, r2
 8081f50:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8081f54:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8081f58:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8081f5c:	fa21 f604 	lsr.w	r6, r1, r4
 8081f60:	eb42 0106 	adc.w	r1, r2, r6
 8081f64:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8081f68:	bf08      	it	eq
 8081f6a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8081f6e:	bd70      	pop	{r4, r5, r6, pc}
 8081f70:	f1c4 040c 	rsb	r4, r4, #12
 8081f74:	f1c4 0520 	rsb	r5, r4, #32
 8081f78:	fa00 f304 	lsl.w	r3, r0, r4
 8081f7c:	fa20 f005 	lsr.w	r0, r0, r5
 8081f80:	fa01 f204 	lsl.w	r2, r1, r4
 8081f84:	ea40 0002 	orr.w	r0, r0, r2
 8081f88:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8081f8c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8081f90:	f141 0100 	adc.w	r1, r1, #0
 8081f94:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8081f98:	bf08      	it	eq
 8081f9a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8081f9e:	bd70      	pop	{r4, r5, r6, pc}
 8081fa0:	f1c4 0520 	rsb	r5, r4, #32
 8081fa4:	fa00 f205 	lsl.w	r2, r0, r5
 8081fa8:	ea4e 0e02 	orr.w	lr, lr, r2
 8081fac:	fa20 f304 	lsr.w	r3, r0, r4
 8081fb0:	fa01 f205 	lsl.w	r2, r1, r5
 8081fb4:	ea43 0302 	orr.w	r3, r3, r2
 8081fb8:	fa21 f004 	lsr.w	r0, r1, r4
 8081fbc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8081fc0:	fa21 f204 	lsr.w	r2, r1, r4
 8081fc4:	ea20 0002 	bic.w	r0, r0, r2
 8081fc8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8081fcc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8081fd0:	bf08      	it	eq
 8081fd2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8081fd6:	bd70      	pop	{r4, r5, r6, pc}
 8081fd8:	f094 0f00 	teq	r4, #0
 8081fdc:	d10f      	bne.n	8081ffe <__aeabi_dmul+0x1c2>
 8081fde:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8081fe2:	0040      	lsls	r0, r0, #1
 8081fe4:	eb41 0101 	adc.w	r1, r1, r1
 8081fe8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8081fec:	bf08      	it	eq
 8081fee:	3c01      	subeq	r4, #1
 8081ff0:	d0f7      	beq.n	8081fe2 <__aeabi_dmul+0x1a6>
 8081ff2:	ea41 0106 	orr.w	r1, r1, r6
 8081ff6:	f095 0f00 	teq	r5, #0
 8081ffa:	bf18      	it	ne
 8081ffc:	4770      	bxne	lr
 8081ffe:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8082002:	0052      	lsls	r2, r2, #1
 8082004:	eb43 0303 	adc.w	r3, r3, r3
 8082008:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 808200c:	bf08      	it	eq
 808200e:	3d01      	subeq	r5, #1
 8082010:	d0f7      	beq.n	8082002 <__aeabi_dmul+0x1c6>
 8082012:	ea43 0306 	orr.w	r3, r3, r6
 8082016:	4770      	bx	lr
 8082018:	ea94 0f0c 	teq	r4, ip
 808201c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8082020:	bf18      	it	ne
 8082022:	ea95 0f0c 	teqne	r5, ip
 8082026:	d00c      	beq.n	8082042 <__aeabi_dmul+0x206>
 8082028:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808202c:	bf18      	it	ne
 808202e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8082032:	d1d1      	bne.n	8081fd8 <__aeabi_dmul+0x19c>
 8082034:	ea81 0103 	eor.w	r1, r1, r3
 8082038:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808203c:	f04f 0000 	mov.w	r0, #0
 8082040:	bd70      	pop	{r4, r5, r6, pc}
 8082042:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8082046:	bf06      	itte	eq
 8082048:	4610      	moveq	r0, r2
 808204a:	4619      	moveq	r1, r3
 808204c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8082050:	d019      	beq.n	8082086 <__aeabi_dmul+0x24a>
 8082052:	ea94 0f0c 	teq	r4, ip
 8082056:	d102      	bne.n	808205e <__aeabi_dmul+0x222>
 8082058:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 808205c:	d113      	bne.n	8082086 <__aeabi_dmul+0x24a>
 808205e:	ea95 0f0c 	teq	r5, ip
 8082062:	d105      	bne.n	8082070 <__aeabi_dmul+0x234>
 8082064:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8082068:	bf1c      	itt	ne
 808206a:	4610      	movne	r0, r2
 808206c:	4619      	movne	r1, r3
 808206e:	d10a      	bne.n	8082086 <__aeabi_dmul+0x24a>
 8082070:	ea81 0103 	eor.w	r1, r1, r3
 8082074:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8082078:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 808207c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8082080:	f04f 0000 	mov.w	r0, #0
 8082084:	bd70      	pop	{r4, r5, r6, pc}
 8082086:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 808208a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 808208e:	bd70      	pop	{r4, r5, r6, pc}

08082090 <__aeabi_ddiv>:
 8082090:	b570      	push	{r4, r5, r6, lr}
 8082092:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8082096:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 808209a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 808209e:	bf1d      	ittte	ne
 80820a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80820a4:	ea94 0f0c 	teqne	r4, ip
 80820a8:	ea95 0f0c 	teqne	r5, ip
 80820ac:	f000 f8a7 	bleq	80821fe <__aeabi_ddiv+0x16e>
 80820b0:	eba4 0405 	sub.w	r4, r4, r5
 80820b4:	ea81 0e03 	eor.w	lr, r1, r3
 80820b8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80820bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80820c0:	f000 8088 	beq.w	80821d4 <__aeabi_ddiv+0x144>
 80820c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80820c8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80820cc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80820d0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80820d4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80820d8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80820dc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80820e0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80820e4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80820e8:	429d      	cmp	r5, r3
 80820ea:	bf08      	it	eq
 80820ec:	4296      	cmpeq	r6, r2
 80820ee:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80820f2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80820f6:	d202      	bcs.n	80820fe <__aeabi_ddiv+0x6e>
 80820f8:	085b      	lsrs	r3, r3, #1
 80820fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80820fe:	1ab6      	subs	r6, r6, r2
 8082100:	eb65 0503 	sbc.w	r5, r5, r3
 8082104:	085b      	lsrs	r3, r3, #1
 8082106:	ea4f 0232 	mov.w	r2, r2, rrx
 808210a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 808210e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8082112:	ebb6 0e02 	subs.w	lr, r6, r2
 8082116:	eb75 0e03 	sbcs.w	lr, r5, r3
 808211a:	bf22      	ittt	cs
 808211c:	1ab6      	subcs	r6, r6, r2
 808211e:	4675      	movcs	r5, lr
 8082120:	ea40 000c 	orrcs.w	r0, r0, ip
 8082124:	085b      	lsrs	r3, r3, #1
 8082126:	ea4f 0232 	mov.w	r2, r2, rrx
 808212a:	ebb6 0e02 	subs.w	lr, r6, r2
 808212e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8082132:	bf22      	ittt	cs
 8082134:	1ab6      	subcs	r6, r6, r2
 8082136:	4675      	movcs	r5, lr
 8082138:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 808213c:	085b      	lsrs	r3, r3, #1
 808213e:	ea4f 0232 	mov.w	r2, r2, rrx
 8082142:	ebb6 0e02 	subs.w	lr, r6, r2
 8082146:	eb75 0e03 	sbcs.w	lr, r5, r3
 808214a:	bf22      	ittt	cs
 808214c:	1ab6      	subcs	r6, r6, r2
 808214e:	4675      	movcs	r5, lr
 8082150:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8082154:	085b      	lsrs	r3, r3, #1
 8082156:	ea4f 0232 	mov.w	r2, r2, rrx
 808215a:	ebb6 0e02 	subs.w	lr, r6, r2
 808215e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8082162:	bf22      	ittt	cs
 8082164:	1ab6      	subcs	r6, r6, r2
 8082166:	4675      	movcs	r5, lr
 8082168:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 808216c:	ea55 0e06 	orrs.w	lr, r5, r6
 8082170:	d018      	beq.n	80821a4 <__aeabi_ddiv+0x114>
 8082172:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8082176:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 808217a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 808217e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8082182:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8082186:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 808218a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 808218e:	d1c0      	bne.n	8082112 <__aeabi_ddiv+0x82>
 8082190:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8082194:	d10b      	bne.n	80821ae <__aeabi_ddiv+0x11e>
 8082196:	ea41 0100 	orr.w	r1, r1, r0
 808219a:	f04f 0000 	mov.w	r0, #0
 808219e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80821a2:	e7b6      	b.n	8082112 <__aeabi_ddiv+0x82>
 80821a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80821a8:	bf04      	itt	eq
 80821aa:	4301      	orreq	r1, r0
 80821ac:	2000      	moveq	r0, #0
 80821ae:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80821b2:	bf88      	it	hi
 80821b4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80821b8:	f63f aeaf 	bhi.w	8081f1a <__aeabi_dmul+0xde>
 80821bc:	ebb5 0c03 	subs.w	ip, r5, r3
 80821c0:	bf04      	itt	eq
 80821c2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80821c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80821ca:	f150 0000 	adcs.w	r0, r0, #0
 80821ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80821d2:	bd70      	pop	{r4, r5, r6, pc}
 80821d4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80821d8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80821dc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80821e0:	bfc2      	ittt	gt
 80821e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80821e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80821ea:	bd70      	popgt	{r4, r5, r6, pc}
 80821ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80821f0:	f04f 0e00 	mov.w	lr, #0
 80821f4:	3c01      	subs	r4, #1
 80821f6:	e690      	b.n	8081f1a <__aeabi_dmul+0xde>
 80821f8:	ea45 0e06 	orr.w	lr, r5, r6
 80821fc:	e68d      	b.n	8081f1a <__aeabi_dmul+0xde>
 80821fe:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8082202:	ea94 0f0c 	teq	r4, ip
 8082206:	bf08      	it	eq
 8082208:	ea95 0f0c 	teqeq	r5, ip
 808220c:	f43f af3b 	beq.w	8082086 <__aeabi_dmul+0x24a>
 8082210:	ea94 0f0c 	teq	r4, ip
 8082214:	d10a      	bne.n	808222c <__aeabi_ddiv+0x19c>
 8082216:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 808221a:	f47f af34 	bne.w	8082086 <__aeabi_dmul+0x24a>
 808221e:	ea95 0f0c 	teq	r5, ip
 8082222:	f47f af25 	bne.w	8082070 <__aeabi_dmul+0x234>
 8082226:	4610      	mov	r0, r2
 8082228:	4619      	mov	r1, r3
 808222a:	e72c      	b.n	8082086 <__aeabi_dmul+0x24a>
 808222c:	ea95 0f0c 	teq	r5, ip
 8082230:	d106      	bne.n	8082240 <__aeabi_ddiv+0x1b0>
 8082232:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8082236:	f43f aefd 	beq.w	8082034 <__aeabi_dmul+0x1f8>
 808223a:	4610      	mov	r0, r2
 808223c:	4619      	mov	r1, r3
 808223e:	e722      	b.n	8082086 <__aeabi_dmul+0x24a>
 8082240:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8082244:	bf18      	it	ne
 8082246:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808224a:	f47f aec5 	bne.w	8081fd8 <__aeabi_dmul+0x19c>
 808224e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8082252:	f47f af0d 	bne.w	8082070 <__aeabi_dmul+0x234>
 8082256:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 808225a:	f47f aeeb 	bne.w	8082034 <__aeabi_dmul+0x1f8>
 808225e:	e712      	b.n	8082086 <__aeabi_dmul+0x24a>

08082260 <__gedf2>:
 8082260:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8082264:	e006      	b.n	8082274 <__cmpdf2+0x4>
 8082266:	bf00      	nop

08082268 <__ledf2>:
 8082268:	f04f 0c01 	mov.w	ip, #1
 808226c:	e002      	b.n	8082274 <__cmpdf2+0x4>
 808226e:	bf00      	nop

08082270 <__cmpdf2>:
 8082270:	f04f 0c01 	mov.w	ip, #1
 8082274:	f84d cd04 	str.w	ip, [sp, #-4]!
 8082278:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 808227c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8082280:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8082284:	bf18      	it	ne
 8082286:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 808228a:	d01b      	beq.n	80822c4 <__cmpdf2+0x54>
 808228c:	b001      	add	sp, #4
 808228e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8082292:	bf0c      	ite	eq
 8082294:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8082298:	ea91 0f03 	teqne	r1, r3
 808229c:	bf02      	ittt	eq
 808229e:	ea90 0f02 	teqeq	r0, r2
 80822a2:	2000      	moveq	r0, #0
 80822a4:	4770      	bxeq	lr
 80822a6:	f110 0f00 	cmn.w	r0, #0
 80822aa:	ea91 0f03 	teq	r1, r3
 80822ae:	bf58      	it	pl
 80822b0:	4299      	cmppl	r1, r3
 80822b2:	bf08      	it	eq
 80822b4:	4290      	cmpeq	r0, r2
 80822b6:	bf2c      	ite	cs
 80822b8:	17d8      	asrcs	r0, r3, #31
 80822ba:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80822be:	f040 0001 	orr.w	r0, r0, #1
 80822c2:	4770      	bx	lr
 80822c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80822c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80822cc:	d102      	bne.n	80822d4 <__cmpdf2+0x64>
 80822ce:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80822d2:	d107      	bne.n	80822e4 <__cmpdf2+0x74>
 80822d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80822d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80822dc:	d1d6      	bne.n	808228c <__cmpdf2+0x1c>
 80822de:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80822e2:	d0d3      	beq.n	808228c <__cmpdf2+0x1c>
 80822e4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80822e8:	4770      	bx	lr
 80822ea:	bf00      	nop

080822ec <__aeabi_cdrcmple>:
 80822ec:	4684      	mov	ip, r0
 80822ee:	4610      	mov	r0, r2
 80822f0:	4662      	mov	r2, ip
 80822f2:	468c      	mov	ip, r1
 80822f4:	4619      	mov	r1, r3
 80822f6:	4663      	mov	r3, ip
 80822f8:	e000      	b.n	80822fc <__aeabi_cdcmpeq>
 80822fa:	bf00      	nop

080822fc <__aeabi_cdcmpeq>:
 80822fc:	b501      	push	{r0, lr}
 80822fe:	f7ff ffb7 	bl	8082270 <__cmpdf2>
 8082302:	2800      	cmp	r0, #0
 8082304:	bf48      	it	mi
 8082306:	f110 0f00 	cmnmi.w	r0, #0
 808230a:	bd01      	pop	{r0, pc}

0808230c <__aeabi_dcmpeq>:
 808230c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8082310:	f7ff fff4 	bl	80822fc <__aeabi_cdcmpeq>
 8082314:	bf0c      	ite	eq
 8082316:	2001      	moveq	r0, #1
 8082318:	2000      	movne	r0, #0
 808231a:	f85d fb08 	ldr.w	pc, [sp], #8
 808231e:	bf00      	nop

08082320 <__aeabi_dcmplt>:
 8082320:	f84d ed08 	str.w	lr, [sp, #-8]!
 8082324:	f7ff ffea 	bl	80822fc <__aeabi_cdcmpeq>
 8082328:	bf34      	ite	cc
 808232a:	2001      	movcc	r0, #1
 808232c:	2000      	movcs	r0, #0
 808232e:	f85d fb08 	ldr.w	pc, [sp], #8
 8082332:	bf00      	nop

08082334 <__aeabi_dcmple>:
 8082334:	f84d ed08 	str.w	lr, [sp, #-8]!
 8082338:	f7ff ffe0 	bl	80822fc <__aeabi_cdcmpeq>
 808233c:	bf94      	ite	ls
 808233e:	2001      	movls	r0, #1
 8082340:	2000      	movhi	r0, #0
 8082342:	f85d fb08 	ldr.w	pc, [sp], #8
 8082346:	bf00      	nop

08082348 <__aeabi_dcmpge>:
 8082348:	f84d ed08 	str.w	lr, [sp, #-8]!
 808234c:	f7ff ffce 	bl	80822ec <__aeabi_cdrcmple>
 8082350:	bf94      	ite	ls
 8082352:	2001      	movls	r0, #1
 8082354:	2000      	movhi	r0, #0
 8082356:	f85d fb08 	ldr.w	pc, [sp], #8
 808235a:	bf00      	nop

0808235c <__aeabi_dcmpgt>:
 808235c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8082360:	f7ff ffc4 	bl	80822ec <__aeabi_cdrcmple>
 8082364:	bf34      	ite	cc
 8082366:	2001      	movcc	r0, #1
 8082368:	2000      	movcs	r0, #0
 808236a:	f85d fb08 	ldr.w	pc, [sp], #8
 808236e:	bf00      	nop

08082370 <__aeabi_dcmpun>:
 8082370:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8082374:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8082378:	d102      	bne.n	8082380 <__aeabi_dcmpun+0x10>
 808237a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 808237e:	d10a      	bne.n	8082396 <__aeabi_dcmpun+0x26>
 8082380:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8082384:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8082388:	d102      	bne.n	8082390 <__aeabi_dcmpun+0x20>
 808238a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 808238e:	d102      	bne.n	8082396 <__aeabi_dcmpun+0x26>
 8082390:	f04f 0000 	mov.w	r0, #0
 8082394:	4770      	bx	lr
 8082396:	f04f 0001 	mov.w	r0, #1
 808239a:	4770      	bx	lr

0808239c <__aeabi_d2iz>:
 808239c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80823a0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80823a4:	d215      	bcs.n	80823d2 <__aeabi_d2iz+0x36>
 80823a6:	d511      	bpl.n	80823cc <__aeabi_d2iz+0x30>
 80823a8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80823ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80823b0:	d912      	bls.n	80823d8 <__aeabi_d2iz+0x3c>
 80823b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80823b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80823ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80823be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80823c2:	fa23 f002 	lsr.w	r0, r3, r2
 80823c6:	bf18      	it	ne
 80823c8:	4240      	negne	r0, r0
 80823ca:	4770      	bx	lr
 80823cc:	f04f 0000 	mov.w	r0, #0
 80823d0:	4770      	bx	lr
 80823d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80823d6:	d105      	bne.n	80823e4 <__aeabi_d2iz+0x48>
 80823d8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80823dc:	bf08      	it	eq
 80823de:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80823e2:	4770      	bx	lr
 80823e4:	f04f 0000 	mov.w	r0, #0
 80823e8:	4770      	bx	lr
 80823ea:	bf00      	nop

080823ec <__aeabi_d2uiz>:
 80823ec:	004a      	lsls	r2, r1, #1
 80823ee:	d211      	bcs.n	8082414 <__aeabi_d2uiz+0x28>
 80823f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80823f4:	d211      	bcs.n	808241a <__aeabi_d2uiz+0x2e>
 80823f6:	d50d      	bpl.n	8082414 <__aeabi_d2uiz+0x28>
 80823f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80823fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8082400:	d40e      	bmi.n	8082420 <__aeabi_d2uiz+0x34>
 8082402:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8082406:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808240a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 808240e:	fa23 f002 	lsr.w	r0, r3, r2
 8082412:	4770      	bx	lr
 8082414:	f04f 0000 	mov.w	r0, #0
 8082418:	4770      	bx	lr
 808241a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 808241e:	d102      	bne.n	8082426 <__aeabi_d2uiz+0x3a>
 8082420:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8082424:	4770      	bx	lr
 8082426:	f04f 0000 	mov.w	r0, #0
 808242a:	4770      	bx	lr

0808242c <__aeabi_uldivmod>:
 808242c:	b953      	cbnz	r3, 8082444 <__aeabi_uldivmod+0x18>
 808242e:	b94a      	cbnz	r2, 8082444 <__aeabi_uldivmod+0x18>
 8082430:	2900      	cmp	r1, #0
 8082432:	bf08      	it	eq
 8082434:	2800      	cmpeq	r0, #0
 8082436:	bf1c      	itt	ne
 8082438:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 808243c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8082440:	f000 b9a6 	b.w	8082790 <__aeabi_idiv0>
 8082444:	f1ad 0c08 	sub.w	ip, sp, #8
 8082448:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 808244c:	f000 f82a 	bl	80824a4 <__udivmoddi4>
 8082450:	f8dd e004 	ldr.w	lr, [sp, #4]
 8082454:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8082458:	b004      	add	sp, #16
 808245a:	4770      	bx	lr

0808245c <__aeabi_d2ulz>:
 808245c:	b5d0      	push	{r4, r6, r7, lr}
 808245e:	2200      	movs	r2, #0
 8082460:	4b0e      	ldr	r3, [pc, #56]	; (808249c <__aeabi_d2ulz+0x40>)
 8082462:	4606      	mov	r6, r0
 8082464:	460f      	mov	r7, r1
 8082466:	f7ff fce9 	bl	8081e3c <__aeabi_dmul>
 808246a:	f7ff ffbf 	bl	80823ec <__aeabi_d2uiz>
 808246e:	4604      	mov	r4, r0
 8082470:	f7ff fc6e 	bl	8081d50 <__aeabi_ui2d>
 8082474:	2200      	movs	r2, #0
 8082476:	4b0a      	ldr	r3, [pc, #40]	; (80824a0 <__aeabi_d2ulz+0x44>)
 8082478:	f7ff fce0 	bl	8081e3c <__aeabi_dmul>
 808247c:	4602      	mov	r2, r0
 808247e:	460b      	mov	r3, r1
 8082480:	4630      	mov	r0, r6
 8082482:	4639      	mov	r1, r7
 8082484:	f7ff fb26 	bl	8081ad4 <__aeabi_dsub>
 8082488:	f7ff ffb0 	bl	80823ec <__aeabi_d2uiz>
 808248c:	4623      	mov	r3, r4
 808248e:	2200      	movs	r2, #0
 8082490:	ea42 0200 	orr.w	r2, r2, r0
 8082494:	4610      	mov	r0, r2
 8082496:	4619      	mov	r1, r3
 8082498:	bdd0      	pop	{r4, r6, r7, pc}
 808249a:	bf00      	nop
 808249c:	3df00000 	.word	0x3df00000
 80824a0:	41f00000 	.word	0x41f00000

080824a4 <__udivmoddi4>:
 80824a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80824a8:	468c      	mov	ip, r1
 80824aa:	460c      	mov	r4, r1
 80824ac:	4605      	mov	r5, r0
 80824ae:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80824b0:	2b00      	cmp	r3, #0
 80824b2:	d14f      	bne.n	8082554 <__udivmoddi4+0xb0>
 80824b4:	428a      	cmp	r2, r1
 80824b6:	4617      	mov	r7, r2
 80824b8:	d96b      	bls.n	8082592 <__udivmoddi4+0xee>
 80824ba:	fab2 fe82 	clz	lr, r2
 80824be:	f1be 0f00 	cmp.w	lr, #0
 80824c2:	d00b      	beq.n	80824dc <__udivmoddi4+0x38>
 80824c4:	f1ce 0520 	rsb	r5, lr, #32
 80824c8:	fa20 f505 	lsr.w	r5, r0, r5
 80824cc:	fa01 f30e 	lsl.w	r3, r1, lr
 80824d0:	ea45 0c03 	orr.w	ip, r5, r3
 80824d4:	fa02 f70e 	lsl.w	r7, r2, lr
 80824d8:	fa00 f50e 	lsl.w	r5, r0, lr
 80824dc:	0c39      	lsrs	r1, r7, #16
 80824de:	fbbc f0f1 	udiv	r0, ip, r1
 80824e2:	b2ba      	uxth	r2, r7
 80824e4:	fb01 c310 	mls	r3, r1, r0, ip
 80824e8:	fb00 f802 	mul.w	r8, r0, r2
 80824ec:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80824f0:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
 80824f4:	45a0      	cmp	r8, r4
 80824f6:	d909      	bls.n	808250c <__udivmoddi4+0x68>
 80824f8:	19e4      	adds	r4, r4, r7
 80824fa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80824fe:	f080 8128 	bcs.w	8082752 <__udivmoddi4+0x2ae>
 8082502:	45a0      	cmp	r8, r4
 8082504:	f240 8125 	bls.w	8082752 <__udivmoddi4+0x2ae>
 8082508:	3802      	subs	r0, #2
 808250a:	443c      	add	r4, r7
 808250c:	ebc8 0404 	rsb	r4, r8, r4
 8082510:	fbb4 f3f1 	udiv	r3, r4, r1
 8082514:	fb01 4c13 	mls	ip, r1, r3, r4
 8082518:	fb03 f202 	mul.w	r2, r3, r2
 808251c:	b2ac      	uxth	r4, r5
 808251e:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
 8082522:	428a      	cmp	r2, r1
 8082524:	d909      	bls.n	808253a <__udivmoddi4+0x96>
 8082526:	19c9      	adds	r1, r1, r7
 8082528:	f103 34ff 	add.w	r4, r3, #4294967295	; 0xffffffff
 808252c:	f080 810f 	bcs.w	808274e <__udivmoddi4+0x2aa>
 8082530:	428a      	cmp	r2, r1
 8082532:	f240 810c 	bls.w	808274e <__udivmoddi4+0x2aa>
 8082536:	3b02      	subs	r3, #2
 8082538:	4439      	add	r1, r7
 808253a:	1a8a      	subs	r2, r1, r2
 808253c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8082540:	2100      	movs	r1, #0
 8082542:	2e00      	cmp	r6, #0
 8082544:	d063      	beq.n	808260e <__udivmoddi4+0x16a>
 8082546:	fa22 f20e 	lsr.w	r2, r2, lr
 808254a:	2300      	movs	r3, #0
 808254c:	e886 000c 	stmia.w	r6, {r2, r3}
 8082550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8082554:	428b      	cmp	r3, r1
 8082556:	d907      	bls.n	8082568 <__udivmoddi4+0xc4>
 8082558:	2e00      	cmp	r6, #0
 808255a:	d056      	beq.n	808260a <__udivmoddi4+0x166>
 808255c:	2100      	movs	r1, #0
 808255e:	e886 0011 	stmia.w	r6, {r0, r4}
 8082562:	4608      	mov	r0, r1
 8082564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8082568:	fab3 f183 	clz	r1, r3
 808256c:	2900      	cmp	r1, #0
 808256e:	f040 8093 	bne.w	8082698 <__udivmoddi4+0x1f4>
 8082572:	42a3      	cmp	r3, r4
 8082574:	d302      	bcc.n	808257c <__udivmoddi4+0xd8>
 8082576:	4282      	cmp	r2, r0
 8082578:	f200 80fe 	bhi.w	8082778 <__udivmoddi4+0x2d4>
 808257c:	1a85      	subs	r5, r0, r2
 808257e:	eb64 0303 	sbc.w	r3, r4, r3
 8082582:	469c      	mov	ip, r3
 8082584:	2001      	movs	r0, #1
 8082586:	2e00      	cmp	r6, #0
 8082588:	d041      	beq.n	808260e <__udivmoddi4+0x16a>
 808258a:	e886 1020 	stmia.w	r6, {r5, ip}
 808258e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8082592:	b912      	cbnz	r2, 808259a <__udivmoddi4+0xf6>
 8082594:	2701      	movs	r7, #1
 8082596:	fbb7 f7f2 	udiv	r7, r7, r2
 808259a:	fab7 fe87 	clz	lr, r7
 808259e:	f1be 0f00 	cmp.w	lr, #0
 80825a2:	d136      	bne.n	8082612 <__udivmoddi4+0x16e>
 80825a4:	1be4      	subs	r4, r4, r7
 80825a6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80825aa:	fa1f f987 	uxth.w	r9, r7
 80825ae:	2101      	movs	r1, #1
 80825b0:	fbb4 f3f8 	udiv	r3, r4, r8
 80825b4:	fb08 4413 	mls	r4, r8, r3, r4
 80825b8:	fb09 f203 	mul.w	r2, r9, r3
 80825bc:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80825c0:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
 80825c4:	42a2      	cmp	r2, r4
 80825c6:	d907      	bls.n	80825d8 <__udivmoddi4+0x134>
 80825c8:	19e4      	adds	r4, r4, r7
 80825ca:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 80825ce:	d202      	bcs.n	80825d6 <__udivmoddi4+0x132>
 80825d0:	42a2      	cmp	r2, r4
 80825d2:	f200 80d3 	bhi.w	808277c <__udivmoddi4+0x2d8>
 80825d6:	4603      	mov	r3, r0
 80825d8:	1aa4      	subs	r4, r4, r2
 80825da:	fbb4 f0f8 	udiv	r0, r4, r8
 80825de:	fb08 4810 	mls	r8, r8, r0, r4
 80825e2:	fb09 f900 	mul.w	r9, r9, r0
 80825e6:	b2ac      	uxth	r4, r5
 80825e8:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
 80825ec:	4591      	cmp	r9, r2
 80825ee:	d907      	bls.n	8082600 <__udivmoddi4+0x15c>
 80825f0:	19d2      	adds	r2, r2, r7
 80825f2:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80825f6:	d202      	bcs.n	80825fe <__udivmoddi4+0x15a>
 80825f8:	4591      	cmp	r9, r2
 80825fa:	f200 80ba 	bhi.w	8082772 <__udivmoddi4+0x2ce>
 80825fe:	4620      	mov	r0, r4
 8082600:	ebc9 0202 	rsb	r2, r9, r2
 8082604:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8082608:	e79b      	b.n	8082542 <__udivmoddi4+0x9e>
 808260a:	4631      	mov	r1, r6
 808260c:	4630      	mov	r0, r6
 808260e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8082612:	fa07 f70e 	lsl.w	r7, r7, lr
 8082616:	f1ce 0c20 	rsb	ip, lr, #32
 808261a:	fa24 f30c 	lsr.w	r3, r4, ip
 808261e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8082622:	fbb3 faf8 	udiv	sl, r3, r8
 8082626:	fa1f f987 	uxth.w	r9, r7
 808262a:	fb08 351a 	mls	r5, r8, sl, r3
 808262e:	fa20 fc0c 	lsr.w	ip, r0, ip
 8082632:	fa04 f40e 	lsl.w	r4, r4, lr
 8082636:	fb0a fb09 	mul.w	fp, sl, r9
 808263a:	ea4c 0c04 	orr.w	ip, ip, r4
 808263e:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8082642:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
 8082646:	459b      	cmp	fp, r3
 8082648:	fa00 f50e 	lsl.w	r5, r0, lr
 808264c:	d90a      	bls.n	8082664 <__udivmoddi4+0x1c0>
 808264e:	19db      	adds	r3, r3, r7
 8082650:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 8082654:	f080 808b 	bcs.w	808276e <__udivmoddi4+0x2ca>
 8082658:	459b      	cmp	fp, r3
 808265a:	f240 8088 	bls.w	808276e <__udivmoddi4+0x2ca>
 808265e:	f1aa 0a02 	sub.w	sl, sl, #2
 8082662:	443b      	add	r3, r7
 8082664:	ebcb 0303 	rsb	r3, fp, r3
 8082668:	fbb3 f0f8 	udiv	r0, r3, r8
 808266c:	fb08 3310 	mls	r3, r8, r0, r3
 8082670:	fb00 f409 	mul.w	r4, r0, r9
 8082674:	fa1f fc8c 	uxth.w	ip, ip
 8082678:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 808267c:	429c      	cmp	r4, r3
 808267e:	d907      	bls.n	8082690 <__udivmoddi4+0x1ec>
 8082680:	19db      	adds	r3, r3, r7
 8082682:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8082686:	d26e      	bcs.n	8082766 <__udivmoddi4+0x2c2>
 8082688:	429c      	cmp	r4, r3
 808268a:	d96c      	bls.n	8082766 <__udivmoddi4+0x2c2>
 808268c:	3802      	subs	r0, #2
 808268e:	443b      	add	r3, r7
 8082690:	1b1c      	subs	r4, r3, r4
 8082692:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
 8082696:	e78b      	b.n	80825b0 <__udivmoddi4+0x10c>
 8082698:	f1c1 0e20 	rsb	lr, r1, #32
 808269c:	408b      	lsls	r3, r1
 808269e:	fa22 fc0e 	lsr.w	ip, r2, lr
 80826a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80826a6:	fa24 f70e 	lsr.w	r7, r4, lr
 80826aa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80826ae:	fbb7 faf9 	udiv	sl, r7, r9
 80826b2:	fa1f f38c 	uxth.w	r3, ip
 80826b6:	fb09 771a 	mls	r7, r9, sl, r7
 80826ba:	fa20 f80e 	lsr.w	r8, r0, lr
 80826be:	408c      	lsls	r4, r1
 80826c0:	fb0a f503 	mul.w	r5, sl, r3
 80826c4:	ea48 0404 	orr.w	r4, r8, r4
 80826c8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80826cc:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 80826d0:	42bd      	cmp	r5, r7
 80826d2:	fa02 f201 	lsl.w	r2, r2, r1
 80826d6:	fa00 fb01 	lsl.w	fp, r0, r1
 80826da:	d909      	bls.n	80826f0 <__udivmoddi4+0x24c>
 80826dc:	eb17 070c 	adds.w	r7, r7, ip
 80826e0:	f10a 30ff 	add.w	r0, sl, #4294967295	; 0xffffffff
 80826e4:	d241      	bcs.n	808276a <__udivmoddi4+0x2c6>
 80826e6:	42bd      	cmp	r5, r7
 80826e8:	d93f      	bls.n	808276a <__udivmoddi4+0x2c6>
 80826ea:	f1aa 0a02 	sub.w	sl, sl, #2
 80826ee:	4467      	add	r7, ip
 80826f0:	1b7f      	subs	r7, r7, r5
 80826f2:	fbb7 f5f9 	udiv	r5, r7, r9
 80826f6:	fb09 7715 	mls	r7, r9, r5, r7
 80826fa:	fb05 f303 	mul.w	r3, r5, r3
 80826fe:	b2a4      	uxth	r4, r4
 8082700:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8082704:	42bb      	cmp	r3, r7
 8082706:	d908      	bls.n	808271a <__udivmoddi4+0x276>
 8082708:	eb17 070c 	adds.w	r7, r7, ip
 808270c:	f105 30ff 	add.w	r0, r5, #4294967295	; 0xffffffff
 8082710:	d227      	bcs.n	8082762 <__udivmoddi4+0x2be>
 8082712:	42bb      	cmp	r3, r7
 8082714:	d925      	bls.n	8082762 <__udivmoddi4+0x2be>
 8082716:	3d02      	subs	r5, #2
 8082718:	4467      	add	r7, ip
 808271a:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
 808271e:	fba0 8902 	umull	r8, r9, r0, r2
 8082722:	1aff      	subs	r7, r7, r3
 8082724:	454f      	cmp	r7, r9
 8082726:	4645      	mov	r5, r8
 8082728:	464c      	mov	r4, r9
 808272a:	d314      	bcc.n	8082756 <__udivmoddi4+0x2b2>
 808272c:	d029      	beq.n	8082782 <__udivmoddi4+0x2de>
 808272e:	b366      	cbz	r6, 808278a <__udivmoddi4+0x2e6>
 8082730:	ebbb 0305 	subs.w	r3, fp, r5
 8082734:	eb67 0704 	sbc.w	r7, r7, r4
 8082738:	fa07 fe0e 	lsl.w	lr, r7, lr
 808273c:	40cb      	lsrs	r3, r1
 808273e:	40cf      	lsrs	r7, r1
 8082740:	ea4e 0303 	orr.w	r3, lr, r3
 8082744:	e886 0088 	stmia.w	r6, {r3, r7}
 8082748:	2100      	movs	r1, #0
 808274a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808274e:	4623      	mov	r3, r4
 8082750:	e6f3      	b.n	808253a <__udivmoddi4+0x96>
 8082752:	4618      	mov	r0, r3
 8082754:	e6da      	b.n	808250c <__udivmoddi4+0x68>
 8082756:	ebb8 0502 	subs.w	r5, r8, r2
 808275a:	eb69 040c 	sbc.w	r4, r9, ip
 808275e:	3801      	subs	r0, #1
 8082760:	e7e5      	b.n	808272e <__udivmoddi4+0x28a>
 8082762:	4605      	mov	r5, r0
 8082764:	e7d9      	b.n	808271a <__udivmoddi4+0x276>
 8082766:	4610      	mov	r0, r2
 8082768:	e792      	b.n	8082690 <__udivmoddi4+0x1ec>
 808276a:	4682      	mov	sl, r0
 808276c:	e7c0      	b.n	80826f0 <__udivmoddi4+0x24c>
 808276e:	4692      	mov	sl, r2
 8082770:	e778      	b.n	8082664 <__udivmoddi4+0x1c0>
 8082772:	3802      	subs	r0, #2
 8082774:	443a      	add	r2, r7
 8082776:	e743      	b.n	8082600 <__udivmoddi4+0x15c>
 8082778:	4608      	mov	r0, r1
 808277a:	e704      	b.n	8082586 <__udivmoddi4+0xe2>
 808277c:	3b02      	subs	r3, #2
 808277e:	443c      	add	r4, r7
 8082780:	e72a      	b.n	80825d8 <__udivmoddi4+0x134>
 8082782:	45c3      	cmp	fp, r8
 8082784:	d3e7      	bcc.n	8082756 <__udivmoddi4+0x2b2>
 8082786:	463c      	mov	r4, r7
 8082788:	e7d1      	b.n	808272e <__udivmoddi4+0x28a>
 808278a:	4631      	mov	r1, r6
 808278c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08082790 <__aeabi_idiv0>:
 8082790:	4770      	bx	lr
 8082792:	bf00      	nop

08082794 <__cxa_atexit>:
 8082794:	b510      	push	{r4, lr}
 8082796:	4c05      	ldr	r4, [pc, #20]	; (80827ac <__cxa_atexit+0x18>)
 8082798:	4613      	mov	r3, r2
 808279a:	b12c      	cbz	r4, 80827a8 <__cxa_atexit+0x14>
 808279c:	460a      	mov	r2, r1
 808279e:	4601      	mov	r1, r0
 80827a0:	2002      	movs	r0, #2
 80827a2:	f3af 8000 	nop.w
 80827a6:	bd10      	pop	{r4, pc}
 80827a8:	4620      	mov	r0, r4
 80827aa:	bd10      	pop	{r4, pc}
 80827ac:	00000000 	.word	0x00000000

080827b0 <memcpy>:
 80827b0:	b510      	push	{r4, lr}
 80827b2:	1e43      	subs	r3, r0, #1
 80827b4:	440a      	add	r2, r1
 80827b6:	4291      	cmp	r1, r2
 80827b8:	d004      	beq.n	80827c4 <memcpy+0x14>
 80827ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80827be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80827c2:	e7f8      	b.n	80827b6 <memcpy+0x6>
 80827c4:	bd10      	pop	{r4, pc}

080827c6 <memset>:
 80827c6:	4603      	mov	r3, r0
 80827c8:	4402      	add	r2, r0
 80827ca:	4293      	cmp	r3, r2
 80827cc:	d002      	beq.n	80827d4 <memset+0xe>
 80827ce:	f803 1b01 	strb.w	r1, [r3], #1
 80827d2:	e7fa      	b.n	80827ca <memset+0x4>
 80827d4:	4770      	bx	lr
	...

080827d8 <srand>:
 80827d8:	b538      	push	{r3, r4, r5, lr}
 80827da:	4b12      	ldr	r3, [pc, #72]	; (8082824 <srand+0x4c>)
 80827dc:	4605      	mov	r5, r0
 80827de:	681c      	ldr	r4, [r3, #0]
 80827e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80827e2:	b9d3      	cbnz	r3, 808281a <srand+0x42>
 80827e4:	2018      	movs	r0, #24
 80827e6:	f7fd fee1 	bl	80805ac <malloc>
 80827ea:	f243 330e 	movw	r3, #13070	; 0x330e
 80827ee:	63a0      	str	r0, [r4, #56]	; 0x38
 80827f0:	8003      	strh	r3, [r0, #0]
 80827f2:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80827f6:	8043      	strh	r3, [r0, #2]
 80827f8:	f241 2334 	movw	r3, #4660	; 0x1234
 80827fc:	8083      	strh	r3, [r0, #4]
 80827fe:	f24e 636d 	movw	r3, #58989	; 0xe66d
 8082802:	80c3      	strh	r3, [r0, #6]
 8082804:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8082808:	8103      	strh	r3, [r0, #8]
 808280a:	2305      	movs	r3, #5
 808280c:	8143      	strh	r3, [r0, #10]
 808280e:	230b      	movs	r3, #11
 8082810:	8183      	strh	r3, [r0, #12]
 8082812:	2201      	movs	r2, #1
 8082814:	2300      	movs	r3, #0
 8082816:	e9c0 2304 	strd	r2, r3, [r0, #16]
 808281a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 808281c:	2200      	movs	r2, #0
 808281e:	611d      	str	r5, [r3, #16]
 8082820:	615a      	str	r2, [r3, #20]
 8082822:	bd38      	pop	{r3, r4, r5, pc}
 8082824:	20000464 	.word	0x20000464

08082828 <strcpy>:
 8082828:	4603      	mov	r3, r0
 808282a:	f811 2b01 	ldrb.w	r2, [r1], #1
 808282e:	f803 2b01 	strb.w	r2, [r3], #1
 8082832:	2a00      	cmp	r2, #0
 8082834:	d1f9      	bne.n	808282a <strcpy+0x2>
 8082836:	4770      	bx	lr

08082838 <strdup>:
 8082838:	4b02      	ldr	r3, [pc, #8]	; (8082844 <strdup+0xc>)
 808283a:	4601      	mov	r1, r0
 808283c:	6818      	ldr	r0, [r3, #0]
 808283e:	f000 b803 	b.w	8082848 <_strdup_r>
 8082842:	bf00      	nop
 8082844:	20000464 	.word	0x20000464

08082848 <_strdup_r>:
 8082848:	b570      	push	{r4, r5, r6, lr}
 808284a:	4606      	mov	r6, r0
 808284c:	4608      	mov	r0, r1
 808284e:	460c      	mov	r4, r1
 8082850:	f000 f80d 	bl	808286e <strlen>
 8082854:	1c45      	adds	r5, r0, #1
 8082856:	4629      	mov	r1, r5
 8082858:	4630      	mov	r0, r6
 808285a:	f7fd fec7 	bl	80805ec <_malloc_r>
 808285e:	4606      	mov	r6, r0
 8082860:	b118      	cbz	r0, 808286a <_strdup_r+0x22>
 8082862:	462a      	mov	r2, r5
 8082864:	4621      	mov	r1, r4
 8082866:	f7ff ffa3 	bl	80827b0 <memcpy>
 808286a:	4630      	mov	r0, r6
 808286c:	bd70      	pop	{r4, r5, r6, pc}

0808286e <strlen>:
 808286e:	4603      	mov	r3, r0
 8082870:	f813 2b01 	ldrb.w	r2, [r3], #1
 8082874:	2a00      	cmp	r2, #0
 8082876:	d1fb      	bne.n	8082870 <strlen+0x2>
 8082878:	1a18      	subs	r0, r3, r0
 808287a:	3801      	subs	r0, #1
 808287c:	4770      	bx	lr

0808287e <link_code_end>:
	...

08082880 <dynalib_user>:
 8082880:	001d 0808 005d 0808 0089 0808 008d 0808     ....]...........
 8082890:	0000 0000 6944 7473 6e61 6563 4d20 6165     ....Distance Mea
 80828a0:	7573 6572 3a64 0020 6964 7473 6e61 6563     sured: .distance
 80828b0:	6300 756f 746e 6400 6265 6775 4c00 676f     .count.debug.Log
 80828c0:	6967 676e 6120 646e 7020 736f 6974 676e     ging and posting
 80828d0:	6420 7461 2e61 002e 6f4c 6767 6e69 2067      data...Logging 
 80828e0:	6e69 2820 696d 3a6e 6573 2963 3a00 0000     in (min:sec).:..

080828f0 <_ZTVN5spark13CellularClassE>:
	...
 80828f8:	0629 0808                                   )...

080828fc <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 8082904:	0671 0808 0677 0808 069f 0808 0683 0808     q...w...........
 8082914:	0673 0808                                   s...

08082918 <_ZTV7TwoWire>:
	...
 8082920:	0bb5 0808 0bff 0808 0bd7 0808 0bb7 0808     ................
 8082930:	0bdf 0808 0be7 0808 0bef 0808 0bf7 0808     ................

08082940 <_ZTV9IPAddress>:
	...
 8082948:	0c47 0808 0c39 0808 0c3b 0808 6e6c 6600     G...9...;...ln.f
 8082958:	006e 6f63 6564 6400 7465 6961 006c 0a0d     n.code.detail...
 8082968:	2500 3130 7530 0020 205d 2500 0064 202c     .%010u .] .%d., 
 8082978:	2800 3a29 0020 5b20 6300 646f 2065 203d     .(): . [.code = 
 8082988:	2500 0069 6564 6174 6c69 2073 203d 6200     .%i.details = .b
 8082998:	7561 0064 6553 6972 6c61 5500 4253 6553     aud.Serial.USBSe
 80829a8:	6972 6c61 0031 7974 6570 7000 7261 6d61     rial1.type.param
 80829b8:	6300 646d 6900 0064 6e68 0064 7473 6d72     .cmd.id.hnd.strm
 80829c8:	6600 6c69 0074 766c 006c 6461 4864 6e61     .filt.lvl.addHan
 80829d8:	6c64 7265 7200 6d65 766f 4865 6e61 6c64     dler.removeHandl
 80829e8:	7265 6500 756e 486d 6e61 6c64 7265 0073     er.enumHandlers.
 80829f8:	534a 4e4f 7453 6572 6d61 6f4c 4867 6e61     JSONStreamLogHan
 8082a08:	6c64 7265 6100 7070 6e00 6e6f 0065 7274     dler.app.none.tr
 8082a18:	6361 0065 6e69 6f66 7700 7261 006e 7265     ace.info.warn.er
 8082a28:	6f72 0072 6170 696e 0063 6c61 006c 616e     ror.panic.all.na
 8082a38:	006e 766f 0066 6e69 0066 0000               n.ovf.inf...

08082a44 <_ZTV8SPIClass>:
	...
 8082a4c:	0f7d 0808 0f7f 0808 005a 2b25 3330 3a64     }.......Z.%+03d:
 8082a5c:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 8082a6c:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 8082a7c:	0000 0000                                   ....

08082a80 <_ZTV11USARTSerial>:
	...
 8082a88:	1291 0808 12b5 0808 12c1 0808 0cb9 0808     ................
 8082a98:	129d 0808 12a9 0808 12a3 0808 12af 0808     ................
 8082aa8:	1293 0808 1297 0808                         ........

08082ab0 <_ZTV9USBSerial>:
	...
 8082ab8:	1369 0808 13ad 0808 1387 0808 0cb9 0808     i...............
 8082ac8:	1381 0808 136b 0808 1373 0808 13a7 0808     ....k...s.......
 8082ad8:	137b 0808 1365 0808                         {...e...

08082ae0 <__sf_fake_stdin>:
	...

08082b00 <__sf_fake_stdout>:
	...

08082b20 <__sf_fake_stderr>:
	...
 8082b40:	0043                                        C.

08082b42 <link_const_variable_data_end>:
	...

08082b44 <link_constructors_location>:
 8082b44:	080802f5 	.word	0x080802f5
 8082b48:	08080635 	.word	0x08080635
 8082b4c:	08080ca9 	.word	0x08080ca9
 8082b50:	08080f61 	.word	0x08080f61
 8082b54:	0808123d 	.word	0x0808123d
 8082b58:	0808127d 	.word	0x0808127d
 8082b5c:	080817a1 	.word	0x080817a1
 8082b60:	080817d1 	.word	0x080817d1
 8082b64:	0808183d 	.word	0x0808183d
 8082b68:	08081901 	.word	0x08081901
 8082b6c:	08081985 	.word	0x08081985
 8082b70:	08081a09 	.word	0x08081a09

08082b74 <link_constructors_end>:
	...
